
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000538e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  0000538e  00005402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003918  00000000  00000000  00005558  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001073  00000000  00000000  00008e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000250  00000000  00000000  0000a0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b10  00000000  00000000  0000a333  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001782  00000000  00000000  0000ce43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b1  00000000  00000000  0000e5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000fa78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  0000fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  0000ffaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010a41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 88 24 	call	0x4910	; 0x4910 <main>
      7a:	0c 94 c5 29 	jmp	0x538a	; 0x538a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e9       	ldi	r26, 0x94	; 148
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e9       	ldi	r24, 0x94	; 148
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 96 29 	jmp	0x532c	; 0x532c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e9       	ldi	r22, 0x94	; 148
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

000008fa <__lesf2>:
     8fa:	a8 e1       	ldi	r26, 0x18	; 24
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__+0x18>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	2d 83       	std	Y+5, r18	; 0x05
     910:	3e 83       	std	Y+6, r19	; 0x06
     912:	4f 83       	std	Y+7, r20	; 0x07
     914:	58 87       	std	Y+8, r21	; 0x08
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	e8 2e       	mov	r14, r24
     91a:	f1 2c       	mov	r15, r1
     91c:	ec 0e       	add	r14, r28
     91e:	fd 1e       	adc	r15, r29
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	b7 01       	movw	r22, r14
     926:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     92a:	8e 01       	movw	r16, r28
     92c:	0f 5e       	subi	r16, 0xEF	; 239
     92e:	1f 4f       	sbci	r17, 0xFF	; 255
     930:	ce 01       	movw	r24, r28
     932:	05 96       	adiw	r24, 0x05	; 5
     934:	b8 01       	movw	r22, r16
     936:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     93a:	89 85       	ldd	r24, Y+9	; 0x09
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	40 f0       	brcs	.+16     	; 0x950 <__lesf2+0x56>
     940:	89 89       	ldd	r24, Y+17	; 0x11
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	28 f0       	brcs	.+10     	; 0x950 <__lesf2+0x56>
     946:	c7 01       	movw	r24, r14
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__lesf2+0x58>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	68 96       	adiw	r28, 0x18	; 24
     954:	e6 e0       	ldi	r30, 0x06	; 6
     956:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__+0x18>

0000095a <__floatsisf>:
     95a:	a8 e0       	ldi	r26, 0x08	; 8
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 97 29 	jmp	0x532e	; 0x532e <__prologue_saves__+0x12>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	da 01       	movw	r26, r20
     970:	c9 01       	movw	r24, r18
     972:	88 27       	eor	r24, r24
     974:	b7 fd       	sbrc	r27, 7
     976:	83 95       	inc	r24
     978:	99 27       	eor	r25, r25
     97a:	aa 27       	eor	r26, r26
     97c:	bb 27       	eor	r27, r27
     97e:	b8 2e       	mov	r11, r24
     980:	21 15       	cp	r18, r1
     982:	31 05       	cpc	r19, r1
     984:	41 05       	cpc	r20, r1
     986:	51 05       	cpc	r21, r1
     988:	19 f4       	brne	.+6      	; 0x990 <__floatsisf+0x36>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	3a c0       	rjmp	.+116    	; 0xa04 <__floatsisf+0xaa>
     990:	88 23       	and	r24, r24
     992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x64>
     994:	20 30       	cpi	r18, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	38 07       	cpc	r19, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	48 07       	cpc	r20, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	58 07       	cpc	r21, r24
     9a2:	29 f4       	brne	.+10     	; 0x9ae <__floatsisf+0x54>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	9f ec       	ldi	r25, 0xCF	; 207
     9ac:	30 c0       	rjmp	.+96     	; 0xa0e <__floatsisf+0xb4>
     9ae:	ee 24       	eor	r14, r14
     9b0:	ff 24       	eor	r15, r15
     9b2:	87 01       	movw	r16, r14
     9b4:	e2 1a       	sub	r14, r18
     9b6:	f3 0a       	sbc	r15, r19
     9b8:	04 0b       	sbc	r16, r20
     9ba:	15 0b       	sbc	r17, r21
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__floatsisf+0x68>
     9be:	79 01       	movw	r14, r18
     9c0:	8a 01       	movw	r16, r20
     9c2:	8e e1       	ldi	r24, 0x1E	; 30
     9c4:	c8 2e       	mov	r12, r24
     9c6:	d1 2c       	mov	r13, r1
     9c8:	dc 82       	std	Y+4, r13	; 0x04
     9ca:	cb 82       	std	Y+3, r12	; 0x03
     9cc:	ed 82       	std	Y+5, r14	; 0x05
     9ce:	fe 82       	std	Y+6, r15	; 0x06
     9d0:	0f 83       	std	Y+7, r16	; 0x07
     9d2:	18 87       	std	Y+8, r17	; 0x08
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	84 f4       	brge	.+32     	; 0xa04 <__floatsisf+0xaa>
     9e4:	08 2e       	mov	r0, r24
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__floatsisf+0x96>
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	00 1f       	adc	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	0a 94       	dec	r0
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__floatsisf+0x8e>
     9f4:	ed 82       	std	Y+5, r14	; 0x05
     9f6:	fe 82       	std	Y+6, r15	; 0x06
     9f8:	0f 83       	std	Y+7, r16	; 0x07
     9fa:	18 87       	std	Y+8, r17	; 0x08
     9fc:	c8 1a       	sub	r12, r24
     9fe:	d9 0a       	sbc	r13, r25
     a00:	dc 82       	std	Y+4, r13	; 0x04
     a02:	cb 82       	std	Y+3, r12	; 0x03
     a04:	ba 82       	std	Y+2, r11	; 0x02
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     a0e:	28 96       	adiw	r28, 0x08	; 8
     a10:	e9 e0       	ldi	r30, 0x09	; 9
     a12:	0c 94 b3 29 	jmp	0x5366	; 0x5366 <__epilogue_restores__+0x12>

00000a16 <__fixsfsi>:
     a16:	ac e0       	ldi	r26, 0x0C	; 12
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 9e 29 	jmp	0x533c	; 0x533c <__prologue_saves__+0x20>
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	7a 83       	std	Y+2, r23	; 0x02
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	6b 5f       	subi	r22, 0xFB	; 251
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	61 f1       	breq	.+88     	; 0xa96 <__fixsfsi+0x80>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	50 f1       	brcs	.+84     	; 0xa96 <__fixsfsi+0x80>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	21 f4       	brne	.+8      	; 0xa4e <__fixsfsi+0x38>
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	88 23       	and	r24, r24
     a4a:	51 f1       	breq	.+84     	; 0xaa0 <__fixsfsi+0x8a>
     a4c:	2e c0       	rjmp	.+92     	; 0xaaa <__fixsfsi+0x94>
     a4e:	2f 81       	ldd	r18, Y+7	; 0x07
     a50:	38 85       	ldd	r19, Y+8	; 0x08
     a52:	37 fd       	sbrc	r19, 7
     a54:	20 c0       	rjmp	.+64     	; 0xa96 <__fixsfsi+0x80>
     a56:	6e 81       	ldd	r22, Y+6	; 0x06
     a58:	2f 31       	cpi	r18, 0x1F	; 31
     a5a:	31 05       	cpc	r19, r1
     a5c:	1c f0       	brlt	.+6      	; 0xa64 <__fixsfsi+0x4e>
     a5e:	66 23       	and	r22, r22
     a60:	f9 f0       	breq	.+62     	; 0xaa0 <__fixsfsi+0x8a>
     a62:	23 c0       	rjmp	.+70     	; 0xaaa <__fixsfsi+0x94>
     a64:	8e e1       	ldi	r24, 0x1E	; 30
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19
     a6c:	29 85       	ldd	r18, Y+9	; 0x09
     a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a70:	4b 85       	ldd	r20, Y+11	; 0x0b
     a72:	5c 85       	ldd	r21, Y+12	; 0x0c
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fixsfsi+0x68>
     a76:	56 95       	lsr	r21
     a78:	47 95       	ror	r20
     a7a:	37 95       	ror	r19
     a7c:	27 95       	ror	r18
     a7e:	8a 95       	dec	r24
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__fixsfsi+0x60>
     a82:	66 23       	and	r22, r22
     a84:	b1 f0       	breq	.+44     	; 0xab2 <__fixsfsi+0x9c>
     a86:	50 95       	com	r21
     a88:	40 95       	com	r20
     a8a:	30 95       	com	r19
     a8c:	21 95       	neg	r18
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <__fixsfsi+0x9c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__fixsfsi+0x9c>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f ef       	ldi	r20, 0xFF	; 255
     aa6:	5f e7       	ldi	r21, 0x7F	; 127
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__fixsfsi+0x9c>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e8       	ldi	r21, 0x80	; 128
     ab2:	b9 01       	movw	r22, r18
     ab4:	ca 01       	movw	r24, r20
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	e2 e0       	ldi	r30, 0x02	; 2
     aba:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <__epilogue_restores__+0x20>

00000abe <__floatunsisf>:
     abe:	a8 e0       	ldi	r26, 0x08	; 8
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e5 e6       	ldi	r30, 0x65	; 101
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
     ac6:	0c 94 96 29 	jmp	0x532c	; 0x532c <__prologue_saves__+0x10>
     aca:	7b 01       	movw	r14, r22
     acc:	8c 01       	movw	r16, r24
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	19 f4       	brne	.+6      	; 0xade <__floatunsisf+0x20>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	60 c0       	rjmp	.+192    	; 0xb9e <__floatunsisf+0xe0>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	8e e1       	ldi	r24, 0x1E	; 30
     ae4:	c8 2e       	mov	r12, r24
     ae6:	d1 2c       	mov	r13, r1
     ae8:	dc 82       	std	Y+4, r13	; 0x04
     aea:	cb 82       	std	Y+3, r12	; 0x03
     aec:	ed 82       	std	Y+5, r14	; 0x05
     aee:	fe 82       	std	Y+6, r15	; 0x06
     af0:	0f 83       	std	Y+7, r16	; 0x07
     af2:	18 87       	std	Y+8, r17	; 0x08
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     afc:	fc 01       	movw	r30, r24
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f7 ff       	sbrs	r31, 7
     b02:	3b c0       	rjmp	.+118    	; 0xb7a <__floatunsisf+0xbc>
     b04:	22 27       	eor	r18, r18
     b06:	33 27       	eor	r19, r19
     b08:	2e 1b       	sub	r18, r30
     b0a:	3f 0b       	sbc	r19, r31
     b0c:	57 01       	movw	r10, r14
     b0e:	68 01       	movw	r12, r16
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__floatunsisf+0x5e>
     b14:	d6 94       	lsr	r13
     b16:	c7 94       	ror	r12
     b18:	b7 94       	ror	r11
     b1a:	a7 94       	ror	r10
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__floatunsisf+0x56>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0x7c>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	aa 1f       	adc	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	2a 95       	dec	r18
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0x74>
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	a1 09       	sbc	r26, r1
     b42:	b1 09       	sbc	r27, r1
     b44:	8e 21       	and	r24, r14
     b46:	9f 21       	and	r25, r15
     b48:	a0 23       	and	r26, r16
     b4a:	b1 23       	and	r27, r17
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	a1 05       	cpc	r26, r1
     b50:	b1 05       	cpc	r27, r1
     b52:	21 f0       	breq	.+8      	; 0xb5c <__floatunsisf+0x9e>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4a 29       	or	r20, r10
     b5e:	5b 29       	or	r21, r11
     b60:	6c 29       	or	r22, r12
     b62:	7d 29       	or	r23, r13
     b64:	4d 83       	std	Y+5, r20	; 0x05
     b66:	5e 83       	std	Y+6, r21	; 0x06
     b68:	6f 83       	std	Y+7, r22	; 0x07
     b6a:	78 87       	std	Y+8, r23	; 0x08
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	8e 1b       	sub	r24, r30
     b72:	9f 0b       	sbc	r25, r31
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <__floatunsisf+0xe0>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	81 f0       	breq	.+32     	; 0xb9e <__floatunsisf+0xe0>
     b7e:	0e 2e       	mov	r0, r30
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__floatunsisf+0xcc>
     b82:	ee 0c       	add	r14, r14
     b84:	ff 1c       	adc	r15, r15
     b86:	00 1f       	adc	r16, r16
     b88:	11 1f       	adc	r17, r17
     b8a:	0a 94       	dec	r0
     b8c:	d2 f7       	brpl	.-12     	; 0xb82 <__floatunsisf+0xc4>
     b8e:	ed 82       	std	Y+5, r14	; 0x05
     b90:	fe 82       	std	Y+6, r15	; 0x06
     b92:	0f 83       	std	Y+7, r16	; 0x07
     b94:	18 87       	std	Y+8, r17	; 0x08
     b96:	ce 1a       	sub	r12, r30
     b98:	df 0a       	sbc	r13, r31
     b9a:	dc 82       	std	Y+4, r13	; 0x04
     b9c:	cb 82       	std	Y+3, r12	; 0x03
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     ba8:	28 96       	adiw	r28, 0x08	; 8
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__epilogue_restores__+0x10>

00000bb0 <__clzsi2>:
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e8 16       	cp	r14, r24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	f8 06       	cpc	r15, r24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 07       	cpc	r16, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	18 07       	cpc	r17, r24
     bcc:	88 f4       	brcc	.+34     	; 0xbf0 <__clzsi2+0x40>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	e8 16       	cp	r14, r24
     bd2:	f1 04       	cpc	r15, r1
     bd4:	01 05       	cpc	r16, r1
     bd6:	11 05       	cpc	r17, r1
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <__clzsi2+0x36>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <__clzsi2+0x36>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	17 c0       	rjmp	.+46     	; 0xc14 <__clzsi2+0x64>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	12 c0       	rjmp	.+36     	; 0xc14 <__clzsi2+0x64>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	e8 16       	cp	r14, r24
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	f8 06       	cpc	r15, r24
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 07       	cpc	r16, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	18 07       	cpc	r17, r24
     c00:	28 f0       	brcs	.+10     	; 0xc0c <__clzsi2+0x5c>
     c02:	88 e1       	ldi	r24, 0x18	; 24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__clzsi2+0x64>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	20 e2       	ldi	r18, 0x20	; 32
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	28 1b       	sub	r18, r24
     c1e:	39 0b       	sbc	r19, r25
     c20:	4a 0b       	sbc	r20, r26
     c22:	5b 0b       	sbc	r21, r27
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__clzsi2+0x7e>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	8a 95       	dec	r24
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__clzsi2+0x76>
     c32:	f7 01       	movw	r30, r14
     c34:	e4 56       	subi	r30, 0x64	; 100
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	28 1b       	sub	r18, r24
     c3c:	31 09       	sbc	r19, r1
     c3e:	41 09       	sbc	r20, r1
     c40:	51 09       	sbc	r21, r1
     c42:	c9 01       	movw	r24, r18
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <__pack_f>:
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	e4 80       	ldd	r14, Z+4	; 0x04
     c5c:	f5 80       	ldd	r15, Z+5	; 0x05
     c5e:	06 81       	ldd	r16, Z+6	; 0x06
     c60:	17 81       	ldd	r17, Z+7	; 0x07
     c62:	d1 80       	ldd	r13, Z+1	; 0x01
     c64:	80 81       	ld	r24, Z
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	48 f4       	brcc	.+18     	; 0xc7c <__pack_f+0x2e>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e1       	ldi	r26, 0x10	; 16
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 2a       	or	r14, r24
     c74:	f9 2a       	or	r15, r25
     c76:	0a 2b       	or	r16, r26
     c78:	1b 2b       	or	r17, r27
     c7a:	a5 c0       	rjmp	.+330    	; 0xdc6 <__pack_f+0x178>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__pack_f+0x34>
     c80:	9f c0       	rjmp	.+318    	; 0xdc0 <__pack_f+0x172>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	21 f4       	brne	.+8      	; 0xc8e <__pack_f+0x40>
     c86:	ee 24       	eor	r14, r14
     c88:	ff 24       	eor	r15, r15
     c8a:	87 01       	movw	r16, r14
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__pack_f+0x4a>
     c8e:	e1 14       	cp	r14, r1
     c90:	f1 04       	cpc	r15, r1
     c92:	01 05       	cpc	r16, r1
     c94:	11 05       	cpc	r17, r1
     c96:	19 f4       	brne	.+6      	; 0xc9e <__pack_f+0x50>
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	96 c0       	rjmp	.+300    	; 0xdca <__pack_f+0x17c>
     c9e:	62 81       	ldd	r22, Z+2	; 0x02
     ca0:	73 81       	ldd	r23, Z+3	; 0x03
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	62 38       	cpi	r22, 0x82	; 130
     ca6:	79 07       	cpc	r23, r25
     ca8:	0c f0       	brlt	.+2      	; 0xcac <__pack_f+0x5e>
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <__pack_f+0x114>
     cac:	22 e8       	ldi	r18, 0x82	; 130
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	26 1b       	sub	r18, r22
     cb2:	37 0b       	sbc	r19, r23
     cb4:	2a 31       	cpi	r18, 0x1A	; 26
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f0       	brlt	.+10     	; 0xcc4 <__pack_f+0x76>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	2a c0       	rjmp	.+84     	; 0xd18 <__pack_f+0xca>
     cc4:	b8 01       	movw	r22, r16
     cc6:	a7 01       	movw	r20, r14
     cc8:	02 2e       	mov	r0, r18
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__pack_f+0x86>
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	57 95       	ror	r21
     cd2:	47 95       	ror	r20
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__pack_f+0x7e>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x9c>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	2a 95       	dec	r18
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__pack_f+0x94>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	a1 09       	sbc	r26, r1
     cf2:	b1 09       	sbc	r27, r1
     cf4:	8e 21       	and	r24, r14
     cf6:	9f 21       	and	r25, r15
     cf8:	a0 23       	and	r26, r16
     cfa:	b1 23       	and	r27, r17
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	21 f0       	breq	.+8      	; 0xd0c <__pack_f+0xbe>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	9a 01       	movw	r18, r20
     d0e:	ab 01       	movw	r20, r22
     d10:	28 2b       	or	r18, r24
     d12:	39 2b       	or	r19, r25
     d14:	4a 2b       	or	r20, r26
     d16:	5b 2b       	or	r21, r27
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	a0 70       	andi	r26, 0x00	; 0
     d22:	b0 70       	andi	r27, 0x00	; 0
     d24:	80 34       	cpi	r24, 0x40	; 64
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__pack_f+0xee>
     d2e:	27 ff       	sbrs	r18, 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__pack_f+0xf6>
     d32:	20 5c       	subi	r18, 0xC0	; 192
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	4f 4f       	sbci	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0xf6>
     d3c:	21 5c       	subi	r18, 0xC1	; 193
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	4f 4f       	sbci	r20, 0xFF	; 255
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	3a 07       	cpc	r19, r26
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	4a 07       	cpc	r20, r26
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	5a 07       	cpc	r21, r26
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__pack_f+0x10e>
     d58:	e1 e0       	ldi	r30, 0x01	; 1
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	79 01       	movw	r14, r18
     d5e:	8a 01       	movw	r16, r20
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__pack_f+0x162>
     d62:	60 38       	cpi	r22, 0x80	; 128
     d64:	71 05       	cpc	r23, r1
     d66:	64 f5       	brge	.+88     	; 0xdc0 <__pack_f+0x172>
     d68:	fb 01       	movw	r30, r22
     d6a:	e1 58       	subi	r30, 0x81	; 129
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	d8 01       	movw	r26, r16
     d70:	c7 01       	movw	r24, r14
     d72:	8f 77       	andi	r24, 0x7F	; 127
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	a0 70       	andi	r26, 0x00	; 0
     d78:	b0 70       	andi	r27, 0x00	; 0
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	91 05       	cpc	r25, r1
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	39 f4       	brne	.+14     	; 0xd92 <__pack_f+0x144>
     d84:	e7 fe       	sbrs	r14, 7
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <__pack_f+0x154>
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__pack_f+0x14c>
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 0e       	add	r14, r24
     d9c:	f9 1e       	adc	r15, r25
     d9e:	0a 1f       	adc	r16, r26
     da0:	1b 1f       	adc	r17, r27
     da2:	17 ff       	sbrs	r17, 7
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__pack_f+0x162>
     da6:	16 95       	lsr	r17
     da8:	07 95       	ror	r16
     daa:	f7 94       	ror	r15
     dac:	e7 94       	ror	r14
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	16 95       	lsr	r17
     db4:	07 95       	ror	r16
     db6:	f7 94       	ror	r15
     db8:	e7 94       	ror	r14
     dba:	8a 95       	dec	r24
     dbc:	d1 f7       	brne	.-12     	; 0xdb2 <__pack_f+0x164>
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__pack_f+0x17c>
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	87 01       	movw	r16, r14
     dc6:	ef ef       	ldi	r30, 0xFF	; 255
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	6e 2f       	mov	r22, r30
     dcc:	67 95       	ror	r22
     dce:	66 27       	eor	r22, r22
     dd0:	67 95       	ror	r22
     dd2:	90 2f       	mov	r25, r16
     dd4:	9f 77       	andi	r25, 0x7F	; 127
     dd6:	d7 94       	ror	r13
     dd8:	dd 24       	eor	r13, r13
     dda:	d7 94       	ror	r13
     ddc:	8e 2f       	mov	r24, r30
     dde:	86 95       	lsr	r24
     de0:	49 2f       	mov	r20, r25
     de2:	46 2b       	or	r20, r22
     de4:	58 2f       	mov	r21, r24
     de6:	5d 29       	or	r21, r13
     de8:	b7 01       	movw	r22, r14
     dea:	ca 01       	movw	r24, r20
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	08 95       	ret

00000df8 <__unpack_f>:
     df8:	fc 01       	movw	r30, r24
     dfa:	db 01       	movw	r26, r22
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	22 81       	ldd	r18, Z+2	; 0x02
     e02:	62 2f       	mov	r22, r18
     e04:	6f 77       	andi	r22, 0x7F	; 127
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	22 1f       	adc	r18, r18
     e0a:	22 27       	eor	r18, r18
     e0c:	22 1f       	adc	r18, r18
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	89 2f       	mov	r24, r25
     e12:	88 0f       	add	r24, r24
     e14:	82 2b       	or	r24, r18
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	99 1f       	adc	r25, r25
     e1c:	99 27       	eor	r25, r25
     e1e:	99 1f       	adc	r25, r25
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	21 15       	cp	r18, r1
     e28:	31 05       	cpc	r19, r1
     e2a:	a9 f5       	brne	.+106    	; 0xe96 <__unpack_f+0x9e>
     e2c:	41 15       	cp	r20, r1
     e2e:	51 05       	cpc	r21, r1
     e30:	61 05       	cpc	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	11 f4       	brne	.+4      	; 0xe3a <__unpack_f+0x42>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <__unpack_f+0xb0>
     e3a:	82 e8       	ldi	r24, 0x82	; 130
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	9a 01       	movw	r18, r20
     e48:	ab 01       	movw	r20, r22
     e4a:	67 e0       	ldi	r22, 0x07	; 7
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	6a 95       	dec	r22
     e56:	d1 f7       	brne	.-12     	; 0xe4c <__unpack_f+0x54>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8c 93       	st	X, r24
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__unpack_f+0x80>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	12 97       	sbiw	r26, 0x02	; 2
     e78:	20 30       	cpi	r18, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	38 07       	cpc	r19, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	48 07       	cpc	r20, r24
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	58 07       	cpc	r21, r24
     e86:	58 f3       	brcs	.-42     	; 0xe5e <__unpack_f+0x66>
     e88:	14 96       	adiw	r26, 0x04	; 4
     e8a:	2d 93       	st	X+, r18
     e8c:	3d 93       	st	X+, r19
     e8e:	4d 93       	st	X+, r20
     e90:	5c 93       	st	X, r21
     e92:	17 97       	sbiw	r26, 0x07	; 7
     e94:	08 95       	ret
     e96:	2f 3f       	cpi	r18, 0xFF	; 255
     e98:	31 05       	cpc	r19, r1
     e9a:	79 f4       	brne	.+30     	; 0xeba <__unpack_f+0xc2>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	19 f4       	brne	.+6      	; 0xeac <__unpack_f+0xb4>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	8c 93       	st	X, r24
     eaa:	08 95       	ret
     eac:	64 ff       	sbrs	r22, 4
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__unpack_f+0xbe>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <__unpack_f+0xe2>
     eb6:	1c 92       	st	X, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <__unpack_f+0xe2>
     eba:	2f 57       	subi	r18, 0x7F	; 127
     ebc:	30 40       	sbci	r19, 0x00	; 0
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	3c 93       	st	X, r19
     ec2:	2e 93       	st	-X, r18
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	8c 93       	st	X, r24
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	44 0f       	add	r20, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	d1 f7       	brne	.-12     	; 0xecc <__unpack_f+0xd4>
     ed8:	70 64       	ori	r23, 0x40	; 64
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	4d 93       	st	X+, r20
     ede:	5d 93       	st	X+, r21
     ee0:	6d 93       	st	X+, r22
     ee2:	7c 93       	st	X, r23
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	08 95       	ret

00000ee8 <__fpcmp_parts_f>:
     ee8:	1f 93       	push	r17
     eea:	dc 01       	movw	r26, r24
     eec:	fb 01       	movw	r30, r22
     eee:	9c 91       	ld	r25, X
     ef0:	92 30       	cpi	r25, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__fpcmp_parts_f+0xe>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <__fpcmp_parts_f+0x9c>
     ef6:	80 81       	ld	r24, Z
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	08 f4       	brcc	.+2      	; 0xefe <__fpcmp_parts_f+0x16>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__fpcmp_parts_f+0x9c>
     efe:	94 30       	cpi	r25, 0x04	; 4
     f00:	51 f4       	brne	.+20     	; 0xf16 <__fpcmp_parts_f+0x2e>
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	1c 91       	ld	r17, X
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	99 f5       	brne	.+102    	; 0xf70 <__fpcmp_parts_f+0x88>
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	68 2f       	mov	r22, r24
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	61 1b       	sub	r22, r17
     f12:	71 09       	sbc	r23, r1
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <__fpcmp_parts_f+0xac>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f0       	breq	.+8      	; 0xf22 <__fpcmp_parts_f+0x3a>
     f1a:	92 30       	cpi	r25, 0x02	; 2
     f1c:	31 f4       	brne	.+12     	; 0xf2a <__fpcmp_parts_f+0x42>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	b9 f1       	breq	.+110    	; 0xf90 <__fpcmp_parts_f+0xa8>
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	89 f1       	breq	.+98     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f28:	2d c0       	rjmp	.+90     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	1c 91       	ld	r17, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	f1 f0       	breq	.+60     	; 0xf70 <__fpcmp_parts_f+0x88>
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	18 17       	cp	r17, r24
     f38:	d9 f4       	brne	.+54     	; 0xf70 <__fpcmp_parts_f+0x88>
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	94 f0       	brlt	.+36     	; 0xf70 <__fpcmp_parts_f+0x88>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	bc f0       	brlt	.+46     	; 0xf80 <__fpcmp_parts_f+0x98>
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8d 91       	ld	r24, X+
     f56:	9d 91       	ld	r25, X+
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	24 81       	ldd	r18, Z+4	; 0x04
     f60:	35 81       	ldd	r19, Z+5	; 0x05
     f62:	46 81       	ldd	r20, Z+6	; 0x06
     f64:	57 81       	ldd	r21, Z+7	; 0x07
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	4a 07       	cpc	r20, r26
     f6c:	5b 07       	cpc	r21, r27
     f6e:	18 f4       	brcc	.+6      	; 0xf76 <__fpcmp_parts_f+0x8e>
     f70:	11 23       	and	r17, r17
     f72:	41 f0       	breq	.+16     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	a4 07       	cpc	r26, r20
     f7c:	b5 07       	cpc	r27, r21
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <__fpcmp_parts_f+0xa8>
     f80:	11 23       	and	r17, r17
     f82:	19 f0       	breq	.+6      	; 0xf8a <__fpcmp_parts_f+0xa2>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <__fpcmp_parts_f+0xac>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__fpcmp_parts_f+0xac>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	cb 01       	movw	r24, r22
     f96:	1f 91       	pop	r17
     f98:	08 95       	ret

00000f9a <CLCD_SendEnablePulse>:
#include "CLCD_Config.h"
#include "CLCD.h"
#include "util/delay.h"

static void CLCD_SendEnablePulse(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	e0 97       	sbiw	r28, 0x30	; 48
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePin(CLCD_EN_PORT,CLCD_EN_PIN,DIO_LOW_PIN);
     fae:	84 e0       	ldi	r24, 0x04	; 4
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a0 e8       	ldi	r26, 0x80	; 128
     fbe:	bf e3       	ldi	r27, 0x3F	; 63
     fc0:	8d a7       	std	Y+45, r24	; 0x2d
     fc2:	9e a7       	std	Y+46, r25	; 0x2e
     fc4:	af a7       	std	Y+47, r26	; 0x2f
     fc6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fc8:	6d a5       	ldd	r22, Y+45	; 0x2d
     fca:	7e a5       	ldd	r23, Y+46	; 0x2e
     fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
     fce:	98 a9       	ldd	r25, Y+48	; 0x30
     fd0:	2b ea       	ldi	r18, 0xAB	; 171
     fd2:	3a ea       	ldi	r19, 0xAA	; 170
     fd4:	4a e2       	ldi	r20, 0x2A	; 42
     fd6:	50 e4       	ldi	r21, 0x40	; 64
     fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	89 a7       	std	Y+41, r24	; 0x29
     fe2:	9a a7       	std	Y+42, r25	; 0x2a
     fe4:	ab a7       	std	Y+43, r26	; 0x2b
     fe6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     fe8:	69 a5       	ldd	r22, Y+41	; 0x29
     fea:	7a a5       	ldd	r23, Y+42	; 0x2a
     fec:	8b a5       	ldd	r24, Y+43	; 0x2b
     fee:	9c a5       	ldd	r25, Y+44	; 0x2c
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e8       	ldi	r20, 0x80	; 128
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	1c f4       	brge	.+6      	; 0x1006 <CLCD_SendEnablePulse+0x6c>
		__ticks = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	88 a7       	std	Y+40, r24	; 0x28
    1004:	91 c0       	rjmp	.+290    	; 0x1128 <CLCD_SendEnablePulse+0x18e>
	else if (__tmp > 255)
    1006:	69 a5       	ldd	r22, Y+41	; 0x29
    1008:	7a a5       	ldd	r23, Y+42	; 0x2a
    100a:	8b a5       	ldd	r24, Y+43	; 0x2b
    100c:	9c a5       	ldd	r25, Y+44	; 0x2c
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	53 e4       	ldi	r21, 0x43	; 67
    1016:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	0c f0       	brlt	.+2      	; 0x1020 <CLCD_SendEnablePulse+0x86>
    101e:	7b c0       	rjmp	.+246    	; 0x1116 <CLCD_SendEnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1020:	6d a5       	ldd	r22, Y+45	; 0x2d
    1022:	7e a5       	ldd	r23, Y+46	; 0x2e
    1024:	8f a5       	ldd	r24, Y+47	; 0x2f
    1026:	98 a9       	ldd	r25, Y+48	; 0x30
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	4a e7       	ldi	r20, 0x7A	; 122
    102e:	54 e4       	ldi	r21, 0x44	; 68
    1030:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	8c a3       	std	Y+36, r24	; 0x24
    103a:	9d a3       	std	Y+37, r25	; 0x25
    103c:	ae a3       	std	Y+38, r26	; 0x26
    103e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	6c a1       	ldd	r22, Y+36	; 0x24
    1042:	7d a1       	ldd	r23, Y+37	; 0x25
    1044:	8e a1       	ldd	r24, Y+38	; 0x26
    1046:	9f a1       	ldd	r25, Y+39	; 0x27
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a ef       	ldi	r20, 0xFA	; 250
    104e:	54 e4       	ldi	r21, 0x44	; 68
    1050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	88 a3       	std	Y+32, r24	; 0x20
    105a:	99 a3       	std	Y+33, r25	; 0x21
    105c:	aa a3       	std	Y+34, r26	; 0x22
    105e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1060:	68 a1       	ldd	r22, Y+32	; 0x20
    1062:	79 a1       	ldd	r23, Y+33	; 0x21
    1064:	8a a1       	ldd	r24, Y+34	; 0x22
    1066:	9b a1       	ldd	r25, Y+35	; 0x23
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <CLCD_SendEnablePulse+0xe8>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9f 8f       	std	Y+31, r25	; 0x1f
    107e:	8e 8f       	std	Y+30, r24	; 0x1e
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <CLCD_SendEnablePulse+0x166>
	else if (__tmp > 65535)
    1082:	68 a1       	ldd	r22, Y+32	; 0x20
    1084:	79 a1       	ldd	r23, Y+33	; 0x21
    1086:	8a a1       	ldd	r24, Y+34	; 0x22
    1088:	9b a1       	ldd	r25, Y+35	; 0x23
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	4c f5       	brge	.+82     	; 0x10ec <CLCD_SendEnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109a:	6c a1       	ldd	r22, Y+36	; 0x24
    109c:	7d a1       	ldd	r23, Y+37	; 0x25
    109e:	8e a1       	ldd	r24, Y+38	; 0x26
    10a0:	9f a1       	ldd	r25, Y+39	; 0x27
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9f 8f       	std	Y+31, r25	; 0x1f
    10c0:	8e 8f       	std	Y+30, r24	; 0x1e
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <CLCD_SendEnablePulse+0x148>
    10c4:	88 ec       	ldi	r24, 0xC8	; 200
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9d 8f       	std	Y+29, r25	; 0x1d
    10ca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <CLCD_SendEnablePulse+0x136>
    10d4:	9d 8f       	std	Y+29, r25	; 0x1d
    10d6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9f 8f       	std	Y+31, r25	; 0x1f
    10e0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <CLCD_SendEnablePulse+0x12a>
    10ea:	24 c0       	rjmp	.+72     	; 0x1134 <CLCD_SendEnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ec:	68 a1       	ldd	r22, Y+32	; 0x20
    10ee:	79 a1       	ldd	r23, Y+33	; 0x21
    10f0:	8a a1       	ldd	r24, Y+34	; 0x22
    10f2:	9b a1       	ldd	r25, Y+35	; 0x23
    10f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9f 8f       	std	Y+31, r25	; 0x1f
    10fe:	8e 8f       	std	Y+30, r24	; 0x1e
    1100:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1102:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1104:	9b 8f       	std	Y+27, r25	; 0x1b
    1106:	8a 8f       	std	Y+26, r24	; 0x1a
    1108:	8a 8d       	ldd	r24, Y+26	; 0x1a
    110a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <CLCD_SendEnablePulse+0x172>
    1110:	9b 8f       	std	Y+27, r25	; 0x1b
    1112:	8a 8f       	std	Y+26, r24	; 0x1a
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <CLCD_SendEnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1116:	69 a5       	ldd	r22, Y+41	; 0x29
    1118:	7a a5       	ldd	r23, Y+42	; 0x2a
    111a:	8b a5       	ldd	r24, Y+43	; 0x2b
    111c:	9c a5       	ldd	r25, Y+44	; 0x2c
    111e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	88 a7       	std	Y+40, r24	; 0x28
    1128:	88 a5       	ldd	r24, Y+40	; 0x28
    112a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    112c:	89 8d       	ldd	r24, Y+25	; 0x19
    112e:	8a 95       	dec	r24
    1130:	f1 f7       	brne	.-4      	; 0x112e <CLCD_SendEnablePulse+0x194>
    1132:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_WritePin(CLCD_EN_PORT,CLCD_EN_PIN,DIO_HIGH_PIN);
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	62 e0       	ldi	r22, 0x02	; 2
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a0 e8       	ldi	r26, 0x80	; 128
    1144:	bf e3       	ldi	r27, 0x3F	; 63
    1146:	8d 8b       	std	Y+21, r24	; 0x15
    1148:	9e 8b       	std	Y+22, r25	; 0x16
    114a:	af 8b       	std	Y+23, r26	; 0x17
    114c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	2b ea       	ldi	r18, 0xAB	; 171
    1158:	3a ea       	ldi	r19, 0xAA	; 170
    115a:	4a e2       	ldi	r20, 0x2A	; 42
    115c:	50 e4       	ldi	r21, 0x40	; 64
    115e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	89 8b       	std	Y+17, r24	; 0x11
    1168:	9a 8b       	std	Y+18, r25	; 0x12
    116a:	ab 8b       	std	Y+19, r26	; 0x13
    116c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    116e:	69 89       	ldd	r22, Y+17	; 0x11
    1170:	7a 89       	ldd	r23, Y+18	; 0x12
    1172:	8b 89       	ldd	r24, Y+19	; 0x13
    1174:	9c 89       	ldd	r25, Y+20	; 0x14
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1182:	88 23       	and	r24, r24
    1184:	1c f4       	brge	.+6      	; 0x118c <CLCD_SendEnablePulse+0x1f2>
		__ticks = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	88 8b       	std	Y+16, r24	; 0x10
    118a:	91 c0       	rjmp	.+290    	; 0x12ae <CLCD_SendEnablePulse+0x314>
	else if (__tmp > 255)
    118c:	69 89       	ldd	r22, Y+17	; 0x11
    118e:	7a 89       	ldd	r23, Y+18	; 0x12
    1190:	8b 89       	ldd	r24, Y+19	; 0x13
    1192:	9c 89       	ldd	r25, Y+20	; 0x14
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4f e7       	ldi	r20, 0x7F	; 127
    119a:	53 e4       	ldi	r21, 0x43	; 67
    119c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    11a0:	18 16       	cp	r1, r24
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <CLCD_SendEnablePulse+0x20c>
    11a4:	7b c0       	rjmp	.+246    	; 0x129c <CLCD_SendEnablePulse+0x302>
	{
		_delay_ms(__us / 1000.0);
    11a6:	6d 89       	ldd	r22, Y+21	; 0x15
    11a8:	7e 89       	ldd	r23, Y+22	; 0x16
    11aa:	8f 89       	ldd	r24, Y+23	; 0x17
    11ac:	98 8d       	ldd	r25, Y+24	; 0x18
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a e7       	ldi	r20, 0x7A	; 122
    11b4:	54 e4       	ldi	r21, 0x44	; 68
    11b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	8c 87       	std	Y+12, r24	; 0x0c
    11c0:	9d 87       	std	Y+13, r25	; 0x0d
    11c2:	ae 87       	std	Y+14, r26	; 0x0e
    11c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    11c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    11ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    11cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	4a ef       	ldi	r20, 0xFA	; 250
    11d4:	54 e4       	ldi	r21, 0x44	; 68
    11d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	88 87       	std	Y+8, r24	; 0x08
    11e0:	99 87       	std	Y+9, r25	; 0x09
    11e2:	aa 87       	std	Y+10, r26	; 0x0a
    11e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    11e6:	68 85       	ldd	r22, Y+8	; 0x08
    11e8:	79 85       	ldd	r23, Y+9	; 0x09
    11ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e8       	ldi	r20, 0x80	; 128
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    11fa:	88 23       	and	r24, r24
    11fc:	2c f4       	brge	.+10     	; 0x1208 <CLCD_SendEnablePulse+0x26e>
		__ticks = 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9f 83       	std	Y+7, r25	; 0x07
    1204:	8e 83       	std	Y+6, r24	; 0x06
    1206:	3f c0       	rjmp	.+126    	; 0x1286 <CLCD_SendEnablePulse+0x2ec>
	else if (__tmp > 65535)
    1208:	68 85       	ldd	r22, Y+8	; 0x08
    120a:	79 85       	ldd	r23, Y+9	; 0x09
    120c:	8a 85       	ldd	r24, Y+10	; 0x0a
    120e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	4c f5       	brge	.+82     	; 0x1272 <CLCD_SendEnablePulse+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1220:	6c 85       	ldd	r22, Y+12	; 0x0c
    1222:	7d 85       	ldd	r23, Y+13	; 0x0d
    1224:	8e 85       	ldd	r24, Y+14	; 0x0e
    1226:	9f 85       	ldd	r25, Y+15	; 0x0f
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e2       	ldi	r20, 0x20	; 32
    122e:	51 e4       	ldi	r21, 0x41	; 65
    1230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9f 83       	std	Y+7, r25	; 0x07
    1246:	8e 83       	std	Y+6, r24	; 0x06
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <CLCD_SendEnablePulse+0x2ce>
    124a:	88 ec       	ldi	r24, 0xC8	; 200
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9d 83       	std	Y+5, r25	; 0x05
    1250:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <CLCD_SendEnablePulse+0x2bc>
    125a:	9d 83       	std	Y+5, r25	; 0x05
    125c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	9f 81       	ldd	r25, Y+7	; 0x07
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9f 83       	std	Y+7, r25	; 0x07
    1266:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	69 f7       	brne	.-38     	; 0x124a <CLCD_SendEnablePulse+0x2b0>
    1270:	24 c0       	rjmp	.+72     	; 0x12ba <CLCD_SendEnablePulse+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1272:	68 85       	ldd	r22, Y+8	; 0x08
    1274:	79 85       	ldd	r23, Y+9	; 0x09
    1276:	8a 85       	ldd	r24, Y+10	; 0x0a
    1278:	9b 85       	ldd	r25, Y+11	; 0x0b
    127a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9f 83       	std	Y+7, r25	; 0x07
    1284:	8e 83       	std	Y+6, r24	; 0x06
    1286:	8e 81       	ldd	r24, Y+6	; 0x06
    1288:	9f 81       	ldd	r25, Y+7	; 0x07
    128a:	9b 83       	std	Y+3, r25	; 0x03
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <CLCD_SendEnablePulse+0x2f8>
    1296:	9b 83       	std	Y+3, r25	; 0x03
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <CLCD_SendEnablePulse+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    129c:	69 89       	ldd	r22, Y+17	; 0x11
    129e:	7a 89       	ldd	r23, Y+18	; 0x12
    12a0:	8b 89       	ldd	r24, Y+19	; 0x13
    12a2:	9c 89       	ldd	r25, Y+20	; 0x14
    12a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	88 8b       	std	Y+16, r24	; 0x10
    12ae:	88 89       	ldd	r24, Y+16	; 0x10
    12b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	8a 95       	dec	r24
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <CLCD_SendEnablePulse+0x31a>
    12b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_WritePin(CLCD_EN_PORT,CLCD_EN_PIN,DIO_LOW_PIN);
    12ba:	84 e0       	ldi	r24, 0x04	; 4
    12bc:	62 e0       	ldi	r22, 0x02	; 2
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
}
    12c4:	e0 96       	adiw	r28, 0x30	; 48
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <CLCD_SendLSB>:

static void CLCD_SendLSB(uint8_t DataModeConnection , uint8_t Data)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <CLCD_SendLSB+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <CLCD_SendLSB+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	6a 83       	std	Y+2, r22	; 0x02
	switch(DataModeConnection)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3c 83       	std	Y+4, r19	; 0x04
    12ee:	2b 83       	std	Y+3, r18	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	31 f0       	breq	.+12     	; 0x1306 <CLCD_SendLSB+0x30>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	b9 f1       	breq	.+110    	; 0x1372 <CLCD_SendLSB+0x9c>
    1304:	6b c0       	rjmp	.+214    	; 0x13dc <CLCD_SendLSB+0x106>
	{
		case UPPER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN7,GET_BIT(Data,3));
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 70       	andi	r24, 0x08	; 8
    130e:	90 70       	andi	r25, 0x00	; 0
    1310:	95 95       	asr	r25
    1312:	87 95       	ror	r24
    1314:	95 95       	asr	r25
    1316:	87 95       	ror	r24
    1318:	95 95       	asr	r25
    131a:	87 95       	ror	r24
    131c:	98 2f       	mov	r25, r24
    131e:	84 e0       	ldi	r24, 0x04	; 4
    1320:	67 e0       	ldi	r22, 0x07	; 7
    1322:	49 2f       	mov	r20, r25
    1324:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN6,GET_BIT(Data,2));
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	84 70       	andi	r24, 0x04	; 4
    1330:	90 70       	andi	r25, 0x00	; 0
    1332:	95 95       	asr	r25
    1334:	87 95       	ror	r24
    1336:	95 95       	asr	r25
    1338:	87 95       	ror	r24
    133a:	98 2f       	mov	r25, r24
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	66 e0       	ldi	r22, 0x06	; 6
    1340:	49 2f       	mov	r20, r25
    1342:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN5,GET_BIT(Data,1));
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	82 70       	andi	r24, 0x02	; 2
    134e:	90 70       	andi	r25, 0x00	; 0
    1350:	95 95       	asr	r25
    1352:	87 95       	ror	r24
    1354:	98 2f       	mov	r25, r24
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	65 e0       	ldi	r22, 0x05	; 5
    135a:	49 2f       	mov	r20, r25
    135c:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN4,GET_BIT(Data,0));
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	98 2f       	mov	r25, r24
    1364:	91 70       	andi	r25, 0x01	; 1
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	64 e0       	ldi	r22, 0x04	; 4
    136a:	49 2f       	mov	r20, r25
    136c:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
    1370:	35 c0       	rjmp	.+106    	; 0x13dc <CLCD_SendLSB+0x106>
							break;
		case LOWER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN3,GET_BIT(Data,3));
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	88 70       	andi	r24, 0x08	; 8
    137a:	90 70       	andi	r25, 0x00	; 0
    137c:	95 95       	asr	r25
    137e:	87 95       	ror	r24
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	95 95       	asr	r25
    1386:	87 95       	ror	r24
    1388:	98 2f       	mov	r25, r24
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	63 e0       	ldi	r22, 0x03	; 3
    138e:	49 2f       	mov	r20, r25
    1390:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN2,GET_BIT(Data,2));
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	84 70       	andi	r24, 0x04	; 4
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	95 95       	asr	r25
    13a0:	87 95       	ror	r24
    13a2:	95 95       	asr	r25
    13a4:	87 95       	ror	r24
    13a6:	98 2f       	mov	r25, r24
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	62 e0       	ldi	r22, 0x02	; 2
    13ac:	49 2f       	mov	r20, r25
    13ae:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN1,GET_BIT(Data,1));
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	82 70       	andi	r24, 0x02	; 2
    13ba:	90 70       	andi	r25, 0x00	; 0
    13bc:	95 95       	asr	r25
    13be:	87 95       	ror	r24
    13c0:	98 2f       	mov	r25, r24
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	49 2f       	mov	r20, r25
    13c8:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN0,GET_BIT(Data,0));
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	98 2f       	mov	r25, r24
    13d0:	91 70       	andi	r25, 0x01	; 1
    13d2:	84 e0       	ldi	r24, 0x04	; 4
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	49 2f       	mov	r20, r25
    13d8:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							break;
		default: break;
	}
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <CLCD_SendMSB>:

static void CLCD_SendMSB(uint8_t DataModeConnection, uint8_t Data)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <CLCD_SendMSB+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <CLCD_SendMSB+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	6a 83       	std	Y+2, r22	; 0x02
	switch(DataModeConnection)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3c 83       	std	Y+4, r19	; 0x04
    1402:	2b 83       	std	Y+3, r18	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	39 f0       	breq	.+14     	; 0x141c <CLCD_SendMSB+0x32>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <CLCD_SendMSB+0x30>
    1418:	47 c0       	rjmp	.+142    	; 0x14a8 <CLCD_SendMSB+0xbe>
    141a:	8b c0       	rjmp	.+278    	; 0x1532 <CLCD_SendMSB+0x148>
	{
		case UPPER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN7,GET_BIT(Data,7));
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	98 2f       	mov	r25, r24
    1420:	99 1f       	adc	r25, r25
    1422:	99 27       	eor	r25, r25
    1424:	99 1f       	adc	r25, r25
    1426:	84 e0       	ldi	r24, 0x04	; 4
    1428:	67 e0       	ldi	r22, 0x07	; 7
    142a:	49 2f       	mov	r20, r25
    142c:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN6,GET_BIT(Data,6));
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	80 74       	andi	r24, 0x40	; 64
    1438:	90 70       	andi	r25, 0x00	; 0
    143a:	08 2e       	mov	r0, r24
    143c:	89 2f       	mov	r24, r25
    143e:	00 0c       	add	r0, r0
    1440:	88 1f       	adc	r24, r24
    1442:	99 0b       	sbc	r25, r25
    1444:	00 0c       	add	r0, r0
    1446:	88 1f       	adc	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	98 2f       	mov	r25, r24
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	66 e0       	ldi	r22, 0x06	; 6
    1450:	49 2f       	mov	r20, r25
    1452:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN5,GET_BIT(Data,5));
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	80 72       	andi	r24, 0x20	; 32
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	95 95       	asr	r25
    1462:	87 95       	ror	r24
    1464:	95 95       	asr	r25
    1466:	87 95       	ror	r24
    1468:	95 95       	asr	r25
    146a:	87 95       	ror	r24
    146c:	95 95       	asr	r25
    146e:	87 95       	ror	r24
    1470:	95 95       	asr	r25
    1472:	87 95       	ror	r24
    1474:	98 2f       	mov	r25, r24
    1476:	84 e0       	ldi	r24, 0x04	; 4
    1478:	65 e0       	ldi	r22, 0x05	; 5
    147a:	49 2f       	mov	r20, r25
    147c:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN4,GET_BIT(Data,4));
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	80 71       	andi	r24, 0x10	; 16
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	95 95       	asr	r25
    148c:	87 95       	ror	r24
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	95 95       	asr	r25
    1494:	87 95       	ror	r24
    1496:	95 95       	asr	r25
    1498:	87 95       	ror	r24
    149a:	98 2f       	mov	r25, r24
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	49 2f       	mov	r20, r25
    14a2:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
    14a6:	45 c0       	rjmp	.+138    	; 0x1532 <CLCD_SendMSB+0x148>
							break;
		case LOWER_DATA_CONNECTION:
							DIO_WritePin(CLCD_PORT,PIN3,GET_BIT(Data,7));
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	98 2f       	mov	r25, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	99 27       	eor	r25, r25
    14b0:	99 1f       	adc	r25, r25
    14b2:	84 e0       	ldi	r24, 0x04	; 4
    14b4:	63 e0       	ldi	r22, 0x03	; 3
    14b6:	49 2f       	mov	r20, r25
    14b8:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN2,GET_BIT(Data,6));
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	80 74       	andi	r24, 0x40	; 64
    14c4:	90 70       	andi	r25, 0x00	; 0
    14c6:	08 2e       	mov	r0, r24
    14c8:	89 2f       	mov	r24, r25
    14ca:	00 0c       	add	r0, r0
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 0b       	sbc	r25, r25
    14d0:	00 0c       	add	r0, r0
    14d2:	88 1f       	adc	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	98 2f       	mov	r25, r24
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	62 e0       	ldi	r22, 0x02	; 2
    14dc:	49 2f       	mov	r20, r25
    14de:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN1,GET_BIT(Data,5));
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	80 72       	andi	r24, 0x20	; 32
    14ea:	90 70       	andi	r25, 0x00	; 0
    14ec:	95 95       	asr	r25
    14ee:	87 95       	ror	r24
    14f0:	95 95       	asr	r25
    14f2:	87 95       	ror	r24
    14f4:	95 95       	asr	r25
    14f6:	87 95       	ror	r24
    14f8:	95 95       	asr	r25
    14fa:	87 95       	ror	r24
    14fc:	95 95       	asr	r25
    14fe:	87 95       	ror	r24
    1500:	98 2f       	mov	r25, r24
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	49 2f       	mov	r20, r25
    1508:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							DIO_WritePin(CLCD_PORT,PIN0,GET_BIT(Data,4));
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	80 71       	andi	r24, 0x10	; 16
    1514:	90 70       	andi	r25, 0x00	; 0
    1516:	95 95       	asr	r25
    1518:	87 95       	ror	r24
    151a:	95 95       	asr	r25
    151c:	87 95       	ror	r24
    151e:	95 95       	asr	r25
    1520:	87 95       	ror	r24
    1522:	95 95       	asr	r25
    1524:	87 95       	ror	r24
    1526:	98 2f       	mov	r25, r24
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	49 2f       	mov	r20, r25
    152e:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
							break;
		default: break;
	}
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <InitiateLCDControlPins>:

static void InitiateLCDControlPins(void)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(CLCD_RS_PORT,CLCD_RS_PIN,DIO_OUTPUT_PIN);
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_RW_PORT,CLCD_RW_PIN,DIO_OUTPUT_PIN);
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_EN_PORT,CLCD_EN_PIN,DIO_OUTPUT_PIN);
    155c:	84 e0       	ldi	r24, 0x04	; 4
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <InitiateLCDDataPins>:

static void InitiateLCDDataPins(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	#if (CLCD_DATA_MODE == CLCD_8BitMode)
		DIO_SetPortDirection(CLCD_PORT,DIO_OUTPUT_PORT);
	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		DIO_SetPinDirection(CLCD_PORT,PIN7,DIO_OUTPUT_PIN);
    1574:	84 e0       	ldi	r24, 0x04	; 4
    1576:	67 e0       	ldi	r22, 0x07	; 7
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN6,DIO_OUTPUT_PIN);
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	66 e0       	ldi	r22, 0x06	; 6
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN5,DIO_OUTPUT_PIN);
    1588:	84 e0       	ldi	r24, 0x04	; 4
    158a:	65 e0       	ldi	r22, 0x05	; 5
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN4,DIO_OUTPUT_PIN);
    1592:	84 e0       	ldi	r24, 0x04	; 4
    1594:	64 e0       	ldi	r22, 0x04	; 4
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(CLCD_PORT,PIN3,DIO_OUTPUT_PIN);
		DIO_SetPinDirection(CLCD_PORT,PIN2,DIO_OUTPUT_PIN);
		DIO_SetPinDirection(CLCD_PORT,PIN1,DIO_OUTPUT_PIN);
		DIO_SetPinDirection(CLCD_PORT,PIN0,DIO_OUTPUT_PIN);
	#endif /*CLCD_DATA_MODE*/
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <CLCD_SendInstruction>:

static void CLCD_SendInstruction(uint8_t Instruction)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();

	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		/*set the RS and RW to zero*/
		DIO_WritePin(CLCD_RS_PORT,CLCD_RS_PIN,DIO_LOW_PIN);
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		DIO_WritePin(CLCD_RW_PORT,CLCD_RW_PIN,DIO_LOW_PIN);
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		/*Send the instruction*/
		/*Send the 4 MSB*/
		CLCD_SendMSB(UPPER_DATA_CONNECTION , Instruction);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	69 81       	ldd	r22, Y+1	; 0x01
    15c6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CLCD_SendMSB>

		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();
    15ca:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_SendEnablePulse>

		/*Send the 4 LSB*/
		CLCD_SendLSB(UPPER_DATA_CONNECTION , Instruction);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	69 81       	ldd	r22, Y+1	; 0x01
    15d2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_SendLSB>

		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();
    15d6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_SendEnablePulse>
		CLCD_SendLSB(LOWER_DATA_CONNECTION , Instruction);
		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();

	#endif/*CLCD_DATAMODE*/
}
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <CLCD_SendData>:
static void CLCD_SendData(uint8_t Data)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
		 /*set enable pulse __||||__  */
		 CLCD_SendEnablePulse();

	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		 /*set the RS to one and RW to zero*/
		 DIO_WritePin(CLCD_RS_PORT,CLCD_RS_PIN,DIO_HIGH_PIN);
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		 DIO_WritePin(CLCD_RW_PORT,CLCD_RW_PIN,DIO_LOW_PIN);
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>

	    /*Send the data*/

	     /*Send the 4 MSB*/
	     CLCD_SendMSB(UPPER_DATA_CONNECTION,Data);
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	69 81       	ldd	r22, Y+1	; 0x01
    1606:	0e 94 f5 09 	call	0x13ea	; 0x13ea <CLCD_SendMSB>

	     /*set enable pulse __||||__  */
	     CLCD_SendEnablePulse();
    160a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_SendEnablePulse>

	     /*Send the 4 LSB*/
	     CLCD_SendLSB(UPPER_DATA_CONNECTION,Data);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CLCD_SendLSB>

	     /*set enable pulse __||||__  */
	     CLCD_SendEnablePulse();
    1616:	0e 94 cd 07 	call	0xf9a	; 0xf9a <CLCD_SendEnablePulse>
		CLCD_SendLSB(LOWER_DATA_CONNECTION,Data);

		/*set enable pulse __||||__  */
		CLCD_SendEnablePulse();
	#endif/*_dataBitMode*/
}
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <CLCD_Setup>:
void CLCD_Setup(void)
{
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	c4 56       	subi	r28, 0x64	; 100
    1630:	d0 40       	sbci	r29, 0x00	; 0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
			#error "Error in CLCD_INCREMENT_DECREMENT"
		#endif
	#endif /*CLCD_NUMBER_OF_LINES*/

	/*Set directions of pins*/
	InitiateLCDControlPins();
    163c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <InitiateLCDControlPins>

		/*send entry mode set function*/
		/*CLCD_SendInstruction(CLCD_ENTRY_MODE_SET);*/

	#elif (CLCD_DATA_MODE == CLCD_4BitMode_Upper)
		InitiateLCDDataPins();
    1640:	0e 94 b6 0a 	call	0x156c	; 0x156c <InitiateLCDDataPins>
    1644:	fe 01       	movw	r30, r28
    1646:	ef 59       	subi	r30, 0x9F	; 159
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e2       	ldi	r26, 0x20	; 32
    1650:	b2 e4       	ldi	r27, 0x42	; 66
    1652:	80 83       	st	Z, r24
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	a2 83       	std	Z+2, r26	; 0x02
    1658:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	8e 01       	movw	r16, r28
    165c:	03 5a       	subi	r16, 0xA3	; 163
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	fe 01       	movw	r30, r28
    1662:	ef 59       	subi	r30, 0x9F	; 159
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a ef       	ldi	r20, 0xFA	; 250
    1674:	54 e4       	ldi	r21, 0x44	; 68
    1676:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	f8 01       	movw	r30, r16
    1680:	80 83       	st	Z, r24
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	a2 83       	std	Z+2, r26	; 0x02
    1686:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1688:	fe 01       	movw	r30, r28
    168a:	e3 5a       	subi	r30, 0xA3	; 163
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	44 f4       	brge	.+16     	; 0x16b6 <CLCD_Setup+0x94>
		__ticks = 1;
    16a6:	fe 01       	movw	r30, r28
    16a8:	e5 5a       	subi	r30, 0xA5	; 165
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	64 c0       	rjmp	.+200    	; 0x177e <CLCD_Setup+0x15c>
	else if (__tmp > 65535)
    16b6:	fe 01       	movw	r30, r28
    16b8:	e3 5a       	subi	r30, 0xA3	; 163
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <CLCD_Setup+0xb4>
    16d4:	43 c0       	rjmp	.+134    	; 0x175c <CLCD_Setup+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	fe 01       	movw	r30, r28
    16d8:	ef 59       	subi	r30, 0x9F	; 159
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8e 01       	movw	r16, r28
    16f6:	05 5a       	subi	r16, 0xA5	; 165
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	f8 01       	movw	r30, r16
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
    170c:	1f c0       	rjmp	.+62     	; 0x174c <CLCD_Setup+0x12a>
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5a       	subi	r30, 0xA7	; 167
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	88 ec       	ldi	r24, 0xC8	; 200
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171c:	fe 01       	movw	r30, r28
    171e:	e7 5a       	subi	r30, 0xA7	; 167
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <CLCD_Setup+0x104>
    172a:	fe 01       	movw	r30, r28
    172c:	e7 5a       	subi	r30, 0xA7	; 167
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	de 01       	movw	r26, r28
    1736:	a5 5a       	subi	r26, 0xA5	; 165
    1738:	bf 4f       	sbci	r27, 0xFF	; 255
    173a:	fe 01       	movw	r30, r28
    173c:	e5 5a       	subi	r30, 0xA5	; 165
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	11 96       	adiw	r26, 0x01	; 1
    1748:	9c 93       	st	X, r25
    174a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	fe 01       	movw	r30, r28
    174e:	e5 5a       	subi	r30, 0xA5	; 165
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	d1 f6       	brne	.-76     	; 0x170e <CLCD_Setup+0xec>
    175a:	27 c0       	rjmp	.+78     	; 0x17aa <CLCD_Setup+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175c:	8e 01       	movw	r16, r28
    175e:	05 5a       	subi	r16, 0xA5	; 165
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	fe 01       	movw	r30, r28
    1764:	e3 5a       	subi	r30, 0xA3	; 163
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	f8 01       	movw	r30, r16
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
    177e:	de 01       	movw	r26, r28
    1780:	a9 5a       	subi	r26, 0xA9	; 169
    1782:	bf 4f       	sbci	r27, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	e5 5a       	subi	r30, 0xA5	; 165
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	8d 93       	st	X+, r24
    1790:	9c 93       	st	X, r25
    1792:	fe 01       	movw	r30, r28
    1794:	e9 5a       	subi	r30, 0xA9	; 169
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <CLCD_Setup+0x17a>
    17a0:	fe 01       	movw	r30, r28
    17a2:	e9 5a       	subi	r30, 0xA9	; 169
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
		/*Wait for more than 30mS after VDD rises to 4.5Volt*/
		_delay_ms(40);
		/*send function set and wait for excution time*/
		/*Sets to 4-bit operation.In this case, operation is handled as 8 bits by initialization,and only this instruction
		  completes with one write.*/
		CLCD_SendInstruction(0x02);
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    17b0:	fe 01       	movw	r30, r28
    17b2:	ed 5a       	subi	r30, 0xAD	; 173
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a8 e4       	ldi	r26, 0x48	; 72
    17bc:	b2 e4       	ldi	r27, 0x42	; 66
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17c6:	8e 01       	movw	r16, r28
    17c8:	01 5b       	subi	r16, 0xB1	; 177
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	ed 5a       	subi	r30, 0xAD	; 173
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	2b ea       	ldi	r18, 0xAB	; 171
    17dc:	3a ea       	ldi	r19, 0xAA	; 170
    17de:	4a e2       	ldi	r20, 0x2A	; 42
    17e0:	50 e4       	ldi	r21, 0x40	; 64
    17e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	e1 5b       	subi	r30, 0xB1	; 177
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	34 f4       	brge	.+12     	; 0x181e <CLCD_Setup+0x1fc>
		__ticks = 1;
    1812:	fe 01       	movw	r30, r28
    1814:	e2 5b       	subi	r30, 0xB2	; 178
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	e0 c0       	rjmp	.+448    	; 0x19de <CLCD_Setup+0x3bc>
	else if (__tmp > 255)
    181e:	fe 01       	movw	r30, r28
    1820:	e1 5b       	subi	r30, 0xB1	; 177
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	53 e4       	ldi	r21, 0x43	; 67
    1834:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	0c f0       	brlt	.+2      	; 0x183e <CLCD_Setup+0x21c>
    183c:	c0 c0       	rjmp	.+384    	; 0x19be <CLCD_Setup+0x39c>
	{
		_delay_ms(__us / 1000.0);
    183e:	fe 01       	movw	r30, r28
    1840:	ed 5a       	subi	r30, 0xAD	; 173
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a e7       	ldi	r20, 0x7A	; 122
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	fe 01       	movw	r30, r28
    185e:	e6 5b       	subi	r30, 0xB6	; 182
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	8e 01       	movw	r16, r28
    186c:	0a 5b       	subi	r16, 0xBA	; 186
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e6 5b       	subi	r30, 0xB6	; 182
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a ef       	ldi	r20, 0xFA	; 250
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	f8 01       	movw	r30, r16
    1890:	80 83       	st	Z, r24
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	a2 83       	std	Z+2, r26	; 0x02
    1896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1898:	fe 01       	movw	r30, r28
    189a:	ea 5b       	subi	r30, 0xBA	; 186
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	44 f4       	brge	.+16     	; 0x18c6 <CLCD_Setup+0x2a4>
		__ticks = 1;
    18b6:	fe 01       	movw	r30, r28
    18b8:	ec 5b       	subi	r30, 0xBC	; 188
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	64 c0       	rjmp	.+200    	; 0x198e <CLCD_Setup+0x36c>
	else if (__tmp > 65535)
    18c6:	fe 01       	movw	r30, r28
    18c8:	ea 5b       	subi	r30, 0xBA	; 186
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	0c f0       	brlt	.+2      	; 0x18e6 <CLCD_Setup+0x2c4>
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <CLCD_Setup+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	fe 01       	movw	r30, r28
    18e8:	e6 5b       	subi	r30, 0xB6	; 182
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8e 01       	movw	r16, r28
    1906:	0c 5b       	subi	r16, 0xBC	; 188
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    191c:	1f c0       	rjmp	.+62     	; 0x195c <CLCD_Setup+0x33a>
    191e:	fe 01       	movw	r30, r28
    1920:	ee 5b       	subi	r30, 0xBE	; 190
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    192c:	fe 01       	movw	r30, r28
    192e:	ee 5b       	subi	r30, 0xBE	; 190
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <CLCD_Setup+0x314>
    193a:	fe 01       	movw	r30, r28
    193c:	ee 5b       	subi	r30, 0xBE	; 190
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	de 01       	movw	r26, r28
    1946:	ac 5b       	subi	r26, 0xBC	; 188
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	ec 5b       	subi	r30, 0xBC	; 188
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195c:	fe 01       	movw	r30, r28
    195e:	ec 5b       	subi	r30, 0xBC	; 188
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	d1 f6       	brne	.-76     	; 0x191e <CLCD_Setup+0x2fc>
    196a:	42 c0       	rjmp	.+132    	; 0x19f0 <CLCD_Setup+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	8e 01       	movw	r16, r28
    196e:	0c 5b       	subi	r16, 0xBC	; 188
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	fe 01       	movw	r30, r28
    1974:	ea 5b       	subi	r30, 0xBA	; 186
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	de 01       	movw	r26, r28
    1990:	a0 5c       	subi	r26, 0xC0	; 192
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	fe 01       	movw	r30, r28
    1996:	ec 5b       	subi	r30, 0xBC	; 188
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	11 96       	adiw	r26, 0x01	; 1
    19a0:	9c 93       	st	X, r25
    19a2:	8e 93       	st	-X, r24
    19a4:	fe 01       	movw	r30, r28
    19a6:	e0 5c       	subi	r30, 0xC0	; 192
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <CLCD_Setup+0x38c>
    19b2:	fe 01       	movw	r30, r28
    19b4:	e0 5c       	subi	r30, 0xC0	; 192
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
    19bc:	19 c0       	rjmp	.+50     	; 0x19f0 <CLCD_Setup+0x3ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19be:	8e 01       	movw	r16, r28
    19c0:	02 5b       	subi	r16, 0xB2	; 178
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	e1 5b       	subi	r30, 0xB1	; 177
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	f8 01       	movw	r30, r16
    19dc:	80 83       	st	Z, r24
    19de:	fe 01       	movw	r30, r28
    19e0:	e2 5b       	subi	r30, 0xB2	; 178
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    19ea:	8a 95       	dec	r24
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <CLCD_Setup+0x3c8>
    19ee:	8f af       	std	Y+63, r24	; 0x3f
		_delay_us(50);
		CLCD_SendInstruction(CLCD_FUNCTION_SET | (CLCD_4BITMODE << 4) | (CLCD_NUMBER_OF_LINES <<3) | (CLCD_FONT << 2));
    19f0:	88 e2       	ldi	r24, 0x28	; 40
    19f2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a8 e4       	ldi	r26, 0x48	; 72
    19fc:	b2 e4       	ldi	r27, 0x42	; 66
    19fe:	8b af       	std	Y+59, r24	; 0x3b
    1a00:	9c af       	std	Y+60, r25	; 0x3c
    1a02:	ad af       	std	Y+61, r26	; 0x3d
    1a04:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a06:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a08:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0e:	2b ea       	ldi	r18, 0xAB	; 171
    1a10:	3a ea       	ldi	r19, 0xAA	; 170
    1a12:	4a e2       	ldi	r20, 0x2A	; 42
    1a14:	50 e4       	ldi	r21, 0x40	; 64
    1a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8f ab       	std	Y+55, r24	; 0x37
    1a20:	98 af       	std	Y+56, r25	; 0x38
    1a22:	a9 af       	std	Y+57, r26	; 0x39
    1a24:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a26:	6f a9       	ldd	r22, Y+55	; 0x37
    1a28:	78 ad       	ldd	r23, Y+56	; 0x38
    1a2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	1c f4       	brge	.+6      	; 0x1a44 <CLCD_Setup+0x422>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	8e ab       	std	Y+54, r24	; 0x36
    1a42:	91 c0       	rjmp	.+290    	; 0x1b66 <CLCD_Setup+0x544>
	else if (__tmp > 255)
    1a44:	6f a9       	ldd	r22, Y+55	; 0x37
    1a46:	78 ad       	ldd	r23, Y+56	; 0x38
    1a48:	89 ad       	ldd	r24, Y+57	; 0x39
    1a4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	53 e4       	ldi	r21, 0x43	; 67
    1a54:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <CLCD_Setup+0x43c>
    1a5c:	7b c0       	rjmp	.+246    	; 0x1b54 <CLCD_Setup+0x532>
	{
		_delay_ms(__us / 1000.0);
    1a5e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a60:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8a ab       	std	Y+50, r24	; 0x32
    1a78:	9b ab       	std	Y+51, r25	; 0x33
    1a7a:	ac ab       	std	Y+52, r26	; 0x34
    1a7c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6a a9       	ldd	r22, Y+50	; 0x32
    1a80:	7b a9       	ldd	r23, Y+51	; 0x33
    1a82:	8c a9       	ldd	r24, Y+52	; 0x34
    1a84:	9d a9       	ldd	r25, Y+53	; 0x35
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8e a7       	std	Y+46, r24	; 0x2e
    1a98:	9f a7       	std	Y+47, r25	; 0x2f
    1a9a:	a8 ab       	std	Y+48, r26	; 0x30
    1a9c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a9e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aa0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aa2:	88 a9       	ldd	r24, Y+48	; 0x30
    1aa4:	99 a9       	ldd	r25, Y+49	; 0x31
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <CLCD_Setup+0x49e>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9d a7       	std	Y+45, r25	; 0x2d
    1abc:	8c a7       	std	Y+44, r24	; 0x2c
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <CLCD_Setup+0x51c>
	else if (__tmp > 65535)
    1ac0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ac2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ac4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ac6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <CLCD_Setup+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6a a9       	ldd	r22, Y+50	; 0x32
    1ada:	7b a9       	ldd	r23, Y+51	; 0x33
    1adc:	8c a9       	ldd	r24, Y+52	; 0x34
    1ade:	9d a9       	ldd	r25, Y+53	; 0x35
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9d a7       	std	Y+45, r25	; 0x2d
    1afe:	8c a7       	std	Y+44, r24	; 0x2c
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <CLCD_Setup+0x4fe>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9b a7       	std	Y+43, r25	; 0x2b
    1b08:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b0c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <CLCD_Setup+0x4ec>
    1b12:	9b a7       	std	Y+43, r25	; 0x2b
    1b14:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b18:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9d a7       	std	Y+45, r25	; 0x2d
    1b1e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b22:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <CLCD_Setup+0x4e0>
    1b28:	24 c0       	rjmp	.+72     	; 0x1b72 <CLCD_Setup+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b2e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b30:	99 a9       	ldd	r25, Y+49	; 0x31
    1b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9d a7       	std	Y+45, r25	; 0x2d
    1b3c:	8c a7       	std	Y+44, r24	; 0x2c
    1b3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b40:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b42:	99 a7       	std	Y+41, r25	; 0x29
    1b44:	88 a7       	std	Y+40, r24	; 0x28
    1b46:	88 a5       	ldd	r24, Y+40	; 0x28
    1b48:	99 a5       	ldd	r25, Y+41	; 0x29
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <CLCD_Setup+0x528>
    1b4e:	99 a7       	std	Y+41, r25	; 0x29
    1b50:	88 a7       	std	Y+40, r24	; 0x28
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <CLCD_Setup+0x550>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b54:	6f a9       	ldd	r22, Y+55	; 0x37
    1b56:	78 ad       	ldd	r23, Y+56	; 0x38
    1b58:	89 ad       	ldd	r24, Y+57	; 0x39
    1b5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8e ab       	std	Y+54, r24	; 0x36
    1b66:	8e a9       	ldd	r24, Y+54	; 0x36
    1b68:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b6a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b6c:	8a 95       	dec	r24
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <CLCD_Setup+0x54a>
    1b70:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(50);
		/*send display on/off instruction*/
		/*With initial states blink and cursor are off ,, display are on*/
		CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_BlinkOff) | (CLCD_CursorOff << 1) |(CLCD_DisplayOn << 2));
    1b72:	8c e0       	ldi	r24, 0x0C	; 12
    1b74:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a8 e4       	ldi	r26, 0x48	; 72
    1b7e:	b2 e4       	ldi	r27, 0x42	; 66
    1b80:	8b a3       	std	Y+35, r24	; 0x23
    1b82:	9c a3       	std	Y+36, r25	; 0x24
    1b84:	ad a3       	std	Y+37, r26	; 0x25
    1b86:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b88:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b90:	2b ea       	ldi	r18, 0xAB	; 171
    1b92:	3a ea       	ldi	r19, 0xAA	; 170
    1b94:	4a e2       	ldi	r20, 0x2A	; 42
    1b96:	50 e4       	ldi	r21, 0x40	; 64
    1b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba2:	98 a3       	std	Y+32, r25	; 0x20
    1ba4:	a9 a3       	std	Y+33, r26	; 0x21
    1ba6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ba8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1baa:	78 a1       	ldd	r23, Y+32	; 0x20
    1bac:	89 a1       	ldd	r24, Y+33	; 0x21
    1bae:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	1c f4       	brge	.+6      	; 0x1bc6 <CLCD_Setup+0x5a4>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bc4:	91 c0       	rjmp	.+290    	; 0x1ce8 <CLCD_Setup+0x6c6>
	else if (__tmp > 255)
    1bc6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bc8:	78 a1       	ldd	r23, Y+32	; 0x20
    1bca:	89 a1       	ldd	r24, Y+33	; 0x21
    1bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	53 e4       	ldi	r21, 0x43	; 67
    1bd6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <CLCD_Setup+0x5be>
    1bde:	7b c0       	rjmp	.+246    	; 0x1cd6 <CLCD_Setup+0x6b4>
	{
		_delay_ms(__us / 1000.0);
    1be0:	6b a1       	ldd	r22, Y+35	; 0x23
    1be2:	7c a1       	ldd	r23, Y+36	; 0x24
    1be4:	8d a1       	ldd	r24, Y+37	; 0x25
    1be6:	9e a1       	ldd	r25, Y+38	; 0x26
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a e7       	ldi	r20, 0x7A	; 122
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8a 8f       	std	Y+26, r24	; 0x1a
    1bfa:	9b 8f       	std	Y+27, r25	; 0x1b
    1bfc:	ac 8f       	std	Y+28, r26	; 0x1c
    1bfe:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c02:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8e 8b       	std	Y+22, r24	; 0x16
    1c1a:	9f 8b       	std	Y+23, r25	; 0x17
    1c1c:	a8 8f       	std	Y+24, r26	; 0x18
    1c1e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c20:	6e 89       	ldd	r22, Y+22	; 0x16
    1c22:	7f 89       	ldd	r23, Y+23	; 0x17
    1c24:	88 8d       	ldd	r24, Y+24	; 0x18
    1c26:	99 8d       	ldd	r25, Y+25	; 0x19
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <CLCD_Setup+0x620>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9d 8b       	std	Y+21, r25	; 0x15
    1c3e:	8c 8b       	std	Y+20, r24	; 0x14
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <CLCD_Setup+0x69e>
	else if (__tmp > 65535)
    1c42:	6e 89       	ldd	r22, Y+22	; 0x16
    1c44:	7f 89       	ldd	r23, Y+23	; 0x17
    1c46:	88 8d       	ldd	r24, Y+24	; 0x18
    1c48:	99 8d       	ldd	r25, Y+25	; 0x19
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <CLCD_Setup+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c5c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9d 8b       	std	Y+21, r25	; 0x15
    1c80:	8c 8b       	std	Y+20, r24	; 0x14
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <CLCD_Setup+0x680>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9b 8b       	std	Y+19, r25	; 0x13
    1c8a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <CLCD_Setup+0x66e>
    1c94:	9b 8b       	std	Y+19, r25	; 0x13
    1c96:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8c 89       	ldd	r24, Y+20	; 0x14
    1c9a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9d 8b       	std	Y+21, r25	; 0x15
    1ca0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <CLCD_Setup+0x662>
    1caa:	24 c0       	rjmp	.+72     	; 0x1cf4 <CLCD_Setup+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6e 89       	ldd	r22, Y+22	; 0x16
    1cae:	7f 89       	ldd	r23, Y+23	; 0x17
    1cb0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb2:	99 8d       	ldd	r25, Y+25	; 0x19
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9d 8b       	std	Y+21, r25	; 0x15
    1cbe:	8c 8b       	std	Y+20, r24	; 0x14
    1cc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc4:	99 8b       	std	Y+17, r25	; 0x11
    1cc6:	88 8b       	std	Y+16, r24	; 0x10
    1cc8:	88 89       	ldd	r24, Y+16	; 0x10
    1cca:	99 89       	ldd	r25, Y+17	; 0x11
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <CLCD_Setup+0x6aa>
    1cd0:	99 8b       	std	Y+17, r25	; 0x11
    1cd2:	88 8b       	std	Y+16, r24	; 0x10
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <CLCD_Setup+0x6d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cd6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cd8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cee:	8a 95       	dec	r24
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <CLCD_Setup+0x6cc>
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(50);
		/*send clear display instruction*/
		CLCD_SendInstruction(CLCD_CLEAR_DISPLAY);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e4       	ldi	r26, 0x40	; 64
    1d00:	b0 e4       	ldi	r27, 0x40	; 64
    1d02:	8b 87       	std	Y+11, r24	; 0x0b
    1d04:	9c 87       	std	Y+12, r25	; 0x0c
    1d06:	ad 87       	std	Y+13, r26	; 0x0d
    1d08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a ef       	ldi	r20, 0xFA	; 250
    1d18:	54 e4       	ldi	r21, 0x44	; 68
    1d1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	98 87       	std	Y+8, r25	; 0x08
    1d26:	a9 87       	std	Y+9, r26	; 0x09
    1d28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <CLCD_Setup+0x72a>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9e 83       	std	Y+6, r25	; 0x06
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <CLCD_Setup+0x7a8>
	else if (__tmp > 65535)
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <CLCD_Setup+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <CLCD_Setup+0x78a>
    1d8e:	88 ec       	ldi	r24, 0xC8	; 200
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <CLCD_Setup+0x778>
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <CLCD_Setup+0x76c>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <CLCD_Setup+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <CLCD_Setup+0x7b4>
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3);
		/*send entry mode set function*/
		/*CLCD_SendInstruction(CLCD_ENTRY_MODE_SET);*/
	#endif
}
    1dde:	cc 59       	subi	r28, 0x9C	; 156
    1de0:	df 4f       	sbci	r29, 0xFF	; 255
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <CLCD_PrintString>:

void CLCD_PrintString(char *str)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <CLCD_PrintString+0x6>
    1dfc:	0f 92       	push	r0
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	9b 83       	std	Y+3, r25	; 0x03
    1e04:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t iterator;
	for(iterator = 0 ; str[iterator] != '\0'; iterator++)
    1e06:	19 82       	std	Y+1, r1	; 0x01
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <CLCD_PrintString+0x30>
	{
		CLCD_SendData(str[iterator]);
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	80 81       	ld	r24, Z
    1e1c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <CLCD_SendData>
}

void CLCD_PrintString(char *str)
{
	uint8_t iterator;
	for(iterator = 0 ; str[iterator] != '\0'; iterator++)
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	fc 01       	movw	r30, r24
    1e32:	e2 0f       	add	r30, r18
    1e34:	f3 1f       	adc	r31, r19
    1e36:	80 81       	ld	r24, Z
    1e38:	88 23       	and	r24, r24
    1e3a:	39 f7       	brne	.-50     	; 0x1e0a <CLCD_PrintString+0x14>
	{
		CLCD_SendData(str[iterator]);
	}
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <CLCD_SetCursor>:
void CLCD_SetCursor(uint8_t x_position , uint8_t y_position)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	e2 97       	sbiw	r28, 0x32	; 50
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	89 ab       	std	Y+49, r24	; 0x31
    1e5e:	6a ab       	std	Y+50, r22	; 0x32
	if(y_position == 0)
    1e60:	8a a9       	ldd	r24, Y+50	; 0x32
    1e62:	88 23       	and	r24, r24
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <CLCD_SetCursor+0x20>
    1e66:	c3 c0       	rjmp	.+390    	; 0x1fee <CLCD_SetCursor+0x1a6>
	{
		CLCD_SendInstruction(CLCD_DDRAM_ADDRESS + x_position);
    1e68:	89 a9       	ldd	r24, Y+49	; 0x31
    1e6a:	80 58       	subi	r24, 0x80	; 128
    1e6c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a8 e4       	ldi	r26, 0x48	; 72
    1e76:	b2 e4       	ldi	r27, 0x42	; 66
    1e78:	8d a7       	std	Y+45, r24	; 0x2d
    1e7a:	9e a7       	std	Y+46, r25	; 0x2e
    1e7c:	af a7       	std	Y+47, r26	; 0x2f
    1e7e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e80:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e82:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e86:	98 a9       	ldd	r25, Y+48	; 0x30
    1e88:	2b ea       	ldi	r18, 0xAB	; 171
    1e8a:	3a ea       	ldi	r19, 0xAA	; 170
    1e8c:	4a e2       	ldi	r20, 0x2A	; 42
    1e8e:	50 e4       	ldi	r21, 0x40	; 64
    1e90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	89 a7       	std	Y+41, r24	; 0x29
    1e9a:	9a a7       	std	Y+42, r25	; 0x2a
    1e9c:	ab a7       	std	Y+43, r26	; 0x2b
    1e9e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ea0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ea2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ea4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	1c f4       	brge	.+6      	; 0x1ebe <CLCD_SetCursor+0x76>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	88 a7       	std	Y+40, r24	; 0x28
    1ebc:	91 c0       	rjmp	.+290    	; 0x1fe0 <CLCD_SetCursor+0x198>
	else if (__tmp > 255)
    1ebe:	69 a5       	ldd	r22, Y+41	; 0x29
    1ec0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	53 e4       	ldi	r21, 0x43	; 67
    1ece:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <CLCD_SetCursor+0x90>
    1ed6:	7b c0       	rjmp	.+246    	; 0x1fce <CLCD_SetCursor+0x186>
	{
		_delay_ms(__us / 1000.0);
    1ed8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eda:	7e a5       	ldd	r23, Y+46	; 0x2e
    1edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ede:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a e7       	ldi	r20, 0x7A	; 122
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8c a3       	std	Y+36, r24	; 0x24
    1ef2:	9d a3       	std	Y+37, r25	; 0x25
    1ef4:	ae a3       	std	Y+38, r26	; 0x26
    1ef6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	6c a1       	ldd	r22, Y+36	; 0x24
    1efa:	7d a1       	ldd	r23, Y+37	; 0x25
    1efc:	8e a1       	ldd	r24, Y+38	; 0x26
    1efe:	9f a1       	ldd	r25, Y+39	; 0x27
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	88 a3       	std	Y+32, r24	; 0x20
    1f12:	99 a3       	std	Y+33, r25	; 0x21
    1f14:	aa a3       	std	Y+34, r26	; 0x22
    1f16:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f18:	68 a1       	ldd	r22, Y+32	; 0x20
    1f1a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f1c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f1e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <CLCD_SetCursor+0xf2>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9f 8f       	std	Y+31, r25	; 0x1f
    1f36:	8e 8f       	std	Y+30, r24	; 0x1e
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <CLCD_SetCursor+0x170>
	else if (__tmp > 65535)
    1f3a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f3c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f40:	9b a1       	ldd	r25, Y+35	; 0x23
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <CLCD_SetCursor+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	6c a1       	ldd	r22, Y+36	; 0x24
    1f54:	7d a1       	ldd	r23, Y+37	; 0x25
    1f56:	8e a1       	ldd	r24, Y+38	; 0x26
    1f58:	9f a1       	ldd	r25, Y+39	; 0x27
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9f 8f       	std	Y+31, r25	; 0x1f
    1f78:	8e 8f       	std	Y+30, r24	; 0x1e
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <CLCD_SetCursor+0x152>
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9d 8f       	std	Y+29, r25	; 0x1d
    1f82:	8c 8f       	std	Y+28, r24	; 0x1c
    1f84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <CLCD_SetCursor+0x140>
    1f8c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f8e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	9f 8f       	std	Y+31, r25	; 0x1f
    1f98:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <CLCD_SetCursor+0x134>
    1fa2:	eb c0       	rjmp	.+470    	; 0x217a <CLCD_SetCursor+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	68 a1       	ldd	r22, Y+32	; 0x20
    1fa6:	79 a1       	ldd	r23, Y+33	; 0x21
    1fa8:	8a a1       	ldd	r24, Y+34	; 0x22
    1faa:	9b a1       	ldd	r25, Y+35	; 0x23
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb6:	8e 8f       	std	Y+30, r24	; 0x1e
    1fb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fbc:	9b 8f       	std	Y+27, r25	; 0x1b
    1fbe:	8a 8f       	std	Y+26, r24	; 0x1a
    1fc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <CLCD_SetCursor+0x17c>
    1fc8:	9b 8f       	std	Y+27, r25	; 0x1b
    1fca:	8a 8f       	std	Y+26, r24	; 0x1a
    1fcc:	d6 c0       	rjmp	.+428    	; 0x217a <CLCD_SetCursor+0x332>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fce:	69 a5       	ldd	r22, Y+41	; 0x29
    1fd0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	88 a7       	std	Y+40, r24	; 0x28
    1fe0:	88 a5       	ldd	r24, Y+40	; 0x28
    1fe2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fe4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fe6:	8a 95       	dec	r24
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <CLCD_SetCursor+0x19e>
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	c6 c0       	rjmp	.+396    	; 0x217a <CLCD_SetCursor+0x332>
		_delay_us(50);
	}
	else if (y_position == 1)
    1fee:	8a a9       	ldd	r24, Y+50	; 0x32
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <CLCD_SetCursor+0x1ae>
    1ff4:	c2 c0       	rjmp	.+388    	; 0x217a <CLCD_SetCursor+0x332>
	{
		CLCD_SendInstruction(CLCD_DDRAM_ADDRESS + x_position + 0X40);
    1ff6:	89 a9       	ldd	r24, Y+49	; 0x31
    1ff8:	80 54       	subi	r24, 0x40	; 64
    1ffa:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a8 e4       	ldi	r26, 0x48	; 72
    2004:	b2 e4       	ldi	r27, 0x42	; 66
    2006:	8d 8b       	std	Y+21, r24	; 0x15
    2008:	9e 8b       	std	Y+22, r25	; 0x16
    200a:	af 8b       	std	Y+23, r26	; 0x17
    200c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	2b ea       	ldi	r18, 0xAB	; 171
    2018:	3a ea       	ldi	r19, 0xAA	; 170
    201a:	4a e2       	ldi	r20, 0x2A	; 42
    201c:	50 e4       	ldi	r21, 0x40	; 64
    201e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	89 8b       	std	Y+17, r24	; 0x11
    2028:	9a 8b       	std	Y+18, r25	; 0x12
    202a:	ab 8b       	std	Y+19, r26	; 0x13
    202c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    202e:	69 89       	ldd	r22, Y+17	; 0x11
    2030:	7a 89       	ldd	r23, Y+18	; 0x12
    2032:	8b 89       	ldd	r24, Y+19	; 0x13
    2034:	9c 89       	ldd	r25, Y+20	; 0x14
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	1c f4       	brge	.+6      	; 0x204c <CLCD_SetCursor+0x204>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	88 8b       	std	Y+16, r24	; 0x10
    204a:	91 c0       	rjmp	.+290    	; 0x216e <CLCD_SetCursor+0x326>
	else if (__tmp > 255)
    204c:	69 89       	ldd	r22, Y+17	; 0x11
    204e:	7a 89       	ldd	r23, Y+18	; 0x12
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	9c 89       	ldd	r25, Y+20	; 0x14
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	53 e4       	ldi	r21, 0x43	; 67
    205c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	0c f0       	brlt	.+2      	; 0x2066 <CLCD_SetCursor+0x21e>
    2064:	7b c0       	rjmp	.+246    	; 0x215c <CLCD_SetCursor+0x314>
	{
		_delay_ms(__us / 1000.0);
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a e7       	ldi	r20, 0x7A	; 122
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8c 87       	std	Y+12, r24	; 0x0c
    2080:	9d 87       	std	Y+13, r25	; 0x0d
    2082:	ae 87       	std	Y+14, r26	; 0x0e
    2084:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	6c 85       	ldd	r22, Y+12	; 0x0c
    2088:	7d 85       	ldd	r23, Y+13	; 0x0d
    208a:	8e 85       	ldd	r24, Y+14	; 0x0e
    208c:	9f 85       	ldd	r25, Y+15	; 0x0f
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a ef       	ldi	r20, 0xFA	; 250
    2094:	54 e4       	ldi	r21, 0x44	; 68
    2096:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	88 87       	std	Y+8, r24	; 0x08
    20a0:	99 87       	std	Y+9, r25	; 0x09
    20a2:	aa 87       	std	Y+10, r26	; 0x0a
    20a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20a6:	68 85       	ldd	r22, Y+8	; 0x08
    20a8:	79 85       	ldd	r23, Y+9	; 0x09
    20aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <CLCD_SetCursor+0x280>
		__ticks = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9f 83       	std	Y+7, r25	; 0x07
    20c4:	8e 83       	std	Y+6, r24	; 0x06
    20c6:	3f c0       	rjmp	.+126    	; 0x2146 <CLCD_SetCursor+0x2fe>
	else if (__tmp > 65535)
    20c8:	68 85       	ldd	r22, Y+8	; 0x08
    20ca:	79 85       	ldd	r23, Y+9	; 0x09
    20cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	4c f5       	brge	.+82     	; 0x2132 <CLCD_SetCursor+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9f 83       	std	Y+7, r25	; 0x07
    2106:	8e 83       	std	Y+6, r24	; 0x06
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <CLCD_SetCursor+0x2e0>
    210a:	88 ec       	ldi	r24, 0xC8	; 200
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9d 83       	std	Y+5, r25	; 0x05
    2110:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <CLCD_SetCursor+0x2ce>
    211a:	9d 83       	std	Y+5, r25	; 0x05
    211c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	9f 83       	std	Y+7, r25	; 0x07
    2126:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	8e 81       	ldd	r24, Y+6	; 0x06
    212a:	9f 81       	ldd	r25, Y+7	; 0x07
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	69 f7       	brne	.-38     	; 0x210a <CLCD_SetCursor+0x2c2>
    2130:	24 c0       	rjmp	.+72     	; 0x217a <CLCD_SetCursor+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2132:	68 85       	ldd	r22, Y+8	; 0x08
    2134:	79 85       	ldd	r23, Y+9	; 0x09
    2136:	8a 85       	ldd	r24, Y+10	; 0x0a
    2138:	9b 85       	ldd	r25, Y+11	; 0x0b
    213a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9f 83       	std	Y+7, r25	; 0x07
    2144:	8e 83       	std	Y+6, r24	; 0x06
    2146:	8e 81       	ldd	r24, Y+6	; 0x06
    2148:	9f 81       	ldd	r25, Y+7	; 0x07
    214a:	9b 83       	std	Y+3, r25	; 0x03
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <CLCD_SetCursor+0x30a>
    2156:	9b 83       	std	Y+3, r25	; 0x03
    2158:	8a 83       	std	Y+2, r24	; 0x02
    215a:	0f c0       	rjmp	.+30     	; 0x217a <CLCD_SetCursor+0x332>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    215c:	69 89       	ldd	r22, Y+17	; 0x11
    215e:	7a 89       	ldd	r23, Y+18	; 0x12
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	88 8b       	std	Y+16, r24	; 0x10
    216e:	88 89       	ldd	r24, Y+16	; 0x10
    2170:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	8a 95       	dec	r24
    2176:	f1 f7       	brne	.-4      	; 0x2174 <CLCD_SetCursor+0x32c>
    2178:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);
	}
}
    217a:	e2 96       	adiw	r28, 0x32	; 50
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <CLCD_BlinkCursor>:
void CLCD_BlinkCursor(void)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	68 97       	sbiw	r28, 0x18	; 24
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction( CLCD_DISPLAY_CONTROL | (CLCD_BlinkOn) | (CLCD_DisplayOn << 2));
    21a0:	8d e0       	ldi	r24, 0x0D	; 13
    21a2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a8 e4       	ldi	r26, 0x48	; 72
    21ac:	b2 e4       	ldi	r27, 0x42	; 66
    21ae:	8d 8b       	std	Y+21, r24	; 0x15
    21b0:	9e 8b       	std	Y+22, r25	; 0x16
    21b2:	af 8b       	std	Y+23, r26	; 0x17
    21b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	2b ea       	ldi	r18, 0xAB	; 171
    21c0:	3a ea       	ldi	r19, 0xAA	; 170
    21c2:	4a e2       	ldi	r20, 0x2A	; 42
    21c4:	50 e4       	ldi	r21, 0x40	; 64
    21c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	89 8b       	std	Y+17, r24	; 0x11
    21d0:	9a 8b       	std	Y+18, r25	; 0x12
    21d2:	ab 8b       	std	Y+19, r26	; 0x13
    21d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21d6:	69 89       	ldd	r22, Y+17	; 0x11
    21d8:	7a 89       	ldd	r23, Y+18	; 0x12
    21da:	8b 89       	ldd	r24, Y+19	; 0x13
    21dc:	9c 89       	ldd	r25, Y+20	; 0x14
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	1c f4       	brge	.+6      	; 0x21f4 <CLCD_BlinkCursor+0x68>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	88 8b       	std	Y+16, r24	; 0x10
    21f2:	91 c0       	rjmp	.+290    	; 0x2316 <CLCD_BlinkCursor+0x18a>
	else if (__tmp > 255)
    21f4:	69 89       	ldd	r22, Y+17	; 0x11
    21f6:	7a 89       	ldd	r23, Y+18	; 0x12
    21f8:	8b 89       	ldd	r24, Y+19	; 0x13
    21fa:	9c 89       	ldd	r25, Y+20	; 0x14
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	53 e4       	ldi	r21, 0x43	; 67
    2204:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	0c f0       	brlt	.+2      	; 0x220e <CLCD_BlinkCursor+0x82>
    220c:	7b c0       	rjmp	.+246    	; 0x2304 <CLCD_BlinkCursor+0x178>
	{
		_delay_ms(__us / 1000.0);
    220e:	6d 89       	ldd	r22, Y+21	; 0x15
    2210:	7e 89       	ldd	r23, Y+22	; 0x16
    2212:	8f 89       	ldd	r24, Y+23	; 0x17
    2214:	98 8d       	ldd	r25, Y+24	; 0x18
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	54 e4       	ldi	r21, 0x44	; 68
    221e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8c 87       	std	Y+12, r24	; 0x0c
    2228:	9d 87       	std	Y+13, r25	; 0x0d
    222a:	ae 87       	std	Y+14, r26	; 0x0e
    222c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2230:	7d 85       	ldd	r23, Y+13	; 0x0d
    2232:	8e 85       	ldd	r24, Y+14	; 0x0e
    2234:	9f 85       	ldd	r25, Y+15	; 0x0f
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a ef       	ldi	r20, 0xFA	; 250
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	88 87       	std	Y+8, r24	; 0x08
    2248:	99 87       	std	Y+9, r25	; 0x09
    224a:	aa 87       	std	Y+10, r26	; 0x0a
    224c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    224e:	68 85       	ldd	r22, Y+8	; 0x08
    2250:	79 85       	ldd	r23, Y+9	; 0x09
    2252:	8a 85       	ldd	r24, Y+10	; 0x0a
    2254:	9b 85       	ldd	r25, Y+11	; 0x0b
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	2c f4       	brge	.+10     	; 0x2270 <CLCD_BlinkCursor+0xe4>
		__ticks = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9f 83       	std	Y+7, r25	; 0x07
    226c:	8e 83       	std	Y+6, r24	; 0x06
    226e:	3f c0       	rjmp	.+126    	; 0x22ee <CLCD_BlinkCursor+0x162>
	else if (__tmp > 65535)
    2270:	68 85       	ldd	r22, Y+8	; 0x08
    2272:	79 85       	ldd	r23, Y+9	; 0x09
    2274:	8a 85       	ldd	r24, Y+10	; 0x0a
    2276:	9b 85       	ldd	r25, Y+11	; 0x0b
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	4c f5       	brge	.+82     	; 0x22da <CLCD_BlinkCursor+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	6c 85       	ldd	r22, Y+12	; 0x0c
    228a:	7d 85       	ldd	r23, Y+13	; 0x0d
    228c:	8e 85       	ldd	r24, Y+14	; 0x0e
    228e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9f 83       	std	Y+7, r25	; 0x07
    22ae:	8e 83       	std	Y+6, r24	; 0x06
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <CLCD_BlinkCursor+0x144>
    22b2:	88 ec       	ldi	r24, 0xC8	; 200
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9d 83       	std	Y+5, r25	; 0x05
    22b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ba:	8c 81       	ldd	r24, Y+4	; 0x04
    22bc:	9d 81       	ldd	r25, Y+5	; 0x05
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <CLCD_BlinkCursor+0x132>
    22c2:	9d 83       	std	Y+5, r25	; 0x05
    22c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	8e 81       	ldd	r24, Y+6	; 0x06
    22c8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9f 83       	std	Y+7, r25	; 0x07
    22ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d0:	8e 81       	ldd	r24, Y+6	; 0x06
    22d2:	9f 81       	ldd	r25, Y+7	; 0x07
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <CLCD_BlinkCursor+0x126>
    22d8:	24 c0       	rjmp	.+72     	; 0x2322 <CLCD_BlinkCursor+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	68 85       	ldd	r22, Y+8	; 0x08
    22dc:	79 85       	ldd	r23, Y+9	; 0x09
    22de:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9f 83       	std	Y+7, r25	; 0x07
    22ec:	8e 83       	std	Y+6, r24	; 0x06
    22ee:	8e 81       	ldd	r24, Y+6	; 0x06
    22f0:	9f 81       	ldd	r25, Y+7	; 0x07
    22f2:	9b 83       	std	Y+3, r25	; 0x03
    22f4:	8a 83       	std	Y+2, r24	; 0x02
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <CLCD_BlinkCursor+0x16e>
    22fe:	9b 83       	std	Y+3, r25	; 0x03
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <CLCD_BlinkCursor+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2304:	69 89       	ldd	r22, Y+17	; 0x11
    2306:	7a 89       	ldd	r23, Y+18	; 0x12
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	88 8b       	std	Y+16, r24	; 0x10
    2316:	88 89       	ldd	r24, Y+16	; 0x10
    2318:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	8a 95       	dec	r24
    231e:	f1 f7       	brne	.-4      	; 0x231c <CLCD_BlinkCursor+0x190>
    2320:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    2322:	68 96       	adiw	r28, 0x18	; 24
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <CLCD_NoBlinkCursor>:

void CLCD_NoBlinkCursor(void)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	68 97       	sbiw	r28, 0x18	; 24
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_BlinkOff) | (CLCD_DisplayOn << 2));
    2348:	8c e0       	ldi	r24, 0x0C	; 12
    234a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a8 e4       	ldi	r26, 0x48	; 72
    2354:	b2 e4       	ldi	r27, 0x42	; 66
    2356:	8d 8b       	std	Y+21, r24	; 0x15
    2358:	9e 8b       	std	Y+22, r25	; 0x16
    235a:	af 8b       	std	Y+23, r26	; 0x17
    235c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	2b ea       	ldi	r18, 0xAB	; 171
    2368:	3a ea       	ldi	r19, 0xAA	; 170
    236a:	4a e2       	ldi	r20, 0x2A	; 42
    236c:	50 e4       	ldi	r21, 0x40	; 64
    236e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	89 8b       	std	Y+17, r24	; 0x11
    2378:	9a 8b       	std	Y+18, r25	; 0x12
    237a:	ab 8b       	std	Y+19, r26	; 0x13
    237c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    237e:	69 89       	ldd	r22, Y+17	; 0x11
    2380:	7a 89       	ldd	r23, Y+18	; 0x12
    2382:	8b 89       	ldd	r24, Y+19	; 0x13
    2384:	9c 89       	ldd	r25, Y+20	; 0x14
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	1c f4       	brge	.+6      	; 0x239c <CLCD_NoBlinkCursor+0x68>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	88 8b       	std	Y+16, r24	; 0x10
    239a:	91 c0       	rjmp	.+290    	; 0x24be <CLCD_NoBlinkCursor+0x18a>
	else if (__tmp > 255)
    239c:	69 89       	ldd	r22, Y+17	; 0x11
    239e:	7a 89       	ldd	r23, Y+18	; 0x12
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	53 e4       	ldi	r21, 0x43	; 67
    23ac:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <CLCD_NoBlinkCursor+0x82>
    23b4:	7b c0       	rjmp	.+246    	; 0x24ac <CLCD_NoBlinkCursor+0x178>
	{
		_delay_ms(__us / 1000.0);
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	54 e4       	ldi	r21, 0x44	; 68
    23c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8c 87       	std	Y+12, r24	; 0x0c
    23d0:	9d 87       	std	Y+13, r25	; 0x0d
    23d2:	ae 87       	std	Y+14, r26	; 0x0e
    23d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    23d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    23da:	8e 85       	ldd	r24, Y+14	; 0x0e
    23dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	4a ef       	ldi	r20, 0xFA	; 250
    23e4:	54 e4       	ldi	r21, 0x44	; 68
    23e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	88 87       	std	Y+8, r24	; 0x08
    23f0:	99 87       	std	Y+9, r25	; 0x09
    23f2:	aa 87       	std	Y+10, r26	; 0x0a
    23f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23f6:	68 85       	ldd	r22, Y+8	; 0x08
    23f8:	79 85       	ldd	r23, Y+9	; 0x09
    23fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	2c f4       	brge	.+10     	; 0x2418 <CLCD_NoBlinkCursor+0xe4>
		__ticks = 1;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9f 83       	std	Y+7, r25	; 0x07
    2414:	8e 83       	std	Y+6, r24	; 0x06
    2416:	3f c0       	rjmp	.+126    	; 0x2496 <CLCD_NoBlinkCursor+0x162>
	else if (__tmp > 65535)
    2418:	68 85       	ldd	r22, Y+8	; 0x08
    241a:	79 85       	ldd	r23, Y+9	; 0x09
    241c:	8a 85       	ldd	r24, Y+10	; 0x0a
    241e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	57 e4       	ldi	r21, 0x47	; 71
    2428:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	4c f5       	brge	.+82     	; 0x2482 <CLCD_NoBlinkCursor+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2430:	6c 85       	ldd	r22, Y+12	; 0x0c
    2432:	7d 85       	ldd	r23, Y+13	; 0x0d
    2434:	8e 85       	ldd	r24, Y+14	; 0x0e
    2436:	9f 85       	ldd	r25, Y+15	; 0x0f
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e2       	ldi	r20, 0x20	; 32
    243e:	51 e4       	ldi	r21, 0x41	; 65
    2440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9f 83       	std	Y+7, r25	; 0x07
    2456:	8e 83       	std	Y+6, r24	; 0x06
    2458:	0f c0       	rjmp	.+30     	; 0x2478 <CLCD_NoBlinkCursor+0x144>
    245a:	88 ec       	ldi	r24, 0xC8	; 200
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9d 83       	std	Y+5, r25	; 0x05
    2460:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2462:	8c 81       	ldd	r24, Y+4	; 0x04
    2464:	9d 81       	ldd	r25, Y+5	; 0x05
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <CLCD_NoBlinkCursor+0x132>
    246a:	9d 83       	std	Y+5, r25	; 0x05
    246c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246e:	8e 81       	ldd	r24, Y+6	; 0x06
    2470:	9f 81       	ldd	r25, Y+7	; 0x07
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	9f 83       	std	Y+7, r25	; 0x07
    2476:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2478:	8e 81       	ldd	r24, Y+6	; 0x06
    247a:	9f 81       	ldd	r25, Y+7	; 0x07
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	69 f7       	brne	.-38     	; 0x245a <CLCD_NoBlinkCursor+0x126>
    2480:	24 c0       	rjmp	.+72     	; 0x24ca <CLCD_NoBlinkCursor+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2482:	68 85       	ldd	r22, Y+8	; 0x08
    2484:	79 85       	ldd	r23, Y+9	; 0x09
    2486:	8a 85       	ldd	r24, Y+10	; 0x0a
    2488:	9b 85       	ldd	r25, Y+11	; 0x0b
    248a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9f 83       	std	Y+7, r25	; 0x07
    2494:	8e 83       	std	Y+6, r24	; 0x06
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	9b 83       	std	Y+3, r25	; 0x03
    249c:	8a 83       	std	Y+2, r24	; 0x02
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <CLCD_NoBlinkCursor+0x16e>
    24a6:	9b 83       	std	Y+3, r25	; 0x03
    24a8:	8a 83       	std	Y+2, r24	; 0x02
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <CLCD_NoBlinkCursor+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ac:	69 89       	ldd	r22, Y+17	; 0x11
    24ae:	7a 89       	ldd	r23, Y+18	; 0x12
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	88 8b       	std	Y+16, r24	; 0x10
    24be:	88 89       	ldd	r24, Y+16	; 0x10
    24c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	8a 95       	dec	r24
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <CLCD_NoBlinkCursor+0x190>
    24c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    24ca:	68 96       	adiw	r28, 0x18	; 24
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <CLCD_TurnOnCursor>:

void CLCD_TurnOnCursor(void)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	68 97       	sbiw	r28, 0x18	; 24
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_CursorOn << 1) | (CLCD_DisplayOn << 2));
    24f0:	8e e0       	ldi	r24, 0x0E	; 14
    24f2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a8 e4       	ldi	r26, 0x48	; 72
    24fc:	b2 e4       	ldi	r27, 0x42	; 66
    24fe:	8d 8b       	std	Y+21, r24	; 0x15
    2500:	9e 8b       	std	Y+22, r25	; 0x16
    2502:	af 8b       	std	Y+23, r26	; 0x17
    2504:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2506:	6d 89       	ldd	r22, Y+21	; 0x15
    2508:	7e 89       	ldd	r23, Y+22	; 0x16
    250a:	8f 89       	ldd	r24, Y+23	; 0x17
    250c:	98 8d       	ldd	r25, Y+24	; 0x18
    250e:	2b ea       	ldi	r18, 0xAB	; 171
    2510:	3a ea       	ldi	r19, 0xAA	; 170
    2512:	4a e2       	ldi	r20, 0x2A	; 42
    2514:	50 e4       	ldi	r21, 0x40	; 64
    2516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	89 8b       	std	Y+17, r24	; 0x11
    2520:	9a 8b       	std	Y+18, r25	; 0x12
    2522:	ab 8b       	std	Y+19, r26	; 0x13
    2524:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2526:	69 89       	ldd	r22, Y+17	; 0x11
    2528:	7a 89       	ldd	r23, Y+18	; 0x12
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	1c f4       	brge	.+6      	; 0x2544 <CLCD_TurnOnCursor+0x68>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	88 8b       	std	Y+16, r24	; 0x10
    2542:	91 c0       	rjmp	.+290    	; 0x2666 <CLCD_TurnOnCursor+0x18a>
	else if (__tmp > 255)
    2544:	69 89       	ldd	r22, Y+17	; 0x11
    2546:	7a 89       	ldd	r23, Y+18	; 0x12
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	53 e4       	ldi	r21, 0x43	; 67
    2554:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	0c f0       	brlt	.+2      	; 0x255e <CLCD_TurnOnCursor+0x82>
    255c:	7b c0       	rjmp	.+246    	; 0x2654 <CLCD_TurnOnCursor+0x178>
	{
		_delay_ms(__us / 1000.0);
    255e:	6d 89       	ldd	r22, Y+21	; 0x15
    2560:	7e 89       	ldd	r23, Y+22	; 0x16
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a e7       	ldi	r20, 0x7A	; 122
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8c 87       	std	Y+12, r24	; 0x0c
    2578:	9d 87       	std	Y+13, r25	; 0x0d
    257a:	ae 87       	std	Y+14, r26	; 0x0e
    257c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2580:	7d 85       	ldd	r23, Y+13	; 0x0d
    2582:	8e 85       	ldd	r24, Y+14	; 0x0e
    2584:	9f 85       	ldd	r25, Y+15	; 0x0f
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a ef       	ldi	r20, 0xFA	; 250
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	88 87       	std	Y+8, r24	; 0x08
    2598:	99 87       	std	Y+9, r25	; 0x09
    259a:	aa 87       	std	Y+10, r26	; 0x0a
    259c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    259e:	68 85       	ldd	r22, Y+8	; 0x08
    25a0:	79 85       	ldd	r23, Y+9	; 0x09
    25a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <CLCD_TurnOnCursor+0xe4>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9f 83       	std	Y+7, r25	; 0x07
    25bc:	8e 83       	std	Y+6, r24	; 0x06
    25be:	3f c0       	rjmp	.+126    	; 0x263e <CLCD_TurnOnCursor+0x162>
	else if (__tmp > 65535)
    25c0:	68 85       	ldd	r22, Y+8	; 0x08
    25c2:	79 85       	ldd	r23, Y+9	; 0x09
    25c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	4c f5       	brge	.+82     	; 0x262a <CLCD_TurnOnCursor+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25da:	7d 85       	ldd	r23, Y+13	; 0x0d
    25dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25de:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9f 83       	std	Y+7, r25	; 0x07
    25fe:	8e 83       	std	Y+6, r24	; 0x06
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <CLCD_TurnOnCursor+0x144>
    2602:	88 ec       	ldi	r24, 0xC8	; 200
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9d 83       	std	Y+5, r25	; 0x05
    2608:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	9d 81       	ldd	r25, Y+5	; 0x05
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <CLCD_TurnOnCursor+0x132>
    2612:	9d 83       	std	Y+5, r25	; 0x05
    2614:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8e 81       	ldd	r24, Y+6	; 0x06
    2618:	9f 81       	ldd	r25, Y+7	; 0x07
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9f 83       	std	Y+7, r25	; 0x07
    261e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8e 81       	ldd	r24, Y+6	; 0x06
    2622:	9f 81       	ldd	r25, Y+7	; 0x07
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <CLCD_TurnOnCursor+0x126>
    2628:	24 c0       	rjmp	.+72     	; 0x2672 <CLCD_TurnOnCursor+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	68 85       	ldd	r22, Y+8	; 0x08
    262c:	79 85       	ldd	r23, Y+9	; 0x09
    262e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2630:	9b 85       	ldd	r25, Y+11	; 0x0b
    2632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9f 83       	std	Y+7, r25	; 0x07
    263c:	8e 83       	std	Y+6, r24	; 0x06
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9f 81       	ldd	r25, Y+7	; 0x07
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <CLCD_TurnOnCursor+0x16e>
    264e:	9b 83       	std	Y+3, r25	; 0x03
    2650:	8a 83       	std	Y+2, r24	; 0x02
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <CLCD_TurnOnCursor+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2654:	69 89       	ldd	r22, Y+17	; 0x11
    2656:	7a 89       	ldd	r23, Y+18	; 0x12
    2658:	8b 89       	ldd	r24, Y+19	; 0x13
    265a:	9c 89       	ldd	r25, Y+20	; 0x14
    265c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	88 8b       	std	Y+16, r24	; 0x10
    2666:	88 89       	ldd	r24, Y+16	; 0x10
    2668:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	8a 95       	dec	r24
    266e:	f1 f7       	brne	.-4      	; 0x266c <CLCD_TurnOnCursor+0x190>
    2670:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    2672:	68 96       	adiw	r28, 0x18	; 24
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <CLCD_TurnOffCursor>:

void CLCD_TurnOffCursor(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	68 97       	sbiw	r28, 0x18	; 24
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_CursorOff << 1) | (CLCD_DisplayOn << 2));
    2698:	8c e0       	ldi	r24, 0x0C	; 12
    269a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a8 e4       	ldi	r26, 0x48	; 72
    26a4:	b2 e4       	ldi	r27, 0x42	; 66
    26a6:	8d 8b       	std	Y+21, r24	; 0x15
    26a8:	9e 8b       	std	Y+22, r25	; 0x16
    26aa:	af 8b       	std	Y+23, r26	; 0x17
    26ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26ae:	6d 89       	ldd	r22, Y+21	; 0x15
    26b0:	7e 89       	ldd	r23, Y+22	; 0x16
    26b2:	8f 89       	ldd	r24, Y+23	; 0x17
    26b4:	98 8d       	ldd	r25, Y+24	; 0x18
    26b6:	2b ea       	ldi	r18, 0xAB	; 171
    26b8:	3a ea       	ldi	r19, 0xAA	; 170
    26ba:	4a e2       	ldi	r20, 0x2A	; 42
    26bc:	50 e4       	ldi	r21, 0x40	; 64
    26be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	89 8b       	std	Y+17, r24	; 0x11
    26c8:	9a 8b       	std	Y+18, r25	; 0x12
    26ca:	ab 8b       	std	Y+19, r26	; 0x13
    26cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26ce:	69 89       	ldd	r22, Y+17	; 0x11
    26d0:	7a 89       	ldd	r23, Y+18	; 0x12
    26d2:	8b 89       	ldd	r24, Y+19	; 0x13
    26d4:	9c 89       	ldd	r25, Y+20	; 0x14
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	1c f4       	brge	.+6      	; 0x26ec <CLCD_TurnOffCursor+0x68>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	88 8b       	std	Y+16, r24	; 0x10
    26ea:	91 c0       	rjmp	.+290    	; 0x280e <CLCD_TurnOffCursor+0x18a>
	else if (__tmp > 255)
    26ec:	69 89       	ldd	r22, Y+17	; 0x11
    26ee:	7a 89       	ldd	r23, Y+18	; 0x12
    26f0:	8b 89       	ldd	r24, Y+19	; 0x13
    26f2:	9c 89       	ldd	r25, Y+20	; 0x14
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	53 e4       	ldi	r21, 0x43	; 67
    26fc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	0c f0       	brlt	.+2      	; 0x2706 <CLCD_TurnOffCursor+0x82>
    2704:	7b c0       	rjmp	.+246    	; 0x27fc <CLCD_TurnOffCursor+0x178>
	{
		_delay_ms(__us / 1000.0);
    2706:	6d 89       	ldd	r22, Y+21	; 0x15
    2708:	7e 89       	ldd	r23, Y+22	; 0x16
    270a:	8f 89       	ldd	r24, Y+23	; 0x17
    270c:	98 8d       	ldd	r25, Y+24	; 0x18
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	54 e4       	ldi	r21, 0x44	; 68
    2716:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8c 87       	std	Y+12, r24	; 0x0c
    2720:	9d 87       	std	Y+13, r25	; 0x0d
    2722:	ae 87       	std	Y+14, r26	; 0x0e
    2724:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6c 85       	ldd	r22, Y+12	; 0x0c
    2728:	7d 85       	ldd	r23, Y+13	; 0x0d
    272a:	8e 85       	ldd	r24, Y+14	; 0x0e
    272c:	9f 85       	ldd	r25, Y+15	; 0x0f
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a ef       	ldi	r20, 0xFA	; 250
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	88 87       	std	Y+8, r24	; 0x08
    2740:	99 87       	std	Y+9, r25	; 0x09
    2742:	aa 87       	std	Y+10, r26	; 0x0a
    2744:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2746:	68 85       	ldd	r22, Y+8	; 0x08
    2748:	79 85       	ldd	r23, Y+9	; 0x09
    274a:	8a 85       	ldd	r24, Y+10	; 0x0a
    274c:	9b 85       	ldd	r25, Y+11	; 0x0b
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <CLCD_TurnOffCursor+0xe4>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9f 83       	std	Y+7, r25	; 0x07
    2764:	8e 83       	std	Y+6, r24	; 0x06
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <CLCD_TurnOffCursor+0x162>
	else if (__tmp > 65535)
    2768:	68 85       	ldd	r22, Y+8	; 0x08
    276a:	79 85       	ldd	r23, Y+9	; 0x09
    276c:	8a 85       	ldd	r24, Y+10	; 0x0a
    276e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <CLCD_TurnOffCursor+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6c 85       	ldd	r22, Y+12	; 0x0c
    2782:	7d 85       	ldd	r23, Y+13	; 0x0d
    2784:	8e 85       	ldd	r24, Y+14	; 0x0e
    2786:	9f 85       	ldd	r25, Y+15	; 0x0f
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9f 83       	std	Y+7, r25	; 0x07
    27a6:	8e 83       	std	Y+6, r24	; 0x06
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <CLCD_TurnOffCursor+0x144>
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9d 83       	std	Y+5, r25	; 0x05
    27b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <CLCD_TurnOffCursor+0x132>
    27ba:	9d 83       	std	Y+5, r25	; 0x05
    27bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8e 81       	ldd	r24, Y+6	; 0x06
    27c0:	9f 81       	ldd	r25, Y+7	; 0x07
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9f 83       	std	Y+7, r25	; 0x07
    27c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ca:	9f 81       	ldd	r25, Y+7	; 0x07
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <CLCD_TurnOffCursor+0x126>
    27d0:	24 c0       	rjmp	.+72     	; 0x281a <CLCD_TurnOffCursor+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	68 85       	ldd	r22, Y+8	; 0x08
    27d4:	79 85       	ldd	r23, Y+9	; 0x09
    27d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9f 83       	std	Y+7, r25	; 0x07
    27e4:	8e 83       	std	Y+6, r24	; 0x06
    27e6:	8e 81       	ldd	r24, Y+6	; 0x06
    27e8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ea:	9b 83       	std	Y+3, r25	; 0x03
    27ec:	8a 83       	std	Y+2, r24	; 0x02
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <CLCD_TurnOffCursor+0x16e>
    27f6:	9b 83       	std	Y+3, r25	; 0x03
    27f8:	8a 83       	std	Y+2, r24	; 0x02
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <CLCD_TurnOffCursor+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27fc:	69 89       	ldd	r22, Y+17	; 0x11
    27fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2800:	8b 89       	ldd	r24, Y+19	; 0x13
    2802:	9c 89       	ldd	r25, Y+20	; 0x14
    2804:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	88 8b       	std	Y+16, r24	; 0x10
    280e:	88 89       	ldd	r24, Y+16	; 0x10
    2810:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	8a 95       	dec	r24
    2816:	f1 f7       	brne	.-4      	; 0x2814 <CLCD_TurnOffCursor+0x190>
    2818:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    281a:	68 96       	adiw	r28, 0x18	; 24
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <CLCD_TurnOnDisplay>:
void CLCD_TurnOnDisplay(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	68 97       	sbiw	r28, 0x18	; 24
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_DisplayOn << 2));
    2840:	8c e0       	ldi	r24, 0x0C	; 12
    2842:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a8 e4       	ldi	r26, 0x48	; 72
    284c:	b2 e4       	ldi	r27, 0x42	; 66
    284e:	8d 8b       	std	Y+21, r24	; 0x15
    2850:	9e 8b       	std	Y+22, r25	; 0x16
    2852:	af 8b       	std	Y+23, r26	; 0x17
    2854:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2856:	6d 89       	ldd	r22, Y+21	; 0x15
    2858:	7e 89       	ldd	r23, Y+22	; 0x16
    285a:	8f 89       	ldd	r24, Y+23	; 0x17
    285c:	98 8d       	ldd	r25, Y+24	; 0x18
    285e:	2b ea       	ldi	r18, 0xAB	; 171
    2860:	3a ea       	ldi	r19, 0xAA	; 170
    2862:	4a e2       	ldi	r20, 0x2A	; 42
    2864:	50 e4       	ldi	r21, 0x40	; 64
    2866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	89 8b       	std	Y+17, r24	; 0x11
    2870:	9a 8b       	std	Y+18, r25	; 0x12
    2872:	ab 8b       	std	Y+19, r26	; 0x13
    2874:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2876:	69 89       	ldd	r22, Y+17	; 0x11
    2878:	7a 89       	ldd	r23, Y+18	; 0x12
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	1c f4       	brge	.+6      	; 0x2894 <CLCD_TurnOnDisplay+0x68>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	88 8b       	std	Y+16, r24	; 0x10
    2892:	91 c0       	rjmp	.+290    	; 0x29b6 <CLCD_TurnOnDisplay+0x18a>
	else if (__tmp > 255)
    2894:	69 89       	ldd	r22, Y+17	; 0x11
    2896:	7a 89       	ldd	r23, Y+18	; 0x12
    2898:	8b 89       	ldd	r24, Y+19	; 0x13
    289a:	9c 89       	ldd	r25, Y+20	; 0x14
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	53 e4       	ldi	r21, 0x43	; 67
    28a4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <CLCD_TurnOnDisplay+0x82>
    28ac:	7b c0       	rjmp	.+246    	; 0x29a4 <CLCD_TurnOnDisplay+0x178>
	{
		_delay_ms(__us / 1000.0);
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	4a e7       	ldi	r20, 0x7A	; 122
    28bc:	54 e4       	ldi	r21, 0x44	; 68
    28be:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8c 87       	std	Y+12, r24	; 0x0c
    28c8:	9d 87       	std	Y+13, r25	; 0x0d
    28ca:	ae 87       	std	Y+14, r26	; 0x0e
    28cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    28d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    28d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    28d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	88 87       	std	Y+8, r24	; 0x08
    28e8:	99 87       	std	Y+9, r25	; 0x09
    28ea:	aa 87       	std	Y+10, r26	; 0x0a
    28ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28ee:	68 85       	ldd	r22, Y+8	; 0x08
    28f0:	79 85       	ldd	r23, Y+9	; 0x09
    28f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <CLCD_TurnOnDisplay+0xe4>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9f 83       	std	Y+7, r25	; 0x07
    290c:	8e 83       	std	Y+6, r24	; 0x06
    290e:	3f c0       	rjmp	.+126    	; 0x298e <CLCD_TurnOnDisplay+0x162>
	else if (__tmp > 65535)
    2910:	68 85       	ldd	r22, Y+8	; 0x08
    2912:	79 85       	ldd	r23, Y+9	; 0x09
    2914:	8a 85       	ldd	r24, Y+10	; 0x0a
    2916:	9b 85       	ldd	r25, Y+11	; 0x0b
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <CLCD_TurnOnDisplay+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6c 85       	ldd	r22, Y+12	; 0x0c
    292a:	7d 85       	ldd	r23, Y+13	; 0x0d
    292c:	8e 85       	ldd	r24, Y+14	; 0x0e
    292e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9f 83       	std	Y+7, r25	; 0x07
    294e:	8e 83       	std	Y+6, r24	; 0x06
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <CLCD_TurnOnDisplay+0x144>
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9d 83       	std	Y+5, r25	; 0x05
    2958:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    295a:	8c 81       	ldd	r24, Y+4	; 0x04
    295c:	9d 81       	ldd	r25, Y+5	; 0x05
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <CLCD_TurnOnDisplay+0x132>
    2962:	9d 83       	std	Y+5, r25	; 0x05
    2964:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8e 81       	ldd	r24, Y+6	; 0x06
    2968:	9f 81       	ldd	r25, Y+7	; 0x07
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	9f 83       	std	Y+7, r25	; 0x07
    296e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8e 81       	ldd	r24, Y+6	; 0x06
    2972:	9f 81       	ldd	r25, Y+7	; 0x07
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <CLCD_TurnOnDisplay+0x126>
    2978:	24 c0       	rjmp	.+72     	; 0x29c2 <CLCD_TurnOnDisplay+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	68 85       	ldd	r22, Y+8	; 0x08
    297c:	79 85       	ldd	r23, Y+9	; 0x09
    297e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2980:	9b 85       	ldd	r25, Y+11	; 0x0b
    2982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9f 83       	std	Y+7, r25	; 0x07
    298c:	8e 83       	std	Y+6, r24	; 0x06
    298e:	8e 81       	ldd	r24, Y+6	; 0x06
    2990:	9f 81       	ldd	r25, Y+7	; 0x07
    2992:	9b 83       	std	Y+3, r25	; 0x03
    2994:	8a 83       	std	Y+2, r24	; 0x02
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	9b 81       	ldd	r25, Y+3	; 0x03
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <CLCD_TurnOnDisplay+0x16e>
    299e:	9b 83       	std	Y+3, r25	; 0x03
    29a0:	8a 83       	std	Y+2, r24	; 0x02
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <CLCD_TurnOnDisplay+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29a4:	69 89       	ldd	r22, Y+17	; 0x11
    29a6:	7a 89       	ldd	r23, Y+18	; 0x12
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	88 8b       	std	Y+16, r24	; 0x10
    29b6:	88 89       	ldd	r24, Y+16	; 0x10
    29b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	8a 95       	dec	r24
    29be:	f1 f7       	brne	.-4      	; 0x29bc <CLCD_TurnOnDisplay+0x190>
    29c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    29c2:	68 96       	adiw	r28, 0x18	; 24
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	de bf       	out	0x3e, r29	; 62
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <CLCD_TurnOffDisplay>:

void CLCD_TurnOffDisplay(void)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	68 97       	sbiw	r28, 0x18	; 24
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_DISPLAY_CONTROL | (CLCD_DisplayOff << 2));
    29e8:	88 e0       	ldi	r24, 0x08	; 8
    29ea:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a8 e4       	ldi	r26, 0x48	; 72
    29f4:	b2 e4       	ldi	r27, 0x42	; 66
    29f6:	8d 8b       	std	Y+21, r24	; 0x15
    29f8:	9e 8b       	std	Y+22, r25	; 0x16
    29fa:	af 8b       	std	Y+23, r26	; 0x17
    29fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2a00:	7e 89       	ldd	r23, Y+22	; 0x16
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	2b ea       	ldi	r18, 0xAB	; 171
    2a08:	3a ea       	ldi	r19, 0xAA	; 170
    2a0a:	4a e2       	ldi	r20, 0x2A	; 42
    2a0c:	50 e4       	ldi	r21, 0x40	; 64
    2a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	89 8b       	std	Y+17, r24	; 0x11
    2a18:	9a 8b       	std	Y+18, r25	; 0x12
    2a1a:	ab 8b       	std	Y+19, r26	; 0x13
    2a1c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a1e:	69 89       	ldd	r22, Y+17	; 0x11
    2a20:	7a 89       	ldd	r23, Y+18	; 0x12
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	1c f4       	brge	.+6      	; 0x2a3c <CLCD_TurnOffDisplay+0x68>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	88 8b       	std	Y+16, r24	; 0x10
    2a3a:	91 c0       	rjmp	.+290    	; 0x2b5e <CLCD_TurnOffDisplay+0x18a>
	else if (__tmp > 255)
    2a3c:	69 89       	ldd	r22, Y+17	; 0x11
    2a3e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a40:	8b 89       	ldd	r24, Y+19	; 0x13
    2a42:	9c 89       	ldd	r25, Y+20	; 0x14
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4f e7       	ldi	r20, 0x7F	; 127
    2a4a:	53 e4       	ldi	r21, 0x43	; 67
    2a4c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2a50:	18 16       	cp	r1, r24
    2a52:	0c f0       	brlt	.+2      	; 0x2a56 <CLCD_TurnOffDisplay+0x82>
    2a54:	7b c0       	rjmp	.+246    	; 0x2b4c <CLCD_TurnOffDisplay+0x178>
	{
		_delay_ms(__us / 1000.0);
    2a56:	6d 89       	ldd	r22, Y+21	; 0x15
    2a58:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a e7       	ldi	r20, 0x7A	; 122
    2a64:	54 e4       	ldi	r21, 0x44	; 68
    2a66:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	8c 87       	std	Y+12, r24	; 0x0c
    2a70:	9d 87       	std	Y+13, r25	; 0x0d
    2a72:	ae 87       	std	Y+14, r26	; 0x0e
    2a74:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a78:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a ef       	ldi	r20, 0xFA	; 250
    2a84:	54 e4       	ldi	r21, 0x44	; 68
    2a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	88 87       	std	Y+8, r24	; 0x08
    2a90:	99 87       	std	Y+9, r25	; 0x09
    2a92:	aa 87       	std	Y+10, r26	; 0x0a
    2a94:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a96:	68 85       	ldd	r22, Y+8	; 0x08
    2a98:	79 85       	ldd	r23, Y+9	; 0x09
    2a9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e8       	ldi	r20, 0x80	; 128
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2aaa:	88 23       	and	r24, r24
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <CLCD_TurnOffDisplay+0xe4>
		__ticks = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9f 83       	std	Y+7, r25	; 0x07
    2ab4:	8e 83       	std	Y+6, r24	; 0x06
    2ab6:	3f c0       	rjmp	.+126    	; 0x2b36 <CLCD_TurnOffDisplay+0x162>
	else if (__tmp > 65535)
    2ab8:	68 85       	ldd	r22, Y+8	; 0x08
    2aba:	79 85       	ldd	r23, Y+9	; 0x09
    2abc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2abe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	4c f5       	brge	.+82     	; 0x2b22 <CLCD_TurnOffDisplay+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ad2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ad4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ad6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9f 83       	std	Y+7, r25	; 0x07
    2af6:	8e 83       	std	Y+6, r24	; 0x06
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <CLCD_TurnOffDisplay+0x144>
    2afa:	88 ec       	ldi	r24, 0xC8	; 200
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9d 83       	std	Y+5, r25	; 0x05
    2b00:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	9d 81       	ldd	r25, Y+5	; 0x05
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <CLCD_TurnOffDisplay+0x132>
    2b0a:	9d 83       	std	Y+5, r25	; 0x05
    2b0c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b10:	9f 81       	ldd	r25, Y+7	; 0x07
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9f 83       	std	Y+7, r25	; 0x07
    2b16:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b18:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <CLCD_TurnOffDisplay+0x126>
    2b20:	24 c0       	rjmp	.+72     	; 0x2b6a <CLCD_TurnOffDisplay+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	68 85       	ldd	r22, Y+8	; 0x08
    2b24:	79 85       	ldd	r23, Y+9	; 0x09
    2b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9f 83       	std	Y+7, r25	; 0x07
    2b34:	8e 83       	std	Y+6, r24	; 0x06
    2b36:	8e 81       	ldd	r24, Y+6	; 0x06
    2b38:	9f 81       	ldd	r25, Y+7	; 0x07
    2b3a:	9b 83       	std	Y+3, r25	; 0x03
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	9b 81       	ldd	r25, Y+3	; 0x03
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <CLCD_TurnOffDisplay+0x16e>
    2b46:	9b 83       	std	Y+3, r25	; 0x03
    2b48:	8a 83       	std	Y+2, r24	; 0x02
    2b4a:	0f c0       	rjmp	.+30     	; 0x2b6a <CLCD_TurnOffDisplay+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b4c:	69 89       	ldd	r22, Y+17	; 0x11
    2b4e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	88 8b       	std	Y+16, r24	; 0x10
    2b5e:	88 89       	ldd	r24, Y+16	; 0x10
    2b60:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	8a 95       	dec	r24
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <CLCD_TurnOffDisplay+0x190>
    2b68:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    2b6a:	68 96       	adiw	r28, 0x18	; 24
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <CLCD_ShiftCursorRight>:

void CLCD_ShiftCursorRight(void)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	68 97       	sbiw	r28, 0x18	; 24
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_CURSOR_OR_DISPLAY_SHIFT | (CLCD_SC_CURSOR << 3) | ( CLCD_RL_RIGHT << 2));
    2b90:	84 e1       	ldi	r24, 0x14	; 20
    2b92:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	a8 e4       	ldi	r26, 0x48	; 72
    2b9c:	b2 e4       	ldi	r27, 0x42	; 66
    2b9e:	8d 8b       	std	Y+21, r24	; 0x15
    2ba0:	9e 8b       	std	Y+22, r25	; 0x16
    2ba2:	af 8b       	std	Y+23, r26	; 0x17
    2ba4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	2b ea       	ldi	r18, 0xAB	; 171
    2bb0:	3a ea       	ldi	r19, 0xAA	; 170
    2bb2:	4a e2       	ldi	r20, 0x2A	; 42
    2bb4:	50 e4       	ldi	r21, 0x40	; 64
    2bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	89 8b       	std	Y+17, r24	; 0x11
    2bc0:	9a 8b       	std	Y+18, r25	; 0x12
    2bc2:	ab 8b       	std	Y+19, r26	; 0x13
    2bc4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bc6:	69 89       	ldd	r22, Y+17	; 0x11
    2bc8:	7a 89       	ldd	r23, Y+18	; 0x12
    2bca:	8b 89       	ldd	r24, Y+19	; 0x13
    2bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2bda:	88 23       	and	r24, r24
    2bdc:	1c f4       	brge	.+6      	; 0x2be4 <CLCD_ShiftCursorRight+0x68>
		__ticks = 1;
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	88 8b       	std	Y+16, r24	; 0x10
    2be2:	91 c0       	rjmp	.+290    	; 0x2d06 <CLCD_ShiftCursorRight+0x18a>
	else if (__tmp > 255)
    2be4:	69 89       	ldd	r22, Y+17	; 0x11
    2be6:	7a 89       	ldd	r23, Y+18	; 0x12
    2be8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bea:	9c 89       	ldd	r25, Y+20	; 0x14
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	53 e4       	ldi	r21, 0x43	; 67
    2bf4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	0c f0       	brlt	.+2      	; 0x2bfe <CLCD_ShiftCursorRight+0x82>
    2bfc:	7b c0       	rjmp	.+246    	; 0x2cf4 <CLCD_ShiftCursorRight+0x178>
	{
		_delay_ms(__us / 1000.0);
    2bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2c00:	7e 89       	ldd	r23, Y+22	; 0x16
    2c02:	8f 89       	ldd	r24, Y+23	; 0x17
    2c04:	98 8d       	ldd	r25, Y+24	; 0x18
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a e7       	ldi	r20, 0x7A	; 122
    2c0c:	54 e4       	ldi	r21, 0x44	; 68
    2c0e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	8c 87       	std	Y+12, r24	; 0x0c
    2c18:	9d 87       	std	Y+13, r25	; 0x0d
    2c1a:	ae 87       	std	Y+14, r26	; 0x0e
    2c1c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c20:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c22:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c24:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a ef       	ldi	r20, 0xFA	; 250
    2c2c:	54 e4       	ldi	r21, 0x44	; 68
    2c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	88 87       	std	Y+8, r24	; 0x08
    2c38:	99 87       	std	Y+9, r25	; 0x09
    2c3a:	aa 87       	std	Y+10, r26	; 0x0a
    2c3c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c3e:	68 85       	ldd	r22, Y+8	; 0x08
    2c40:	79 85       	ldd	r23, Y+9	; 0x09
    2c42:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c44:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2c52:	88 23       	and	r24, r24
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <CLCD_ShiftCursorRight+0xe4>
		__ticks = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9f 83       	std	Y+7, r25	; 0x07
    2c5c:	8e 83       	std	Y+6, r24	; 0x06
    2c5e:	3f c0       	rjmp	.+126    	; 0x2cde <CLCD_ShiftCursorRight+0x162>
	else if (__tmp > 65535)
    2c60:	68 85       	ldd	r22, Y+8	; 0x08
    2c62:	79 85       	ldd	r23, Y+9	; 0x09
    2c64:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c66:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	4c f5       	brge	.+82     	; 0x2cca <CLCD_ShiftCursorRight+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9f 83       	std	Y+7, r25	; 0x07
    2c9e:	8e 83       	std	Y+6, r24	; 0x06
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <CLCD_ShiftCursorRight+0x144>
    2ca2:	88 ec       	ldi	r24, 0xC8	; 200
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9d 83       	std	Y+5, r25	; 0x05
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	9d 81       	ldd	r25, Y+5	; 0x05
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <CLCD_ShiftCursorRight+0x132>
    2cb2:	9d 83       	std	Y+5, r25	; 0x05
    2cb4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9f 83       	std	Y+7, r25	; 0x07
    2cbe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <CLCD_ShiftCursorRight+0x126>
    2cc8:	24 c0       	rjmp	.+72     	; 0x2d12 <CLCD_ShiftCursorRight+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	68 85       	ldd	r22, Y+8	; 0x08
    2ccc:	79 85       	ldd	r23, Y+9	; 0x09
    2cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9f 83       	std	Y+7, r25	; 0x07
    2cdc:	8e 83       	std	Y+6, r24	; 0x06
    2cde:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce2:	9b 83       	std	Y+3, r25	; 0x03
    2ce4:	8a 83       	std	Y+2, r24	; 0x02
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <CLCD_ShiftCursorRight+0x16e>
    2cee:	9b 83       	std	Y+3, r25	; 0x03
    2cf0:	8a 83       	std	Y+2, r24	; 0x02
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <CLCD_ShiftCursorRight+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cf4:	69 89       	ldd	r22, Y+17	; 0x11
    2cf6:	7a 89       	ldd	r23, Y+18	; 0x12
    2cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	88 8b       	std	Y+16, r24	; 0x10
    2d06:	88 89       	ldd	r24, Y+16	; 0x10
    2d08:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	8a 95       	dec	r24
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <CLCD_ShiftCursorRight+0x190>
    2d10:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    2d12:	68 96       	adiw	r28, 0x18	; 24
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <CLCD_ShiftCursorLeft>:

void CLCD_ShiftCursorLeft(void)
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	68 97       	sbiw	r28, 0x18	; 24
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_CURSOR_OR_DISPLAY_SHIFT | (CLCD_SC_CURSOR << 3) | ( CLCD_RL_LEFT << 2));
    2d38:	80 e1       	ldi	r24, 0x10	; 16
    2d3a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a8 e4       	ldi	r26, 0x48	; 72
    2d44:	b2 e4       	ldi	r27, 0x42	; 66
    2d46:	8d 8b       	std	Y+21, r24	; 0x15
    2d48:	9e 8b       	std	Y+22, r25	; 0x16
    2d4a:	af 8b       	std	Y+23, r26	; 0x17
    2d4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d50:	7e 89       	ldd	r23, Y+22	; 0x16
    2d52:	8f 89       	ldd	r24, Y+23	; 0x17
    2d54:	98 8d       	ldd	r25, Y+24	; 0x18
    2d56:	2b ea       	ldi	r18, 0xAB	; 171
    2d58:	3a ea       	ldi	r19, 0xAA	; 170
    2d5a:	4a e2       	ldi	r20, 0x2A	; 42
    2d5c:	50 e4       	ldi	r21, 0x40	; 64
    2d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	89 8b       	std	Y+17, r24	; 0x11
    2d68:	9a 8b       	std	Y+18, r25	; 0x12
    2d6a:	ab 8b       	std	Y+19, r26	; 0x13
    2d6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d6e:	69 89       	ldd	r22, Y+17	; 0x11
    2d70:	7a 89       	ldd	r23, Y+18	; 0x12
    2d72:	8b 89       	ldd	r24, Y+19	; 0x13
    2d74:	9c 89       	ldd	r25, Y+20	; 0x14
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2d82:	88 23       	and	r24, r24
    2d84:	1c f4       	brge	.+6      	; 0x2d8c <CLCD_ShiftCursorLeft+0x68>
		__ticks = 1;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	88 8b       	std	Y+16, r24	; 0x10
    2d8a:	91 c0       	rjmp	.+290    	; 0x2eae <CLCD_ShiftCursorLeft+0x18a>
	else if (__tmp > 255)
    2d8c:	69 89       	ldd	r22, Y+17	; 0x11
    2d8e:	7a 89       	ldd	r23, Y+18	; 0x12
    2d90:	8b 89       	ldd	r24, Y+19	; 0x13
    2d92:	9c 89       	ldd	r25, Y+20	; 0x14
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4f e7       	ldi	r20, 0x7F	; 127
    2d9a:	53 e4       	ldi	r21, 0x43	; 67
    2d9c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	0c f0       	brlt	.+2      	; 0x2da6 <CLCD_ShiftCursorLeft+0x82>
    2da4:	7b c0       	rjmp	.+246    	; 0x2e9c <CLCD_ShiftCursorLeft+0x178>
	{
		_delay_ms(__us / 1000.0);
    2da6:	6d 89       	ldd	r22, Y+21	; 0x15
    2da8:	7e 89       	ldd	r23, Y+22	; 0x16
    2daa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dac:	98 8d       	ldd	r25, Y+24	; 0x18
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4a e7       	ldi	r20, 0x7A	; 122
    2db4:	54 e4       	ldi	r21, 0x44	; 68
    2db6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	8c 87       	std	Y+12, r24	; 0x0c
    2dc0:	9d 87       	std	Y+13, r25	; 0x0d
    2dc2:	ae 87       	std	Y+14, r26	; 0x0e
    2dc4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dc8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dcc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	88 87       	std	Y+8, r24	; 0x08
    2de0:	99 87       	std	Y+9, r25	; 0x09
    2de2:	aa 87       	std	Y+10, r26	; 0x0a
    2de4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2de6:	68 85       	ldd	r22, Y+8	; 0x08
    2de8:	79 85       	ldd	r23, Y+9	; 0x09
    2dea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <CLCD_ShiftCursorLeft+0xe4>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9f 83       	std	Y+7, r25	; 0x07
    2e04:	8e 83       	std	Y+6, r24	; 0x06
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <CLCD_ShiftCursorLeft+0x162>
	else if (__tmp > 65535)
    2e08:	68 85       	ldd	r22, Y+8	; 0x08
    2e0a:	79 85       	ldd	r23, Y+9	; 0x09
    2e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <CLCD_ShiftCursorLeft+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9f 83       	std	Y+7, r25	; 0x07
    2e46:	8e 83       	std	Y+6, r24	; 0x06
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <CLCD_ShiftCursorLeft+0x144>
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9d 83       	std	Y+5, r25	; 0x05
    2e50:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e52:	8c 81       	ldd	r24, Y+4	; 0x04
    2e54:	9d 81       	ldd	r25, Y+5	; 0x05
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <CLCD_ShiftCursorLeft+0x132>
    2e5a:	9d 83       	std	Y+5, r25	; 0x05
    2e5c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e60:	9f 81       	ldd	r25, Y+7	; 0x07
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9f 83       	std	Y+7, r25	; 0x07
    2e66:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <CLCD_ShiftCursorLeft+0x126>
    2e70:	24 c0       	rjmp	.+72     	; 0x2eba <CLCD_ShiftCursorLeft+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	68 85       	ldd	r22, Y+8	; 0x08
    2e74:	79 85       	ldd	r23, Y+9	; 0x09
    2e76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9f 83       	std	Y+7, r25	; 0x07
    2e84:	8e 83       	std	Y+6, r24	; 0x06
    2e86:	8e 81       	ldd	r24, Y+6	; 0x06
    2e88:	9f 81       	ldd	r25, Y+7	; 0x07
    2e8a:	9b 83       	std	Y+3, r25	; 0x03
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	9b 81       	ldd	r25, Y+3	; 0x03
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <CLCD_ShiftCursorLeft+0x16e>
    2e96:	9b 83       	std	Y+3, r25	; 0x03
    2e98:	8a 83       	std	Y+2, r24	; 0x02
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <CLCD_ShiftCursorLeft+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e9c:	69 89       	ldd	r22, Y+17	; 0x11
    2e9e:	7a 89       	ldd	r23, Y+18	; 0x12
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	88 8b       	std	Y+16, r24	; 0x10
    2eae:	88 89       	ldd	r24, Y+16	; 0x10
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	8a 95       	dec	r24
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <CLCD_ShiftCursorLeft+0x190>
    2eb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    2eba:	68 96       	adiw	r28, 0x18	; 24
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <CLCD_ShiftDisplayLeft>:
void CLCD_ShiftDisplayLeft(void)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	68 97       	sbiw	r28, 0x18	; 24
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_CURSOR_OR_DISPLAY_SHIFT | (CLCD_SC_DISPLAY << 3) | ( CLCD_RL_LEFT << 2));
    2ee0:	88 e1       	ldi	r24, 0x18	; 24
    2ee2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a8 e4       	ldi	r26, 0x48	; 72
    2eec:	b2 e4       	ldi	r27, 0x42	; 66
    2eee:	8d 8b       	std	Y+21, r24	; 0x15
    2ef0:	9e 8b       	std	Y+22, r25	; 0x16
    2ef2:	af 8b       	std	Y+23, r26	; 0x17
    2ef4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ef6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef8:	7e 89       	ldd	r23, Y+22	; 0x16
    2efa:	8f 89       	ldd	r24, Y+23	; 0x17
    2efc:	98 8d       	ldd	r25, Y+24	; 0x18
    2efe:	2b ea       	ldi	r18, 0xAB	; 171
    2f00:	3a ea       	ldi	r19, 0xAA	; 170
    2f02:	4a e2       	ldi	r20, 0x2A	; 42
    2f04:	50 e4       	ldi	r21, 0x40	; 64
    2f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	89 8b       	std	Y+17, r24	; 0x11
    2f10:	9a 8b       	std	Y+18, r25	; 0x12
    2f12:	ab 8b       	std	Y+19, r26	; 0x13
    2f14:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f16:	69 89       	ldd	r22, Y+17	; 0x11
    2f18:	7a 89       	ldd	r23, Y+18	; 0x12
    2f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e8       	ldi	r20, 0x80	; 128
    2f24:	5f e3       	ldi	r21, 0x3F	; 63
    2f26:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2f2a:	88 23       	and	r24, r24
    2f2c:	1c f4       	brge	.+6      	; 0x2f34 <CLCD_ShiftDisplayLeft+0x68>
		__ticks = 1;
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	88 8b       	std	Y+16, r24	; 0x10
    2f32:	91 c0       	rjmp	.+290    	; 0x3056 <CLCD_ShiftDisplayLeft+0x18a>
	else if (__tmp > 255)
    2f34:	69 89       	ldd	r22, Y+17	; 0x11
    2f36:	7a 89       	ldd	r23, Y+18	; 0x12
    2f38:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	53 e4       	ldi	r21, 0x43	; 67
    2f44:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	0c f0       	brlt	.+2      	; 0x2f4e <CLCD_ShiftDisplayLeft+0x82>
    2f4c:	7b c0       	rjmp	.+246    	; 0x3044 <CLCD_ShiftDisplayLeft+0x178>
	{
		_delay_ms(__us / 1000.0);
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4a e7       	ldi	r20, 0x7A	; 122
    2f5c:	54 e4       	ldi	r21, 0x44	; 68
    2f5e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	8c 87       	std	Y+12, r24	; 0x0c
    2f68:	9d 87       	std	Y+13, r25	; 0x0d
    2f6a:	ae 87       	std	Y+14, r26	; 0x0e
    2f6c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f70:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f72:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f74:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	88 87       	std	Y+8, r24	; 0x08
    2f88:	99 87       	std	Y+9, r25	; 0x09
    2f8a:	aa 87       	std	Y+10, r26	; 0x0a
    2f8c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f8e:	68 85       	ldd	r22, Y+8	; 0x08
    2f90:	79 85       	ldd	r23, Y+9	; 0x09
    2f92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2fa2:	88 23       	and	r24, r24
    2fa4:	2c f4       	brge	.+10     	; 0x2fb0 <CLCD_ShiftDisplayLeft+0xe4>
		__ticks = 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	9f 83       	std	Y+7, r25	; 0x07
    2fac:	8e 83       	std	Y+6, r24	; 0x06
    2fae:	3f c0       	rjmp	.+126    	; 0x302e <CLCD_ShiftDisplayLeft+0x162>
	else if (__tmp > 65535)
    2fb0:	68 85       	ldd	r22, Y+8	; 0x08
    2fb2:	79 85       	ldd	r23, Y+9	; 0x09
    2fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2fc4:	18 16       	cp	r1, r24
    2fc6:	4c f5       	brge	.+82     	; 0x301a <CLCD_ShiftDisplayLeft+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fca:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fce:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9f 83       	std	Y+7, r25	; 0x07
    2fee:	8e 83       	std	Y+6, r24	; 0x06
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <CLCD_ShiftDisplayLeft+0x144>
    2ff2:	88 ec       	ldi	r24, 0xC8	; 200
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9d 83       	std	Y+5, r25	; 0x05
    2ff8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <CLCD_ShiftDisplayLeft+0x132>
    3002:	9d 83       	std	Y+5, r25	; 0x05
    3004:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3006:	8e 81       	ldd	r24, Y+6	; 0x06
    3008:	9f 81       	ldd	r25, Y+7	; 0x07
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	9f 83       	std	Y+7, r25	; 0x07
    300e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3010:	8e 81       	ldd	r24, Y+6	; 0x06
    3012:	9f 81       	ldd	r25, Y+7	; 0x07
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <CLCD_ShiftDisplayLeft+0x126>
    3018:	24 c0       	rjmp	.+72     	; 0x3062 <CLCD_ShiftDisplayLeft+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301a:	68 85       	ldd	r22, Y+8	; 0x08
    301c:	79 85       	ldd	r23, Y+9	; 0x09
    301e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3020:	9b 85       	ldd	r25, Y+11	; 0x0b
    3022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9f 83       	std	Y+7, r25	; 0x07
    302c:	8e 83       	std	Y+6, r24	; 0x06
    302e:	8e 81       	ldd	r24, Y+6	; 0x06
    3030:	9f 81       	ldd	r25, Y+7	; 0x07
    3032:	9b 83       	std	Y+3, r25	; 0x03
    3034:	8a 83       	std	Y+2, r24	; 0x02
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	9b 81       	ldd	r25, Y+3	; 0x03
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <CLCD_ShiftDisplayLeft+0x16e>
    303e:	9b 83       	std	Y+3, r25	; 0x03
    3040:	8a 83       	std	Y+2, r24	; 0x02
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <CLCD_ShiftDisplayLeft+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3044:	69 89       	ldd	r22, Y+17	; 0x11
    3046:	7a 89       	ldd	r23, Y+18	; 0x12
    3048:	8b 89       	ldd	r24, Y+19	; 0x13
    304a:	9c 89       	ldd	r25, Y+20	; 0x14
    304c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	88 8b       	std	Y+16, r24	; 0x10
    3056:	88 89       	ldd	r24, Y+16	; 0x10
    3058:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	8a 95       	dec	r24
    305e:	f1 f7       	brne	.-4      	; 0x305c <CLCD_ShiftDisplayLeft+0x190>
    3060:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    3062:	68 96       	adiw	r28, 0x18	; 24
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <CLCD_ShiftDisplayRight>:

void CLCD_ShiftDisplayRight(void)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	68 97       	sbiw	r28, 0x18	; 24
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
	CLCD_SendInstruction(CLCD_CURSOR_OR_DISPLAY_SHIFT | (CLCD_SC_DISPLAY << 3) | ( CLCD_RL_RIGHT << 2));
    3088:	8c e1       	ldi	r24, 0x1C	; 28
    308a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	a8 e4       	ldi	r26, 0x48	; 72
    3094:	b2 e4       	ldi	r27, 0x42	; 66
    3096:	8d 8b       	std	Y+21, r24	; 0x15
    3098:	9e 8b       	std	Y+22, r25	; 0x16
    309a:	af 8b       	std	Y+23, r26	; 0x17
    309c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	2b ea       	ldi	r18, 0xAB	; 171
    30a8:	3a ea       	ldi	r19, 0xAA	; 170
    30aa:	4a e2       	ldi	r20, 0x2A	; 42
    30ac:	50 e4       	ldi	r21, 0x40	; 64
    30ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	89 8b       	std	Y+17, r24	; 0x11
    30b8:	9a 8b       	std	Y+18, r25	; 0x12
    30ba:	ab 8b       	std	Y+19, r26	; 0x13
    30bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30be:	69 89       	ldd	r22, Y+17	; 0x11
    30c0:	7a 89       	ldd	r23, Y+18	; 0x12
    30c2:	8b 89       	ldd	r24, Y+19	; 0x13
    30c4:	9c 89       	ldd	r25, Y+20	; 0x14
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e8       	ldi	r20, 0x80	; 128
    30cc:	5f e3       	ldi	r21, 0x3F	; 63
    30ce:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    30d2:	88 23       	and	r24, r24
    30d4:	1c f4       	brge	.+6      	; 0x30dc <CLCD_ShiftDisplayRight+0x68>
		__ticks = 1;
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	88 8b       	std	Y+16, r24	; 0x10
    30da:	91 c0       	rjmp	.+290    	; 0x31fe <CLCD_ShiftDisplayRight+0x18a>
	else if (__tmp > 255)
    30dc:	69 89       	ldd	r22, Y+17	; 0x11
    30de:	7a 89       	ldd	r23, Y+18	; 0x12
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4f e7       	ldi	r20, 0x7F	; 127
    30ea:	53 e4       	ldi	r21, 0x43	; 67
    30ec:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    30f0:	18 16       	cp	r1, r24
    30f2:	0c f0       	brlt	.+2      	; 0x30f6 <CLCD_ShiftDisplayRight+0x82>
    30f4:	7b c0       	rjmp	.+246    	; 0x31ec <CLCD_ShiftDisplayRight+0x178>
	{
		_delay_ms(__us / 1000.0);
    30f6:	6d 89       	ldd	r22, Y+21	; 0x15
    30f8:	7e 89       	ldd	r23, Y+22	; 0x16
    30fa:	8f 89       	ldd	r24, Y+23	; 0x17
    30fc:	98 8d       	ldd	r25, Y+24	; 0x18
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	4a e7       	ldi	r20, 0x7A	; 122
    3104:	54 e4       	ldi	r21, 0x44	; 68
    3106:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	8c 87       	std	Y+12, r24	; 0x0c
    3110:	9d 87       	std	Y+13, r25	; 0x0d
    3112:	ae 87       	std	Y+14, r26	; 0x0e
    3114:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3116:	6c 85       	ldd	r22, Y+12	; 0x0c
    3118:	7d 85       	ldd	r23, Y+13	; 0x0d
    311a:	8e 85       	ldd	r24, Y+14	; 0x0e
    311c:	9f 85       	ldd	r25, Y+15	; 0x0f
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	88 87       	std	Y+8, r24	; 0x08
    3130:	99 87       	std	Y+9, r25	; 0x09
    3132:	aa 87       	std	Y+10, r26	; 0x0a
    3134:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3136:	68 85       	ldd	r22, Y+8	; 0x08
    3138:	79 85       	ldd	r23, Y+9	; 0x09
    313a:	8a 85       	ldd	r24, Y+10	; 0x0a
    313c:	9b 85       	ldd	r25, Y+11	; 0x0b
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	2c f4       	brge	.+10     	; 0x3158 <CLCD_ShiftDisplayRight+0xe4>
		__ticks = 1;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	9f 83       	std	Y+7, r25	; 0x07
    3154:	8e 83       	std	Y+6, r24	; 0x06
    3156:	3f c0       	rjmp	.+126    	; 0x31d6 <CLCD_ShiftDisplayRight+0x162>
	else if (__tmp > 65535)
    3158:	68 85       	ldd	r22, Y+8	; 0x08
    315a:	79 85       	ldd	r23, Y+9	; 0x09
    315c:	8a 85       	ldd	r24, Y+10	; 0x0a
    315e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	57 e4       	ldi	r21, 0x47	; 71
    3168:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    316c:	18 16       	cp	r1, r24
    316e:	4c f5       	brge	.+82     	; 0x31c2 <CLCD_ShiftDisplayRight+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3170:	6c 85       	ldd	r22, Y+12	; 0x0c
    3172:	7d 85       	ldd	r23, Y+13	; 0x0d
    3174:	8e 85       	ldd	r24, Y+14	; 0x0e
    3176:	9f 85       	ldd	r25, Y+15	; 0x0f
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e2       	ldi	r20, 0x20	; 32
    317e:	51 e4       	ldi	r21, 0x41	; 65
    3180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9f 83       	std	Y+7, r25	; 0x07
    3196:	8e 83       	std	Y+6, r24	; 0x06
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <CLCD_ShiftDisplayRight+0x144>
    319a:	88 ec       	ldi	r24, 0xC8	; 200
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	9d 83       	std	Y+5, r25	; 0x05
    31a0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31a2:	8c 81       	ldd	r24, Y+4	; 0x04
    31a4:	9d 81       	ldd	r25, Y+5	; 0x05
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <CLCD_ShiftDisplayRight+0x132>
    31aa:	9d 83       	std	Y+5, r25	; 0x05
    31ac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	8e 81       	ldd	r24, Y+6	; 0x06
    31b0:	9f 81       	ldd	r25, Y+7	; 0x07
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	9f 83       	std	Y+7, r25	; 0x07
    31b6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ba:	9f 81       	ldd	r25, Y+7	; 0x07
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	69 f7       	brne	.-38     	; 0x319a <CLCD_ShiftDisplayRight+0x126>
    31c0:	24 c0       	rjmp	.+72     	; 0x320a <CLCD_ShiftDisplayRight+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c2:	68 85       	ldd	r22, Y+8	; 0x08
    31c4:	79 85       	ldd	r23, Y+9	; 0x09
    31c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9f 83       	std	Y+7, r25	; 0x07
    31d4:	8e 83       	std	Y+6, r24	; 0x06
    31d6:	8e 81       	ldd	r24, Y+6	; 0x06
    31d8:	9f 81       	ldd	r25, Y+7	; 0x07
    31da:	9b 83       	std	Y+3, r25	; 0x03
    31dc:	8a 83       	std	Y+2, r24	; 0x02
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	9b 81       	ldd	r25, Y+3	; 0x03
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <CLCD_ShiftDisplayRight+0x16e>
    31e6:	9b 83       	std	Y+3, r25	; 0x03
    31e8:	8a 83       	std	Y+2, r24	; 0x02
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <CLCD_ShiftDisplayRight+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31ec:	69 89       	ldd	r22, Y+17	; 0x11
    31ee:	7a 89       	ldd	r23, Y+18	; 0x12
    31f0:	8b 89       	ldd	r24, Y+19	; 0x13
    31f2:	9c 89       	ldd	r25, Y+20	; 0x14
    31f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	88 8b       	std	Y+16, r24	; 0x10
    31fe:	88 89       	ldd	r24, Y+16	; 0x10
    3200:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	8a 95       	dec	r24
    3206:	f1 f7       	brne	.-4      	; 0x3204 <CLCD_ShiftDisplayRight+0x190>
    3208:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    320a:	68 96       	adiw	r28, 0x18	; 24
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <CLCD_PrintChar>:

void CLCD_PrintChar(char Ch)
{
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	0f 92       	push	r0
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	89 83       	std	Y+1, r24	; 0x01
	CLCD_SendData(Ch);
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <CLCD_SendData>
}
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <CLCD_PrintNumber>:
void CLCD_PrintNumber(int16_t Number)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	64 97       	sbiw	r28, 0x14	; 20
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	9c 8b       	std	Y+20, r25	; 0x14
    324c:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t NumberDigitsArray[16];
	uint8_t NumberDigitArrayIndex = 0;
    324e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;
	if(Number < 0)
    3250:	8b 89       	ldd	r24, Y+19	; 0x13
    3252:	9c 89       	ldd	r25, Y+20	; 0x14
    3254:	99 23       	and	r25, r25
    3256:	44 f5       	brge	.+80     	; 0x32a8 <CLCD_PrintNumber+0x72>
	{
		Number *= -1; /*change to positive number*/
    3258:	8b 89       	ldd	r24, Y+19	; 0x13
    325a:	9c 89       	ldd	r25, Y+20	; 0x14
    325c:	90 95       	com	r25
    325e:	81 95       	neg	r24
    3260:	9f 4f       	sbci	r25, 0xFF	; 255
    3262:	9c 8b       	std	Y+20, r25	; 0x14
    3264:	8b 8b       	std	Y+19, r24	; 0x13
		CLCD_PrintChar('-'); /*Print negative sign*/
    3266:	8d e2       	ldi	r24, 0x2D	; 45
    3268:	0e 94 0e 19 	call	0x321c	; 0x321c <CLCD_PrintChar>
    326c:	1d c0       	rjmp	.+58     	; 0x32a8 <CLCD_PrintNumber+0x72>
	}
	while(Number != 0)
	{
		NumberDigitsArray[NumberDigitArrayIndex] = Number % 10;
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	e8 2f       	mov	r30, r24
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	8b 89       	ldd	r24, Y+19	; 0x13
    3276:	9c 89       	ldd	r25, Y+20	; 0x14
    3278:	2a e0       	ldi	r18, 0x0A	; 10
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	b9 01       	movw	r22, r18
    327e:	0e 94 67 29 	call	0x52ce	; 0x52ce <__divmodhi4>
    3282:	28 2f       	mov	r18, r24
    3284:	ce 01       	movw	r24, r28
    3286:	03 96       	adiw	r24, 0x03	; 3
    3288:	e8 0f       	add	r30, r24
    328a:	f9 1f       	adc	r31, r25
    328c:	20 83       	st	Z, r18
		NumberDigitArrayIndex++;
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	8f 5f       	subi	r24, 0xFF	; 255
    3292:	8a 83       	std	Y+2, r24	; 0x02
		Number /= 10;
    3294:	8b 89       	ldd	r24, Y+19	; 0x13
    3296:	9c 89       	ldd	r25, Y+20	; 0x14
    3298:	2a e0       	ldi	r18, 0x0A	; 10
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	b9 01       	movw	r22, r18
    329e:	0e 94 67 29 	call	0x52ce	; 0x52ce <__divmodhi4>
    32a2:	cb 01       	movw	r24, r22
    32a4:	9c 8b       	std	Y+20, r25	; 0x14
    32a6:	8b 8b       	std	Y+19, r24	; 0x13
	if(Number < 0)
	{
		Number *= -1; /*change to positive number*/
		CLCD_PrintChar('-'); /*Print negative sign*/
	}
	while(Number != 0)
    32a8:	8b 89       	ldd	r24, Y+19	; 0x13
    32aa:	9c 89       	ldd	r25, Y+20	; 0x14
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	f9 f6       	brne	.-66     	; 0x326e <CLCD_PrintNumber+0x38>
		NumberDigitsArray[NumberDigitArrayIndex] = Number % 10;
		NumberDigitArrayIndex++;
		Number /= 10;
	}

	if(NumberDigitArrayIndex == 0)
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	88 23       	and	r24, r24
    32b4:	21 f4       	brne	.+8      	; 0x32be <CLCD_PrintNumber+0x88>
	{
		CLCD_PrintChar(0 + '0');
    32b6:	80 e3       	ldi	r24, 0x30	; 48
    32b8:	0e 94 0e 19 	call	0x321c	; 0x321c <CLCD_PrintChar>
    32bc:	18 c0       	rjmp	.+48     	; 0x32ee <CLCD_PrintNumber+0xb8>
	}
	else
	{
		for(i = NumberDigitArrayIndex ; i > 0 ; i--)
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	12 c0       	rjmp	.+36     	; 0x32e8 <CLCD_PrintNumber+0xb2>
		{
			CLCD_PrintChar(NumberDigitsArray[i - 1] + '0');
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9c 01       	movw	r18, r24
    32cc:	21 50       	subi	r18, 0x01	; 1
    32ce:	30 40       	sbci	r19, 0x00	; 0
    32d0:	ce 01       	movw	r24, r28
    32d2:	03 96       	adiw	r24, 0x03	; 3
    32d4:	fc 01       	movw	r30, r24
    32d6:	e2 0f       	add	r30, r18
    32d8:	f3 1f       	adc	r31, r19
    32da:	80 81       	ld	r24, Z
    32dc:	80 5d       	subi	r24, 0xD0	; 208
    32de:	0e 94 0e 19 	call	0x321c	; 0x321c <CLCD_PrintChar>
	{
		CLCD_PrintChar(0 + '0');
	}
	else
	{
		for(i = NumberDigitArrayIndex ; i > 0 ; i--)
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	81 50       	subi	r24, 0x01	; 1
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	88 23       	and	r24, r24
    32ec:	59 f7       	brne	.-42     	; 0x32c4 <CLCD_PrintNumber+0x8e>
		{
			CLCD_PrintChar(NumberDigitsArray[i - 1] + '0');
		}
	}
}
    32ee:	64 96       	adiw	r28, 0x14	; 20
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <CLCD_StoreSpecialCharater>:

void CLCD_StoreSpecialCharater(uint8_t PixelsArray[] , uint8_t Location)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	00 d0       	rcall	.+0      	; 0x3306 <CLCD_StoreSpecialCharater+0x6>
    3306:	00 d0       	rcall	.+0      	; 0x3308 <CLCD_StoreSpecialCharater+0x8>
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	9b 83       	std	Y+3, r25	; 0x03
    330e:	8a 83       	std	Y+2, r24	; 0x02
    3310:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t PixelsArrayIterator = 0;
    3312:	19 82       	std	Y+1, r1	; 0x01
	Location *= 8;
    3314:	8c 81       	ldd	r24, Y+4	; 0x04
    3316:	88 2f       	mov	r24, r24
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	88 0f       	add	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	8c 83       	std	Y+4, r24	; 0x04
	/*Send the CGRAM instruction*/
	CLCD_SendInstruction(CLCD_CGRAM_ADDRESS + Location);
    3328:	8c 81       	ldd	r24, Y+4	; 0x04
    332a:	80 5c       	subi	r24, 0xC0	; 192
    332c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
	for(PixelsArrayIterator = 0 ; PixelsArrayIterator < 7 ; PixelsArrayIterator++)
    3330:	19 82       	std	Y+1, r1	; 0x01
    3332:	0e c0       	rjmp	.+28     	; 0x3350 <CLCD_StoreSpecialCharater+0x50>
	{
		CLCD_SendData(PixelsArray[PixelsArrayIterator]);
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	28 2f       	mov	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	fc 01       	movw	r30, r24
    3340:	e2 0f       	add	r30, r18
    3342:	f3 1f       	adc	r31, r19
    3344:	80 81       	ld	r24, Z
    3346:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <CLCD_SendData>
{
	uint8_t PixelsArrayIterator = 0;
	Location *= 8;
	/*Send the CGRAM instruction*/
	CLCD_SendInstruction(CLCD_CGRAM_ADDRESS + Location);
	for(PixelsArrayIterator = 0 ; PixelsArrayIterator < 7 ; PixelsArrayIterator++)
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	87 30       	cpi	r24, 0x07	; 7
    3354:	78 f3       	brcs	.-34     	; 0x3334 <CLCD_StoreSpecialCharater+0x34>
	{
		CLCD_SendData(PixelsArray[PixelsArrayIterator]);
	}
	/*make the adress counter point to DDRAM*/
	CLCD_SendInstruction(CLCD_DDRAM_ADDRESS);
    3356:	80 e8       	ldi	r24, 0x80	; 128
    3358:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>

}
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <CLCD_PrintSpecialCharacter>:

void CLCD_PrintSpecialCharacter(uint8_t Location)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	0f 92       	push	r0
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	89 83       	std	Y+1, r24	; 0x01
	CLCD_SendData(Location);
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <CLCD_SendData>
}
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	08 95       	ret

00003384 <CLCD_ClearCLCD>:

void CLCD_ClearCLCD(void)
{
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
	CLCD_SendInstruction(CLCD_CLEAR_DISPLAY);
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <CLCD_SendInstruction>
}
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <CLCD_PrintFloat>:

void CLCD_PrintFloat(float32_t Number)
{
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	27 97       	sbiw	r28, 0x07	; 7
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	6c 83       	std	Y+4, r22	; 0x04
    33ae:	7d 83       	std	Y+5, r23	; 0x05
    33b0:	8e 83       	std	Y+6, r24	; 0x06
    33b2:	9f 83       	std	Y+7, r25	; 0x07
	uint16_t IntegerPart = (uint32_t)Number;
    33b4:	6c 81       	ldd	r22, Y+4	; 0x04
    33b6:	7d 81       	ldd	r23, Y+5	; 0x05
    33b8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ba:	9f 81       	ldd	r25, Y+7	; 0x07
    33bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9b 83       	std	Y+3, r25	; 0x03
    33c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t DecimalPart = (uint8_t)((Number - IntegerPart)*100);
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	cc 01       	movw	r24, r24
    33ce:	a0 e0       	ldi	r26, 0x00	; 0
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    33da:	9b 01       	movw	r18, r22
    33dc:	ac 01       	movw	r20, r24
    33de:	6c 81       	ldd	r22, Y+4	; 0x04
    33e0:	7d 81       	ldd	r23, Y+5	; 0x05
    33e2:	8e 81       	ldd	r24, Y+6	; 0x06
    33e4:	9f 81       	ldd	r25, Y+7	; 0x07
    33e6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	48 ec       	ldi	r20, 0xC8	; 200
    33f8:	52 e4       	ldi	r21, 0x42	; 66
    33fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	bc 01       	movw	r22, r24
    3404:	cd 01       	movw	r24, r26
    3406:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_PrintNumber(IntegerPart);
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	9b 81       	ldd	r25, Y+3	; 0x03
    3414:	0e 94 1b 19 	call	0x3236	; 0x3236 <CLCD_PrintNumber>
	CLCD_PrintChar('.');
    3418:	8e e2       	ldi	r24, 0x2E	; 46
    341a:	0e 94 0e 19 	call	0x321c	; 0x321c <CLCD_PrintChar>
	CLCD_PrintNumber(DecimalPart);
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	88 2f       	mov	r24, r24
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	0e 94 1b 19 	call	0x3236	; 0x3236 <CLCD_PrintNumber>

}
    3428:	27 96       	adiw	r28, 0x07	; 7
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	08 95       	ret

0000343a <Calculator_Initiate>:

/*Include App files*/
#include "Calculator.h"

void Calculator_Initiate(void)
{
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
	CLCD_Setup();
    3442:	0e 94 11 0b 	call	0x1622	; 0x1622 <CLCD_Setup>
	KeyPad_Setup();
    3446:	0e 94 3e 22 	call	0x447c	; 0x447c <KeyPad_Setup>
}
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret

00003450 <Calculator_CheckError>:

void Calculator_CheckError(float32_t MathExpressionArr[] , bool *SyntxError , bool *MathError , uint8_t MathExpressionLastIndex)
{
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	60 97       	sbiw	r28, 0x10	; 16
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	9b 83       	std	Y+3, r25	; 0x03
    3466:	8a 83       	std	Y+2, r24	; 0x02
    3468:	7d 83       	std	Y+5, r23	; 0x05
    346a:	6c 83       	std	Y+4, r22	; 0x04
    346c:	5f 83       	std	Y+7, r21	; 0x07
    346e:	4e 83       	std	Y+6, r20	; 0x06
    3470:	28 87       	std	Y+8, r18	; 0x08
	uint8_t i;
	*SyntxError = false;
    3472:	ec 81       	ldd	r30, Y+4	; 0x04
    3474:	fd 81       	ldd	r31, Y+5	; 0x05
    3476:	10 82       	st	Z, r1
	*MathError = false;
    3478:	ee 81       	ldd	r30, Y+6	; 0x06
    347a:	ff 81       	ldd	r31, Y+7	; 0x07
    347c:	10 82       	st	Z, r1

	/*Check for first element*/
	if(MathExpressionArr[0] == '*' || MathExpressionArr[0] == '/')
    347e:	ea 81       	ldd	r30, Y+2	; 0x02
    3480:	fb 81       	ldd	r31, Y+3	; 0x03
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	a2 81       	ldd	r26, Z+2	; 0x02
    3488:	b3 81       	ldd	r27, Z+3	; 0x03
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	48 e2       	ldi	r20, 0x28	; 40
    3494:	52 e4       	ldi	r21, 0x42	; 66
    3496:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    349a:	88 23       	and	r24, r24
    349c:	81 f0       	breq	.+32     	; 0x34be <Calculator_CheckError+0x6e>
    349e:	ea 81       	ldd	r30, Y+2	; 0x02
    34a0:	fb 81       	ldd	r31, Y+3	; 0x03
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	a2 81       	ldd	r26, Z+2	; 0x02
    34a8:	b3 81       	ldd	r27, Z+3	; 0x03
    34aa:	bc 01       	movw	r22, r24
    34ac:	cd 01       	movw	r24, r26
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	4c e3       	ldi	r20, 0x3C	; 60
    34b4:	52 e4       	ldi	r21, 0x42	; 66
    34b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	29 f4       	brne	.+10     	; 0x34c8 <Calculator_CheckError+0x78>
	{
		*SyntxError = true;
    34be:	ec 81       	ldd	r30, Y+4	; 0x04
    34c0:	fd 81       	ldd	r31, Y+5	; 0x05
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	80 83       	st	Z, r24
    34c6:	ee c1       	rjmp	.+988    	; 0x38a4 <Calculator_CheckError+0x454>
	}
	/*check for last element*/
	else if (MathExpressionArr[MathExpressionLastIndex] == '*' || MathExpressionArr[MathExpressionLastIndex] == '/' || MathExpressionArr[MathExpressionLastIndex] == '+' || MathExpressionArr[MathExpressionLastIndex] == '-')
    34c8:	88 85       	ldd	r24, Y+8	; 0x08
    34ca:	88 2f       	mov	r24, r24
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	9c 01       	movw	r18, r24
    34d0:	22 0f       	add	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	22 0f       	add	r18, r18
    34d6:	33 1f       	adc	r19, r19
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	fc 01       	movw	r30, r24
    34de:	e2 0f       	add	r30, r18
    34e0:	f3 1f       	adc	r31, r19
    34e2:	80 81       	ld	r24, Z
    34e4:	91 81       	ldd	r25, Z+1	; 0x01
    34e6:	a2 81       	ldd	r26, Z+2	; 0x02
    34e8:	b3 81       	ldd	r27, Z+3	; 0x03
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	48 e2       	ldi	r20, 0x28	; 40
    34f4:	52 e4       	ldi	r21, 0x42	; 66
    34f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	09 f4       	brne	.+2      	; 0x3500 <Calculator_CheckError+0xb0>
    34fe:	51 c0       	rjmp	.+162    	; 0x35a2 <Calculator_CheckError+0x152>
    3500:	88 85       	ldd	r24, Y+8	; 0x08
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9c 01       	movw	r18, r24
    3508:	22 0f       	add	r18, r18
    350a:	33 1f       	adc	r19, r19
    350c:	22 0f       	add	r18, r18
    350e:	33 1f       	adc	r19, r19
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	9b 81       	ldd	r25, Y+3	; 0x03
    3514:	fc 01       	movw	r30, r24
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	a2 81       	ldd	r26, Z+2	; 0x02
    3520:	b3 81       	ldd	r27, Z+3	; 0x03
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	4c e3       	ldi	r20, 0x3C	; 60
    352c:	52 e4       	ldi	r21, 0x42	; 66
    352e:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    3532:	88 23       	and	r24, r24
    3534:	b1 f1       	breq	.+108    	; 0x35a2 <Calculator_CheckError+0x152>
    3536:	88 85       	ldd	r24, Y+8	; 0x08
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	9c 01       	movw	r18, r24
    353e:	22 0f       	add	r18, r18
    3540:	33 1f       	adc	r19, r19
    3542:	22 0f       	add	r18, r18
    3544:	33 1f       	adc	r19, r19
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	fc 01       	movw	r30, r24
    354c:	e2 0f       	add	r30, r18
    354e:	f3 1f       	adc	r31, r19
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	a2 81       	ldd	r26, Z+2	; 0x02
    3556:	b3 81       	ldd	r27, Z+3	; 0x03
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	4c e2       	ldi	r20, 0x2C	; 44
    3562:	52 e4       	ldi	r21, 0x42	; 66
    3564:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    3568:	88 23       	and	r24, r24
    356a:	d9 f0       	breq	.+54     	; 0x35a2 <Calculator_CheckError+0x152>
    356c:	88 85       	ldd	r24, Y+8	; 0x08
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9c 01       	movw	r18, r24
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	22 0f       	add	r18, r18
    357a:	33 1f       	adc	r19, r19
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	9b 81       	ldd	r25, Y+3	; 0x03
    3580:	fc 01       	movw	r30, r24
    3582:	e2 0f       	add	r30, r18
    3584:	f3 1f       	adc	r31, r19
    3586:	80 81       	ld	r24, Z
    3588:	91 81       	ldd	r25, Z+1	; 0x01
    358a:	a2 81       	ldd	r26, Z+2	; 0x02
    358c:	b3 81       	ldd	r27, Z+3	; 0x03
    358e:	bc 01       	movw	r22, r24
    3590:	cd 01       	movw	r24, r26
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	44 e3       	ldi	r20, 0x34	; 52
    3598:	52 e4       	ldi	r21, 0x42	; 66
    359a:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    359e:	88 23       	and	r24, r24
    35a0:	29 f4       	brne	.+10     	; 0x35ac <Calculator_CheckError+0x15c>
	{
		*SyntxError = true;
    35a2:	ec 81       	ldd	r30, Y+4	; 0x04
    35a4:	fd 81       	ldd	r31, Y+5	; 0x05
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	80 83       	st	Z, r24
    35aa:	7c c1       	rjmp	.+760    	; 0x38a4 <Calculator_CheckError+0x454>
	}
	else
	{
		for(i = 1 ; i < MathExpressionLastIndex - 1 ; i++)
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	89 83       	std	Y+1, r24	; 0x01
    35b0:	6e c1       	rjmp	.+732    	; 0x388e <Calculator_CheckError+0x43e>
		{
			if((MathExpressionArr[i] == '+') && (MathExpressionArr[i+1] == '*'))
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	88 2f       	mov	r24, r24
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9c 01       	movw	r18, r24
    35ba:	22 0f       	add	r18, r18
    35bc:	33 1f       	adc	r19, r19
    35be:	22 0f       	add	r18, r18
    35c0:	33 1f       	adc	r19, r19
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	fc 01       	movw	r30, r24
    35c8:	e2 0f       	add	r30, r18
    35ca:	f3 1f       	adc	r31, r19
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	a2 81       	ldd	r26, Z+2	; 0x02
    35d2:	b3 81       	ldd	r27, Z+3	; 0x03
    35d4:	18 8a       	std	Y+16, r1	; 0x10
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4c e2       	ldi	r20, 0x2C	; 44
    35e0:	52 e4       	ldi	r21, 0x42	; 66
    35e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    35e6:	88 23       	and	r24, r24
    35e8:	11 f4       	brne	.+4      	; 0x35ee <Calculator_CheckError+0x19e>
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	88 8b       	std	Y+16, r24	; 0x10
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	98 89       	ldd	r25, Y+16	; 0x10
    35f2:	89 27       	eor	r24, r25
    35f4:	88 23       	and	r24, r24
    35f6:	49 f5       	brne	.+82     	; 0x364a <Calculator_CheckError+0x1fa>
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	88 2f       	mov	r24, r24
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	9c 01       	movw	r18, r24
    3602:	22 0f       	add	r18, r18
    3604:	33 1f       	adc	r19, r19
    3606:	22 0f       	add	r18, r18
    3608:	33 1f       	adc	r19, r19
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	9b 81       	ldd	r25, Y+3	; 0x03
    360e:	fc 01       	movw	r30, r24
    3610:	e2 0f       	add	r30, r18
    3612:	f3 1f       	adc	r31, r19
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	a2 81       	ldd	r26, Z+2	; 0x02
    361a:	b3 81       	ldd	r27, Z+3	; 0x03
    361c:	1f 86       	std	Y+15, r1	; 0x0f
    361e:	bc 01       	movw	r22, r24
    3620:	cd 01       	movw	r24, r26
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	48 e2       	ldi	r20, 0x28	; 40
    3628:	52 e4       	ldi	r21, 0x42	; 66
    362a:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    362e:	88 23       	and	r24, r24
    3630:	11 f4       	brne	.+4      	; 0x3636 <Calculator_CheckError+0x1e6>
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	8f 87       	std	Y+15, r24	; 0x0f
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	9f 85       	ldd	r25, Y+15	; 0x0f
    363a:	89 27       	eor	r24, r25
    363c:	88 23       	and	r24, r24
    363e:	29 f4       	brne	.+10     	; 0x364a <Calculator_CheckError+0x1fa>
			{
				*SyntxError = true;
    3640:	ec 81       	ldd	r30, Y+4	; 0x04
    3642:	fd 81       	ldd	r31, Y+5	; 0x05
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	80 83       	st	Z, r24
    3648:	2d c1       	rjmp	.+602    	; 0x38a4 <Calculator_CheckError+0x454>
				break;
			}
			else if((MathExpressionArr[i] == '-') && (MathExpressionArr[i+1] == '*'))
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	88 2f       	mov	r24, r24
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	9c 01       	movw	r18, r24
    3652:	22 0f       	add	r18, r18
    3654:	33 1f       	adc	r19, r19
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	9b 81       	ldd	r25, Y+3	; 0x03
    365e:	fc 01       	movw	r30, r24
    3660:	e2 0f       	add	r30, r18
    3662:	f3 1f       	adc	r31, r19
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	a2 81       	ldd	r26, Z+2	; 0x02
    366a:	b3 81       	ldd	r27, Z+3	; 0x03
    366c:	1e 86       	std	Y+14, r1	; 0x0e
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	44 e3       	ldi	r20, 0x34	; 52
    3678:	52 e4       	ldi	r21, 0x42	; 66
    367a:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    367e:	88 23       	and	r24, r24
    3680:	11 f4       	brne	.+4      	; 0x3686 <Calculator_CheckError+0x236>
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	8e 87       	std	Y+14, r24	; 0x0e
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	89 27       	eor	r24, r25
    368c:	88 23       	and	r24, r24
    368e:	49 f5       	brne	.+82     	; 0x36e2 <Calculator_CheckError+0x292>
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	88 2f       	mov	r24, r24
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	9c 01       	movw	r18, r24
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	22 0f       	add	r18, r18
    36a0:	33 1f       	adc	r19, r19
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	fc 01       	movw	r30, r24
    36a8:	e2 0f       	add	r30, r18
    36aa:	f3 1f       	adc	r31, r19
    36ac:	80 81       	ld	r24, Z
    36ae:	91 81       	ldd	r25, Z+1	; 0x01
    36b0:	a2 81       	ldd	r26, Z+2	; 0x02
    36b2:	b3 81       	ldd	r27, Z+3	; 0x03
    36b4:	1d 86       	std	Y+13, r1	; 0x0d
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	48 e2       	ldi	r20, 0x28	; 40
    36c0:	52 e4       	ldi	r21, 0x42	; 66
    36c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    36c6:	88 23       	and	r24, r24
    36c8:	11 f4       	brne	.+4      	; 0x36ce <Calculator_CheckError+0x27e>
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	8d 87       	std	Y+13, r24	; 0x0d
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    36d2:	89 27       	eor	r24, r25
    36d4:	88 23       	and	r24, r24
    36d6:	29 f4       	brne	.+10     	; 0x36e2 <Calculator_CheckError+0x292>
			{
				*SyntxError = true;
    36d8:	ec 81       	ldd	r30, Y+4	; 0x04
    36da:	fd 81       	ldd	r31, Y+5	; 0x05
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	80 83       	st	Z, r24
    36e0:	e1 c0       	rjmp	.+450    	; 0x38a4 <Calculator_CheckError+0x454>
				break;
			}
			else if((MathExpressionArr[i] == '-') && (MathExpressionArr[i+1] == '/'))
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9c 01       	movw	r18, r24
    36ea:	22 0f       	add	r18, r18
    36ec:	33 1f       	adc	r19, r19
    36ee:	22 0f       	add	r18, r18
    36f0:	33 1f       	adc	r19, r19
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	9b 81       	ldd	r25, Y+3	; 0x03
    36f6:	fc 01       	movw	r30, r24
    36f8:	e2 0f       	add	r30, r18
    36fa:	f3 1f       	adc	r31, r19
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	a2 81       	ldd	r26, Z+2	; 0x02
    3702:	b3 81       	ldd	r27, Z+3	; 0x03
    3704:	1c 86       	std	Y+12, r1	; 0x0c
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	44 e3       	ldi	r20, 0x34	; 52
    3710:	52 e4       	ldi	r21, 0x42	; 66
    3712:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    3716:	88 23       	and	r24, r24
    3718:	11 f4       	brne	.+4      	; 0x371e <Calculator_CheckError+0x2ce>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	8c 87       	std	Y+12, r24	; 0x0c
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	9c 85       	ldd	r25, Y+12	; 0x0c
    3722:	89 27       	eor	r24, r25
    3724:	88 23       	and	r24, r24
    3726:	49 f5       	brne	.+82     	; 0x377a <Calculator_CheckError+0x32a>
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	88 2f       	mov	r24, r24
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	9c 01       	movw	r18, r24
    3732:	22 0f       	add	r18, r18
    3734:	33 1f       	adc	r19, r19
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	fc 01       	movw	r30, r24
    3740:	e2 0f       	add	r30, r18
    3742:	f3 1f       	adc	r31, r19
    3744:	80 81       	ld	r24, Z
    3746:	91 81       	ldd	r25, Z+1	; 0x01
    3748:	a2 81       	ldd	r26, Z+2	; 0x02
    374a:	b3 81       	ldd	r27, Z+3	; 0x03
    374c:	1b 86       	std	Y+11, r1	; 0x0b
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	4c e3       	ldi	r20, 0x3C	; 60
    3758:	52 e4       	ldi	r21, 0x42	; 66
    375a:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    375e:	88 23       	and	r24, r24
    3760:	11 f4       	brne	.+4      	; 0x3766 <Calculator_CheckError+0x316>
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	8b 87       	std	Y+11, r24	; 0x0b
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	9b 85       	ldd	r25, Y+11	; 0x0b
    376a:	89 27       	eor	r24, r25
    376c:	88 23       	and	r24, r24
    376e:	29 f4       	brne	.+10     	; 0x377a <Calculator_CheckError+0x32a>
			{
				*SyntxError = true;
    3770:	ec 81       	ldd	r30, Y+4	; 0x04
    3772:	fd 81       	ldd	r31, Y+5	; 0x05
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	80 83       	st	Z, r24
    3778:	95 c0       	rjmp	.+298    	; 0x38a4 <Calculator_CheckError+0x454>
				break;
			}
			else if((MathExpressionArr[i] == '-') && (MathExpressionArr[i+1] == '*'))
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	88 2f       	mov	r24, r24
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	9c 01       	movw	r18, r24
    3782:	22 0f       	add	r18, r18
    3784:	33 1f       	adc	r19, r19
    3786:	22 0f       	add	r18, r18
    3788:	33 1f       	adc	r19, r19
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	9b 81       	ldd	r25, Y+3	; 0x03
    378e:	fc 01       	movw	r30, r24
    3790:	e2 0f       	add	r30, r18
    3792:	f3 1f       	adc	r31, r19
    3794:	80 81       	ld	r24, Z
    3796:	91 81       	ldd	r25, Z+1	; 0x01
    3798:	a2 81       	ldd	r26, Z+2	; 0x02
    379a:	b3 81       	ldd	r27, Z+3	; 0x03
    379c:	1a 86       	std	Y+10, r1	; 0x0a
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	44 e3       	ldi	r20, 0x34	; 52
    37a8:	52 e4       	ldi	r21, 0x42	; 66
    37aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	11 f4       	brne	.+4      	; 0x37b6 <Calculator_CheckError+0x366>
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	8a 87       	std	Y+10, r24	; 0x0a
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ba:	89 27       	eor	r24, r25
    37bc:	88 23       	and	r24, r24
    37be:	49 f5       	brne	.+82     	; 0x3812 <Calculator_CheckError+0x3c2>
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	88 2f       	mov	r24, r24
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	01 96       	adiw	r24, 0x01	; 1
    37c8:	9c 01       	movw	r18, r24
    37ca:	22 0f       	add	r18, r18
    37cc:	33 1f       	adc	r19, r19
    37ce:	22 0f       	add	r18, r18
    37d0:	33 1f       	adc	r19, r19
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	9b 81       	ldd	r25, Y+3	; 0x03
    37d6:	fc 01       	movw	r30, r24
    37d8:	e2 0f       	add	r30, r18
    37da:	f3 1f       	adc	r31, r19
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	a2 81       	ldd	r26, Z+2	; 0x02
    37e2:	b3 81       	ldd	r27, Z+3	; 0x03
    37e4:	19 86       	std	Y+9, r1	; 0x09
    37e6:	bc 01       	movw	r22, r24
    37e8:	cd 01       	movw	r24, r26
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	48 e2       	ldi	r20, 0x28	; 40
    37f0:	52 e4       	ldi	r21, 0x42	; 66
    37f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	11 f4       	brne	.+4      	; 0x37fe <Calculator_CheckError+0x3ae>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	89 87       	std	Y+9, r24	; 0x09
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	99 85       	ldd	r25, Y+9	; 0x09
    3802:	89 27       	eor	r24, r25
    3804:	88 23       	and	r24, r24
    3806:	29 f4       	brne	.+10     	; 0x3812 <Calculator_CheckError+0x3c2>
			{
				*SyntxError = true;
    3808:	ec 81       	ldd	r30, Y+4	; 0x04
    380a:	fd 81       	ldd	r31, Y+5	; 0x05
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	80 83       	st	Z, r24
    3810:	49 c0       	rjmp	.+146    	; 0x38a4 <Calculator_CheckError+0x454>
				break;
			}
			else if ((MathExpressionArr[i] == '/') && (MathExpressionArr[i+1] == 0))
    3812:	89 81       	ldd	r24, Y+1	; 0x01
    3814:	88 2f       	mov	r24, r24
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9c 01       	movw	r18, r24
    381a:	22 0f       	add	r18, r18
    381c:	33 1f       	adc	r19, r19
    381e:	22 0f       	add	r18, r18
    3820:	33 1f       	adc	r19, r19
    3822:	8a 81       	ldd	r24, Y+2	; 0x02
    3824:	9b 81       	ldd	r25, Y+3	; 0x03
    3826:	fc 01       	movw	r30, r24
    3828:	e2 0f       	add	r30, r18
    382a:	f3 1f       	adc	r31, r19
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	a2 81       	ldd	r26, Z+2	; 0x02
    3832:	b3 81       	ldd	r27, Z+3	; 0x03
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	4c e3       	ldi	r20, 0x3C	; 60
    383e:	52 e4       	ldi	r21, 0x42	; 66
    3840:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    3844:	88 23       	and	r24, r24
    3846:	01 f5       	brne	.+64     	; 0x3888 <Calculator_CheckError+0x438>
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	88 2f       	mov	r24, r24
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	01 96       	adiw	r24, 0x01	; 1
    3850:	9c 01       	movw	r18, r24
    3852:	22 0f       	add	r18, r18
    3854:	33 1f       	adc	r19, r19
    3856:	22 0f       	add	r18, r18
    3858:	33 1f       	adc	r19, r19
    385a:	8a 81       	ldd	r24, Y+2	; 0x02
    385c:	9b 81       	ldd	r25, Y+3	; 0x03
    385e:	fc 01       	movw	r30, r24
    3860:	e2 0f       	add	r30, r18
    3862:	f3 1f       	adc	r31, r19
    3864:	80 81       	ld	r24, Z
    3866:	91 81       	ldd	r25, Z+1	; 0x01
    3868:	a2 81       	ldd	r26, Z+2	; 0x02
    386a:	b3 81       	ldd	r27, Z+3	; 0x03
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e0       	ldi	r20, 0x00	; 0
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    387c:	88 23       	and	r24, r24
    387e:	21 f4       	brne	.+8      	; 0x3888 <Calculator_CheckError+0x438>
			{
				*MathError = true;
    3880:	ee 81       	ldd	r30, Y+6	; 0x06
    3882:	ff 81       	ldd	r31, Y+7	; 0x07
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	80 83       	st	Z, r24
	{
		*SyntxError = true;
	}
	else
	{
		for(i = 1 ; i < MathExpressionLastIndex - 1 ; i++)
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	8f 5f       	subi	r24, 0xFF	; 255
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	28 2f       	mov	r18, r24
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	88 85       	ldd	r24, Y+8	; 0x08
    3896:	88 2f       	mov	r24, r24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	28 17       	cp	r18, r24
    389e:	39 07       	cpc	r19, r25
    38a0:	0c f4       	brge	.+2      	; 0x38a4 <Calculator_CheckError+0x454>
    38a2:	87 ce       	rjmp	.-754    	; 0x35b2 <Calculator_CheckError+0x162>
			{
				*MathError = true;
			}
		}
	}
}
    38a4:	60 96       	adiw	r28, 0x10	; 16
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <Calculator_Evaluate>:

void Calculator_Evaluate(float32_t FirstNumber , uint8_t Operator , float32_t SecondNumber , float32_t *Result)
{
    38b6:	ef 92       	push	r14
    38b8:	ff 92       	push	r15
    38ba:	0f 93       	push	r16
    38bc:	1f 93       	push	r17
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	2d 97       	sbiw	r28, 0x0d	; 13
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
    38d2:	69 83       	std	Y+1, r22	; 0x01
    38d4:	7a 83       	std	Y+2, r23	; 0x02
    38d6:	8b 83       	std	Y+3, r24	; 0x03
    38d8:	9c 83       	std	Y+4, r25	; 0x04
    38da:	4d 83       	std	Y+5, r20	; 0x05
    38dc:	0e 83       	std	Y+6, r16	; 0x06
    38de:	1f 83       	std	Y+7, r17	; 0x07
    38e0:	28 87       	std	Y+8, r18	; 0x08
    38e2:	39 87       	std	Y+9, r19	; 0x09
    38e4:	fb 86       	std	Y+11, r15	; 0x0b
    38e6:	ea 86       	std	Y+10, r14	; 0x0a
	switch (Operator)
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	28 2f       	mov	r18, r24
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	3d 87       	std	Y+13, r19	; 0x0d
    38f0:	2c 87       	std	Y+12, r18	; 0x0c
    38f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    38f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    38f6:	8b 32       	cpi	r24, 0x2B	; 43
    38f8:	91 05       	cpc	r25, r1
    38fa:	b1 f0       	breq	.+44     	; 0x3928 <Calculator_Evaluate+0x72>
    38fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    38fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3900:	2c 32       	cpi	r18, 0x2C	; 44
    3902:	31 05       	cpc	r19, r1
    3904:	34 f4       	brge	.+12     	; 0x3912 <Calculator_Evaluate+0x5c>
    3906:	8c 85       	ldd	r24, Y+12	; 0x0c
    3908:	9d 85       	ldd	r25, Y+13	; 0x0d
    390a:	8a 32       	cpi	r24, 0x2A	; 42
    390c:	91 05       	cpc	r25, r1
    390e:	91 f1       	breq	.+100    	; 0x3974 <Calculator_Evaluate+0xbe>
    3910:	56 c0       	rjmp	.+172    	; 0x39be <Calculator_Evaluate+0x108>
    3912:	2c 85       	ldd	r18, Y+12	; 0x0c
    3914:	3d 85       	ldd	r19, Y+13	; 0x0d
    3916:	2d 32       	cpi	r18, 0x2D	; 45
    3918:	31 05       	cpc	r19, r1
    391a:	c9 f0       	breq	.+50     	; 0x394e <Calculator_Evaluate+0x98>
    391c:	8c 85       	ldd	r24, Y+12	; 0x0c
    391e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3920:	8f 32       	cpi	r24, 0x2F	; 47
    3922:	91 05       	cpc	r25, r1
    3924:	d1 f1       	breq	.+116    	; 0x399a <Calculator_Evaluate+0xe4>
    3926:	4b c0       	rjmp	.+150    	; 0x39be <Calculator_Evaluate+0x108>
	{
	case '+': *Result = FirstNumber + SecondNumber; break;
    3928:	69 81       	ldd	r22, Y+1	; 0x01
    392a:	7a 81       	ldd	r23, Y+2	; 0x02
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	9c 81       	ldd	r25, Y+4	; 0x04
    3930:	2e 81       	ldd	r18, Y+6	; 0x06
    3932:	3f 81       	ldd	r19, Y+7	; 0x07
    3934:	48 85       	ldd	r20, Y+8	; 0x08
    3936:	59 85       	ldd	r21, Y+9	; 0x09
    3938:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	ea 85       	ldd	r30, Y+10	; 0x0a
    3942:	fb 85       	ldd	r31, Y+11	; 0x0b
    3944:	80 83       	st	Z, r24
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	a2 83       	std	Z+2, r26	; 0x02
    394a:	b3 83       	std	Z+3, r27	; 0x03
    394c:	38 c0       	rjmp	.+112    	; 0x39be <Calculator_Evaluate+0x108>
	case '-': *Result = FirstNumber - SecondNumber; break;
    394e:	69 81       	ldd	r22, Y+1	; 0x01
    3950:	7a 81       	ldd	r23, Y+2	; 0x02
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	2e 81       	ldd	r18, Y+6	; 0x06
    3958:	3f 81       	ldd	r19, Y+7	; 0x07
    395a:	48 85       	ldd	r20, Y+8	; 0x08
    395c:	59 85       	ldd	r21, Y+9	; 0x09
    395e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	ea 85       	ldd	r30, Y+10	; 0x0a
    3968:	fb 85       	ldd	r31, Y+11	; 0x0b
    396a:	80 83       	st	Z, r24
    396c:	91 83       	std	Z+1, r25	; 0x01
    396e:	a2 83       	std	Z+2, r26	; 0x02
    3970:	b3 83       	std	Z+3, r27	; 0x03
    3972:	25 c0       	rjmp	.+74     	; 0x39be <Calculator_Evaluate+0x108>
	case '*': *Result = FirstNumber * SecondNumber; break;
    3974:	69 81       	ldd	r22, Y+1	; 0x01
    3976:	7a 81       	ldd	r23, Y+2	; 0x02
    3978:	8b 81       	ldd	r24, Y+3	; 0x03
    397a:	9c 81       	ldd	r25, Y+4	; 0x04
    397c:	2e 81       	ldd	r18, Y+6	; 0x06
    397e:	3f 81       	ldd	r19, Y+7	; 0x07
    3980:	48 85       	ldd	r20, Y+8	; 0x08
    3982:	59 85       	ldd	r21, Y+9	; 0x09
    3984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	ea 85       	ldd	r30, Y+10	; 0x0a
    398e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3990:	80 83       	st	Z, r24
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	a2 83       	std	Z+2, r26	; 0x02
    3996:	b3 83       	std	Z+3, r27	; 0x03
    3998:	12 c0       	rjmp	.+36     	; 0x39be <Calculator_Evaluate+0x108>
	case '/': *Result = (float32_t)FirstNumber / SecondNumber; break;
    399a:	69 81       	ldd	r22, Y+1	; 0x01
    399c:	7a 81       	ldd	r23, Y+2	; 0x02
    399e:	8b 81       	ldd	r24, Y+3	; 0x03
    39a0:	9c 81       	ldd	r25, Y+4	; 0x04
    39a2:	2e 81       	ldd	r18, Y+6	; 0x06
    39a4:	3f 81       	ldd	r19, Y+7	; 0x07
    39a6:	48 85       	ldd	r20, Y+8	; 0x08
    39a8:	59 85       	ldd	r21, Y+9	; 0x09
    39aa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    39b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    39b6:	80 83       	st	Z, r24
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	a2 83       	std	Z+2, r26	; 0x02
    39bc:	b3 83       	std	Z+3, r27	; 0x03
	default : break;
	}
}
    39be:	2d 96       	adiw	r28, 0x0d	; 13
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	ef 90       	pop	r14
    39d6:	08 95       	ret

000039d8 <Calculator_PriorityCheck>:

uint8_t Calculator_PriorityCheck(uint8_t Operand)
{
    39d8:	df 93       	push	r29
    39da:	cf 93       	push	r28
    39dc:	00 d0       	rcall	.+0      	; 0x39de <Calculator_PriorityCheck+0x6>
    39de:	00 d0       	rcall	.+0      	; 0x39e0 <Calculator_PriorityCheck+0x8>
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ReturnVal;
	switch(Operand)
    39e6:	8a 81       	ldd	r24, Y+2	; 0x02
    39e8:	28 2f       	mov	r18, r24
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	3c 83       	std	Y+4, r19	; 0x04
    39ee:	2b 83       	std	Y+3, r18	; 0x03
    39f0:	8b 81       	ldd	r24, Y+3	; 0x03
    39f2:	9c 81       	ldd	r25, Y+4	; 0x04
    39f4:	8b 32       	cpi	r24, 0x2B	; 43
    39f6:	91 05       	cpc	r25, r1
    39f8:	b1 f0       	breq	.+44     	; 0x3a26 <Calculator_PriorityCheck+0x4e>
    39fa:	2b 81       	ldd	r18, Y+3	; 0x03
    39fc:	3c 81       	ldd	r19, Y+4	; 0x04
    39fe:	2c 32       	cpi	r18, 0x2C	; 44
    3a00:	31 05       	cpc	r19, r1
    3a02:	34 f4       	brge	.+12     	; 0x3a10 <Calculator_PriorityCheck+0x38>
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
    3a06:	9c 81       	ldd	r25, Y+4	; 0x04
    3a08:	8a 32       	cpi	r24, 0x2A	; 42
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	79 f0       	breq	.+30     	; 0x3a2c <Calculator_PriorityCheck+0x54>
    3a0e:	11 c0       	rjmp	.+34     	; 0x3a32 <Calculator_PriorityCheck+0x5a>
    3a10:	2b 81       	ldd	r18, Y+3	; 0x03
    3a12:	3c 81       	ldd	r19, Y+4	; 0x04
    3a14:	2d 32       	cpi	r18, 0x2D	; 45
    3a16:	31 05       	cpc	r19, r1
    3a18:	31 f0       	breq	.+12     	; 0x3a26 <Calculator_PriorityCheck+0x4e>
    3a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1e:	8f 32       	cpi	r24, 0x2F	; 47
    3a20:	91 05       	cpc	r25, r1
    3a22:	21 f0       	breq	.+8      	; 0x3a2c <Calculator_PriorityCheck+0x54>
    3a24:	06 c0       	rjmp	.+12     	; 0x3a32 <Calculator_PriorityCheck+0x5a>
	{
	case '+':
	case '-':
		ReturnVal = 1;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	89 83       	std	Y+1, r24	; 0x01
    3a2a:	04 c0       	rjmp	.+8      	; 0x3a34 <Calculator_PriorityCheck+0x5c>
		break;
	case '*':
	case '/':
		ReturnVal = 2;
    3a2c:	82 e0       	ldi	r24, 0x02	; 2
    3a2e:	89 83       	std	Y+1, r24	; 0x01
    3a30:	01 c0       	rjmp	.+2      	; 0x3a34 <Calculator_PriorityCheck+0x5c>
		break;
	default:
		ReturnVal = 0;
    3a32:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return ReturnVal;
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <DIO_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO.h"


Error_t DIO_SetPinDirection(uint8_t Port ,uint8_t PinNumber , uint8_t Direction)
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	2a 97       	sbiw	r28, 0x0a	; 10
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	8a 83       	std	Y+2, r24	; 0x02
    3a5a:	6b 83       	std	Y+3, r22	; 0x03
    3a5c:	4c 83       	std	Y+4, r20	; 0x04
	Error_t ReturnError = NoError;
    3a5e:	19 82       	std	Y+1, r1	; 0x01
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	88 30       	cpi	r24, 0x08	; 8
    3a64:	18 f0       	brcs	.+6      	; 0x3a6c <DIO_SetPinDirection+0x28>
	{
		ReturnError = FunctionParameterError;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	03 c2       	rjmp	.+1030   	; 0x3e72 <DIO_SetPinDirection+0x42e>
	}
	else
	{
		if(Direction == DIO_OUTPUT_PIN)
    3a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6e:	81 30       	cpi	r24, 0x01	; 1
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <DIO_SetPinDirection+0x30>
    3a72:	73 c0       	rjmp	.+230    	; 0x3b5a <DIO_SetPinDirection+0x116>
		{
			switch(Port)
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	28 2f       	mov	r18, r24
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	3a 87       	std	Y+10, r19	; 0x0a
    3a7c:	29 87       	std	Y+9, r18	; 0x09
    3a7e:	89 85       	ldd	r24, Y+9	; 0x09
    3a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a82:	82 30       	cpi	r24, 0x02	; 2
    3a84:	91 05       	cpc	r25, r1
    3a86:	51 f1       	breq	.+84     	; 0x3adc <DIO_SetPinDirection+0x98>
    3a88:	29 85       	ldd	r18, Y+9	; 0x09
    3a8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a8c:	23 30       	cpi	r18, 0x03	; 3
    3a8e:	31 05       	cpc	r19, r1
    3a90:	34 f4       	brge	.+12     	; 0x3a9e <DIO_SetPinDirection+0x5a>
    3a92:	89 85       	ldd	r24, Y+9	; 0x09
    3a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a96:	81 30       	cpi	r24, 0x01	; 1
    3a98:	91 05       	cpc	r25, r1
    3a9a:	61 f0       	breq	.+24     	; 0x3ab4 <DIO_SetPinDirection+0x70>
    3a9c:	5b c0       	rjmp	.+182    	; 0x3b54 <DIO_SetPinDirection+0x110>
    3a9e:	29 85       	ldd	r18, Y+9	; 0x09
    3aa0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3aa2:	23 30       	cpi	r18, 0x03	; 3
    3aa4:	31 05       	cpc	r19, r1
    3aa6:	71 f1       	breq	.+92     	; 0x3b04 <DIO_SetPinDirection+0xc0>
    3aa8:	89 85       	ldd	r24, Y+9	; 0x09
    3aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aac:	84 30       	cpi	r24, 0x04	; 4
    3aae:	91 05       	cpc	r25, r1
    3ab0:	e9 f1       	breq	.+122    	; 0x3b2c <DIO_SetPinDirection+0xe8>
    3ab2:	50 c0       	rjmp	.+160    	; 0x3b54 <DIO_SetPinDirection+0x110>
			{
			case PORTA : SET_BIT(DDRA_REG,PinNumber); break;
    3ab4:	aa e3       	ldi	r26, 0x3A	; 58
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	ea e3       	ldi	r30, 0x3A	; 58
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	48 2f       	mov	r20, r24
    3ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac2:	28 2f       	mov	r18, r24
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	02 2e       	mov	r0, r18
    3acc:	02 c0       	rjmp	.+4      	; 0x3ad2 <DIO_SetPinDirection+0x8e>
    3ace:	88 0f       	add	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	0a 94       	dec	r0
    3ad4:	e2 f7       	brpl	.-8      	; 0x3ace <DIO_SetPinDirection+0x8a>
    3ad6:	84 2b       	or	r24, r20
    3ad8:	8c 93       	st	X, r24
    3ada:	cb c1       	rjmp	.+918    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTB : SET_BIT(DDRB_REG,PinNumber); break;
    3adc:	a7 e3       	ldi	r26, 0x37	; 55
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	e7 e3       	ldi	r30, 0x37	; 55
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	80 81       	ld	r24, Z
    3ae6:	48 2f       	mov	r20, r24
    3ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aea:	28 2f       	mov	r18, r24
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	02 2e       	mov	r0, r18
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <DIO_SetPinDirection+0xb6>
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	0a 94       	dec	r0
    3afc:	e2 f7       	brpl	.-8      	; 0x3af6 <DIO_SetPinDirection+0xb2>
    3afe:	84 2b       	or	r24, r20
    3b00:	8c 93       	st	X, r24
    3b02:	b7 c1       	rjmp	.+878    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTC : SET_BIT(DDRC_REG,PinNumber); break;
    3b04:	a4 e3       	ldi	r26, 0x34	; 52
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e4 e3       	ldi	r30, 0x34	; 52
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	48 2f       	mov	r20, r24
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	28 2f       	mov	r18, r24
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	02 2e       	mov	r0, r18
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <DIO_SetPinDirection+0xde>
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	0a 94       	dec	r0
    3b24:	e2 f7       	brpl	.-8      	; 0x3b1e <DIO_SetPinDirection+0xda>
    3b26:	84 2b       	or	r24, r20
    3b28:	8c 93       	st	X, r24
    3b2a:	a3 c1       	rjmp	.+838    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTD : SET_BIT(DDRD_REG,PinNumber); break;
    3b2c:	a1 e3       	ldi	r26, 0x31	; 49
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	e1 e3       	ldi	r30, 0x31	; 49
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	48 2f       	mov	r20, r24
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	02 2e       	mov	r0, r18
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <DIO_SetPinDirection+0x106>
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	0a 94       	dec	r0
    3b4c:	e2 f7       	brpl	.-8      	; 0x3b46 <DIO_SetPinDirection+0x102>
    3b4e:	84 2b       	or	r24, r20
    3b50:	8c 93       	st	X, r24
    3b52:	8f c1       	rjmp	.+798    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			default : ReturnError = FunctionParameterError; break;
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	89 83       	std	Y+1, r24	; 0x01
    3b58:	8c c1       	rjmp	.+792    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			}
		}
		else if (Direction == DIO_INPUT_PIN)
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5c:	82 30       	cpi	r24, 0x02	; 2
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <DIO_SetPinDirection+0x11e>
    3b60:	c3 c0       	rjmp	.+390    	; 0x3ce8 <DIO_SetPinDirection+0x2a4>
		{
			switch(Port)
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	28 2f       	mov	r18, r24
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	38 87       	std	Y+8, r19	; 0x08
    3b6a:	2f 83       	std	Y+7, r18	; 0x07
    3b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6e:	98 85       	ldd	r25, Y+8	; 0x08
    3b70:	82 30       	cpi	r24, 0x02	; 2
    3b72:	91 05       	cpc	r25, r1
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <DIO_SetPinDirection+0x134>
    3b76:	40 c0       	rjmp	.+128    	; 0x3bf8 <DIO_SetPinDirection+0x1b4>
    3b78:	2f 81       	ldd	r18, Y+7	; 0x07
    3b7a:	38 85       	ldd	r19, Y+8	; 0x08
    3b7c:	23 30       	cpi	r18, 0x03	; 3
    3b7e:	31 05       	cpc	r19, r1
    3b80:	34 f4       	brge	.+12     	; 0x3b8e <DIO_SetPinDirection+0x14a>
    3b82:	8f 81       	ldd	r24, Y+7	; 0x07
    3b84:	98 85       	ldd	r25, Y+8	; 0x08
    3b86:	81 30       	cpi	r24, 0x01	; 1
    3b88:	91 05       	cpc	r25, r1
    3b8a:	71 f0       	breq	.+28     	; 0x3ba8 <DIO_SetPinDirection+0x164>
    3b8c:	72 c1       	rjmp	.+740    	; 0x3e72 <DIO_SetPinDirection+0x42e>
    3b8e:	2f 81       	ldd	r18, Y+7	; 0x07
    3b90:	38 85       	ldd	r19, Y+8	; 0x08
    3b92:	23 30       	cpi	r18, 0x03	; 3
    3b94:	31 05       	cpc	r19, r1
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <DIO_SetPinDirection+0x156>
    3b98:	57 c0       	rjmp	.+174    	; 0x3c48 <DIO_SetPinDirection+0x204>
    3b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b9c:	98 85       	ldd	r25, Y+8	; 0x08
    3b9e:	84 30       	cpi	r24, 0x04	; 4
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <DIO_SetPinDirection+0x162>
    3ba4:	79 c0       	rjmp	.+242    	; 0x3c98 <DIO_SetPinDirection+0x254>
    3ba6:	65 c1       	rjmp	.+714    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); CLEAR_BIT(PORTA_REG,PinNumber); break;
    3ba8:	aa e3       	ldi	r26, 0x3A	; 58
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	ea e3       	ldi	r30, 0x3A	; 58
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	80 81       	ld	r24, Z
    3bb2:	48 2f       	mov	r20, r24
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <DIO_SetPinDirection+0x180>
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	2a 95       	dec	r18
    3bc6:	e2 f7       	brpl	.-8      	; 0x3bc0 <DIO_SetPinDirection+0x17c>
    3bc8:	80 95       	com	r24
    3bca:	84 23       	and	r24, r20
    3bcc:	8c 93       	st	X, r24
    3bce:	ab e3       	ldi	r26, 0x3B	; 59
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	eb e3       	ldi	r30, 0x3B	; 59
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	80 81       	ld	r24, Z
    3bd8:	48 2f       	mov	r20, r24
    3bda:	8b 81       	ldd	r24, Y+3	; 0x03
    3bdc:	28 2f       	mov	r18, r24
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	02 2e       	mov	r0, r18
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <DIO_SetPinDirection+0x1a8>
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	0a 94       	dec	r0
    3bee:	e2 f7       	brpl	.-8      	; 0x3be8 <DIO_SetPinDirection+0x1a4>
    3bf0:	80 95       	com	r24
    3bf2:	84 23       	and	r24, r20
    3bf4:	8c 93       	st	X, r24
    3bf6:	3d c1       	rjmp	.+634    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); CLEAR_BIT(PORTB_REG,PinNumber); break;
    3bf8:	a7 e3       	ldi	r26, 0x37	; 55
    3bfa:	b0 e0       	ldi	r27, 0x00	; 0
    3bfc:	e7 e3       	ldi	r30, 0x37	; 55
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	48 2f       	mov	r20, r24
    3c04:	8b 81       	ldd	r24, Y+3	; 0x03
    3c06:	28 2f       	mov	r18, r24
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <DIO_SetPinDirection+0x1d0>
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	2a 95       	dec	r18
    3c16:	e2 f7       	brpl	.-8      	; 0x3c10 <DIO_SetPinDirection+0x1cc>
    3c18:	80 95       	com	r24
    3c1a:	84 23       	and	r24, r20
    3c1c:	8c 93       	st	X, r24
    3c1e:	a8 e3       	ldi	r26, 0x38	; 56
    3c20:	b0 e0       	ldi	r27, 0x00	; 0
    3c22:	e8 e3       	ldi	r30, 0x38	; 56
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	80 81       	ld	r24, Z
    3c28:	48 2f       	mov	r20, r24
    3c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	02 2e       	mov	r0, r18
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <DIO_SetPinDirection+0x1f8>
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	0a 94       	dec	r0
    3c3e:	e2 f7       	brpl	.-8      	; 0x3c38 <DIO_SetPinDirection+0x1f4>
    3c40:	80 95       	com	r24
    3c42:	84 23       	and	r24, r20
    3c44:	8c 93       	st	X, r24
    3c46:	15 c1       	rjmp	.+554    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); CLEAR_BIT(PORTC_REG,PinNumber); break;
    3c48:	a4 e3       	ldi	r26, 0x34	; 52
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	e4 e3       	ldi	r30, 0x34	; 52
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	48 2f       	mov	r20, r24
    3c54:	8b 81       	ldd	r24, Y+3	; 0x03
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	02 c0       	rjmp	.+4      	; 0x3c64 <DIO_SetPinDirection+0x220>
    3c60:	88 0f       	add	r24, r24
    3c62:	99 1f       	adc	r25, r25
    3c64:	2a 95       	dec	r18
    3c66:	e2 f7       	brpl	.-8      	; 0x3c60 <DIO_SetPinDirection+0x21c>
    3c68:	80 95       	com	r24
    3c6a:	84 23       	and	r24, r20
    3c6c:	8c 93       	st	X, r24
    3c6e:	a5 e3       	ldi	r26, 0x35	; 53
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	e5 e3       	ldi	r30, 0x35	; 53
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	80 81       	ld	r24, Z
    3c78:	48 2f       	mov	r20, r24
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	28 2f       	mov	r18, r24
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	02 2e       	mov	r0, r18
    3c86:	02 c0       	rjmp	.+4      	; 0x3c8c <DIO_SetPinDirection+0x248>
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	0a 94       	dec	r0
    3c8e:	e2 f7       	brpl	.-8      	; 0x3c88 <DIO_SetPinDirection+0x244>
    3c90:	80 95       	com	r24
    3c92:	84 23       	and	r24, r20
    3c94:	8c 93       	st	X, r24
    3c96:	ed c0       	rjmp	.+474    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); CLEAR_BIT(PORTD_REG,PinNumber); break;
    3c98:	a1 e3       	ldi	r26, 0x31	; 49
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	e1 e3       	ldi	r30, 0x31	; 49
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	48 2f       	mov	r20, r24
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	28 2f       	mov	r18, r24
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <DIO_SetPinDirection+0x270>
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	2a 95       	dec	r18
    3cb6:	e2 f7       	brpl	.-8      	; 0x3cb0 <DIO_SetPinDirection+0x26c>
    3cb8:	80 95       	com	r24
    3cba:	84 23       	and	r24, r20
    3cbc:	8c 93       	st	X, r24
    3cbe:	a2 e3       	ldi	r26, 0x32	; 50
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	e2 e3       	ldi	r30, 0x32	; 50
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	48 2f       	mov	r20, r24
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	28 2f       	mov	r18, r24
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	02 2e       	mov	r0, r18
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <DIO_SetPinDirection+0x298>
    3cd8:	88 0f       	add	r24, r24
    3cda:	99 1f       	adc	r25, r25
    3cdc:	0a 94       	dec	r0
    3cde:	e2 f7       	brpl	.-8      	; 0x3cd8 <DIO_SetPinDirection+0x294>
    3ce0:	80 95       	com	r24
    3ce2:	84 23       	and	r24, r20
    3ce4:	8c 93       	st	X, r24
    3ce6:	c5 c0       	rjmp	.+394    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			}
		}
		else if (Direction == DIO_INPUT_PULLUP_PIN)
    3ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cea:	83 30       	cpi	r24, 0x03	; 3
    3cec:	09 f0       	breq	.+2      	; 0x3cf0 <DIO_SetPinDirection+0x2ac>
    3cee:	bf c0       	rjmp	.+382    	; 0x3e6e <DIO_SetPinDirection+0x42a>
		{
			switch(Port)
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	28 2f       	mov	r18, r24
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	3e 83       	std	Y+6, r19	; 0x06
    3cf8:	2d 83       	std	Y+5, r18	; 0x05
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfe:	82 30       	cpi	r24, 0x02	; 2
    3d00:	91 05       	cpc	r25, r1
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <DIO_SetPinDirection+0x2c2>
    3d04:	3f c0       	rjmp	.+126    	; 0x3d84 <DIO_SetPinDirection+0x340>
    3d06:	2d 81       	ldd	r18, Y+5	; 0x05
    3d08:	3e 81       	ldd	r19, Y+6	; 0x06
    3d0a:	23 30       	cpi	r18, 0x03	; 3
    3d0c:	31 05       	cpc	r19, r1
    3d0e:	34 f4       	brge	.+12     	; 0x3d1c <DIO_SetPinDirection+0x2d8>
    3d10:	8d 81       	ldd	r24, Y+5	; 0x05
    3d12:	9e 81       	ldd	r25, Y+6	; 0x06
    3d14:	81 30       	cpi	r24, 0x01	; 1
    3d16:	91 05       	cpc	r25, r1
    3d18:	71 f0       	breq	.+28     	; 0x3d36 <DIO_SetPinDirection+0x2f2>
    3d1a:	ab c0       	rjmp	.+342    	; 0x3e72 <DIO_SetPinDirection+0x42e>
    3d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    3d1e:	3e 81       	ldd	r19, Y+6	; 0x06
    3d20:	23 30       	cpi	r18, 0x03	; 3
    3d22:	31 05       	cpc	r19, r1
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <DIO_SetPinDirection+0x2e4>
    3d26:	55 c0       	rjmp	.+170    	; 0x3dd2 <DIO_SetPinDirection+0x38e>
    3d28:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2c:	84 30       	cpi	r24, 0x04	; 4
    3d2e:	91 05       	cpc	r25, r1
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <DIO_SetPinDirection+0x2f0>
    3d32:	76 c0       	rjmp	.+236    	; 0x3e20 <DIO_SetPinDirection+0x3dc>
    3d34:	9e c0       	rjmp	.+316    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			{

			case PORTA : CLEAR_BIT(DDRA_REG,PinNumber); SET_BIT(PORTA_REG,PinNumber); break;
    3d36:	aa e3       	ldi	r26, 0x3A	; 58
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	ea e3       	ldi	r30, 0x3A	; 58
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	80 81       	ld	r24, Z
    3d40:	48 2f       	mov	r20, r24
    3d42:	8b 81       	ldd	r24, Y+3	; 0x03
    3d44:	28 2f       	mov	r18, r24
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	02 c0       	rjmp	.+4      	; 0x3d52 <DIO_SetPinDirection+0x30e>
    3d4e:	88 0f       	add	r24, r24
    3d50:	99 1f       	adc	r25, r25
    3d52:	2a 95       	dec	r18
    3d54:	e2 f7       	brpl	.-8      	; 0x3d4e <DIO_SetPinDirection+0x30a>
    3d56:	80 95       	com	r24
    3d58:	84 23       	and	r24, r20
    3d5a:	8c 93       	st	X, r24
    3d5c:	ab e3       	ldi	r26, 0x3B	; 59
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	eb e3       	ldi	r30, 0x3B	; 59
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	48 2f       	mov	r20, r24
    3d68:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6a:	28 2f       	mov	r18, r24
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	02 2e       	mov	r0, r18
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <DIO_SetPinDirection+0x336>
    3d76:	88 0f       	add	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	0a 94       	dec	r0
    3d7c:	e2 f7       	brpl	.-8      	; 0x3d76 <DIO_SetPinDirection+0x332>
    3d7e:	84 2b       	or	r24, r20
    3d80:	8c 93       	st	X, r24
    3d82:	77 c0       	rjmp	.+238    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTB : CLEAR_BIT(DDRB_REG,PinNumber); SET_BIT(PORTB_REG,PinNumber); break;
    3d84:	a7 e3       	ldi	r26, 0x37	; 55
    3d86:	b0 e0       	ldi	r27, 0x00	; 0
    3d88:	e7 e3       	ldi	r30, 0x37	; 55
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	80 81       	ld	r24, Z
    3d8e:	48 2f       	mov	r20, r24
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	28 2f       	mov	r18, r24
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <DIO_SetPinDirection+0x35c>
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	2a 95       	dec	r18
    3da2:	e2 f7       	brpl	.-8      	; 0x3d9c <DIO_SetPinDirection+0x358>
    3da4:	80 95       	com	r24
    3da6:	84 23       	and	r24, r20
    3da8:	8c 93       	st	X, r24
    3daa:	a8 e3       	ldi	r26, 0x38	; 56
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	e8 e3       	ldi	r30, 0x38	; 56
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	48 2f       	mov	r20, r24
    3db6:	8b 81       	ldd	r24, Y+3	; 0x03
    3db8:	28 2f       	mov	r18, r24
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	02 2e       	mov	r0, r18
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <DIO_SetPinDirection+0x384>
    3dc4:	88 0f       	add	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	0a 94       	dec	r0
    3dca:	e2 f7       	brpl	.-8      	; 0x3dc4 <DIO_SetPinDirection+0x380>
    3dcc:	84 2b       	or	r24, r20
    3dce:	8c 93       	st	X, r24
    3dd0:	50 c0       	rjmp	.+160    	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTC : CLEAR_BIT(DDRC_REG,PinNumber); SET_BIT(PORTC_REG,PinNumber); break;
    3dd2:	a4 e3       	ldi	r26, 0x34	; 52
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	e4 e3       	ldi	r30, 0x34	; 52
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	48 2f       	mov	r20, r24
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <DIO_SetPinDirection+0x3aa>
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	2a 95       	dec	r18
    3df0:	e2 f7       	brpl	.-8      	; 0x3dea <DIO_SetPinDirection+0x3a6>
    3df2:	80 95       	com	r24
    3df4:	84 23       	and	r24, r20
    3df6:	8c 93       	st	X, r24
    3df8:	a5 e3       	ldi	r26, 0x35	; 53
    3dfa:	b0 e0       	ldi	r27, 0x00	; 0
    3dfc:	e5 e3       	ldi	r30, 0x35	; 53
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	48 2f       	mov	r20, r24
    3e04:	8b 81       	ldd	r24, Y+3	; 0x03
    3e06:	28 2f       	mov	r18, r24
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	02 2e       	mov	r0, r18
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <DIO_SetPinDirection+0x3d2>
    3e12:	88 0f       	add	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	0a 94       	dec	r0
    3e18:	e2 f7       	brpl	.-8      	; 0x3e12 <DIO_SetPinDirection+0x3ce>
    3e1a:	84 2b       	or	r24, r20
    3e1c:	8c 93       	st	X, r24
    3e1e:	29 c0       	rjmp	.+82     	; 0x3e72 <DIO_SetPinDirection+0x42e>
			case PORTD : CLEAR_BIT(DDRD_REG,PinNumber); SET_BIT(PORTD_REG,PinNumber); break;
    3e20:	a1 e3       	ldi	r26, 0x31	; 49
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	e1 e3       	ldi	r30, 0x31	; 49
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	80 81       	ld	r24, Z
    3e2a:	48 2f       	mov	r20, r24
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	28 2f       	mov	r18, r24
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	02 c0       	rjmp	.+4      	; 0x3e3c <DIO_SetPinDirection+0x3f8>
    3e38:	88 0f       	add	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	2a 95       	dec	r18
    3e3e:	e2 f7       	brpl	.-8      	; 0x3e38 <DIO_SetPinDirection+0x3f4>
    3e40:	80 95       	com	r24
    3e42:	84 23       	and	r24, r20
    3e44:	8c 93       	st	X, r24
    3e46:	a2 e3       	ldi	r26, 0x32	; 50
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	e2 e3       	ldi	r30, 0x32	; 50
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	48 2f       	mov	r20, r24
    3e52:	8b 81       	ldd	r24, Y+3	; 0x03
    3e54:	28 2f       	mov	r18, r24
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	02 2e       	mov	r0, r18
    3e5e:	02 c0       	rjmp	.+4      	; 0x3e64 <DIO_SetPinDirection+0x420>
    3e60:	88 0f       	add	r24, r24
    3e62:	99 1f       	adc	r25, r25
    3e64:	0a 94       	dec	r0
    3e66:	e2 f7       	brpl	.-8      	; 0x3e60 <DIO_SetPinDirection+0x41c>
    3e68:	84 2b       	or	r24, r20
    3e6a:	8c 93       	st	X, r24
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <DIO_SetPinDirection+0x42e>
			}
		}
		else
		{
			ReturnError = FunctionParameterError;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return ReturnError;
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e74:	2a 96       	adiw	r28, 0x0a	; 10
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <DIO_SetPortDirection>:

Error_t DIO_SetPortDirection(uint8_t Port , uint8_t Direction)
{
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	27 97       	sbiw	r28, 0x07	; 7
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	8a 83       	std	Y+2, r24	; 0x02
    3e9c:	6b 83       	std	Y+3, r22	; 0x03
	Error_t ReturnError = NoError;
    3e9e:	19 82       	std	Y+1, r1	; 0x01
	if(Direction == DIO_OUTPUT_PORT)
    3ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ea4:	b9 f5       	brne	.+110    	; 0x3f14 <DIO_SetPortDirection+0x8e>
	{
		switch(Port)
    3ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	3f 83       	std	Y+7, r19	; 0x07
    3eae:	2e 83       	std	Y+6, r18	; 0x06
    3eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb4:	82 30       	cpi	r24, 0x02	; 2
    3eb6:	91 05       	cpc	r25, r1
    3eb8:	d9 f0       	breq	.+54     	; 0x3ef0 <DIO_SetPortDirection+0x6a>
    3eba:	2e 81       	ldd	r18, Y+6	; 0x06
    3ebc:	3f 81       	ldd	r19, Y+7	; 0x07
    3ebe:	23 30       	cpi	r18, 0x03	; 3
    3ec0:	31 05       	cpc	r19, r1
    3ec2:	34 f4       	brge	.+12     	; 0x3ed0 <DIO_SetPortDirection+0x4a>
    3ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec8:	81 30       	cpi	r24, 0x01	; 1
    3eca:	91 05       	cpc	r25, r1
    3ecc:	61 f0       	breq	.+24     	; 0x3ee6 <DIO_SetPortDirection+0x60>
    3ece:	1f c0       	rjmp	.+62     	; 0x3f0e <DIO_SetPortDirection+0x88>
    3ed0:	2e 81       	ldd	r18, Y+6	; 0x06
    3ed2:	3f 81       	ldd	r19, Y+7	; 0x07
    3ed4:	23 30       	cpi	r18, 0x03	; 3
    3ed6:	31 05       	cpc	r19, r1
    3ed8:	81 f0       	breq	.+32     	; 0x3efa <DIO_SetPortDirection+0x74>
    3eda:	8e 81       	ldd	r24, Y+6	; 0x06
    3edc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ede:	84 30       	cpi	r24, 0x04	; 4
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	81 f0       	breq	.+32     	; 0x3f04 <DIO_SetPortDirection+0x7e>
    3ee4:	14 c0       	rjmp	.+40     	; 0x3f0e <DIO_SetPortDirection+0x88>
		{
		case PORTA: DDRA_REG = DIO_OUTPUT_PORT; break;
    3ee6:	ea e3       	ldi	r30, 0x3A	; 58
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	80 83       	st	Z, r24
    3eee:	4a c0       	rjmp	.+148    	; 0x3f84 <DIO_SetPortDirection+0xfe>
		case PORTB: DDRB_REG = DIO_OUTPUT_PORT; break;
    3ef0:	e7 e3       	ldi	r30, 0x37	; 55
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	8f ef       	ldi	r24, 0xFF	; 255
    3ef6:	80 83       	st	Z, r24
    3ef8:	45 c0       	rjmp	.+138    	; 0x3f84 <DIO_SetPortDirection+0xfe>
		case PORTC: DDRC_REG = DIO_OUTPUT_PORT; break;
    3efa:	e4 e3       	ldi	r30, 0x34	; 52
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	8f ef       	ldi	r24, 0xFF	; 255
    3f00:	80 83       	st	Z, r24
    3f02:	40 c0       	rjmp	.+128    	; 0x3f84 <DIO_SetPortDirection+0xfe>
		case PORTD: DDRD_REG = DIO_OUTPUT_PORT; break;
    3f04:	e1 e3       	ldi	r30, 0x31	; 49
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	8f ef       	ldi	r24, 0xFF	; 255
    3f0a:	80 83       	st	Z, r24
    3f0c:	3b c0       	rjmp	.+118    	; 0x3f84 <DIO_SetPortDirection+0xfe>
		default : ReturnError = FunctionParameterError; break;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	89 83       	std	Y+1, r24	; 0x01
    3f12:	38 c0       	rjmp	.+112    	; 0x3f84 <DIO_SetPortDirection+0xfe>
		}
	}
	else if (Direction == DIO_INPUT_PORT)
    3f14:	8b 81       	ldd	r24, Y+3	; 0x03
    3f16:	88 23       	and	r24, r24
    3f18:	99 f5       	brne	.+102    	; 0x3f80 <DIO_SetPortDirection+0xfa>
	{
		switch(Port)
    3f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1c:	28 2f       	mov	r18, r24
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	3d 83       	std	Y+5, r19	; 0x05
    3f22:	2c 83       	std	Y+4, r18	; 0x04
    3f24:	8c 81       	ldd	r24, Y+4	; 0x04
    3f26:	9d 81       	ldd	r25, Y+5	; 0x05
    3f28:	82 30       	cpi	r24, 0x02	; 2
    3f2a:	91 05       	cpc	r25, r1
    3f2c:	d1 f0       	breq	.+52     	; 0x3f62 <DIO_SetPortDirection+0xdc>
    3f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    3f30:	3d 81       	ldd	r19, Y+5	; 0x05
    3f32:	23 30       	cpi	r18, 0x03	; 3
    3f34:	31 05       	cpc	r19, r1
    3f36:	34 f4       	brge	.+12     	; 0x3f44 <DIO_SetPortDirection+0xbe>
    3f38:	8c 81       	ldd	r24, Y+4	; 0x04
    3f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f3c:	81 30       	cpi	r24, 0x01	; 1
    3f3e:	91 05       	cpc	r25, r1
    3f40:	61 f0       	breq	.+24     	; 0x3f5a <DIO_SetPortDirection+0xd4>
    3f42:	1b c0       	rjmp	.+54     	; 0x3f7a <DIO_SetPortDirection+0xf4>
    3f44:	2c 81       	ldd	r18, Y+4	; 0x04
    3f46:	3d 81       	ldd	r19, Y+5	; 0x05
    3f48:	23 30       	cpi	r18, 0x03	; 3
    3f4a:	31 05       	cpc	r19, r1
    3f4c:	71 f0       	breq	.+28     	; 0x3f6a <DIO_SetPortDirection+0xe4>
    3f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f50:	9d 81       	ldd	r25, Y+5	; 0x05
    3f52:	84 30       	cpi	r24, 0x04	; 4
    3f54:	91 05       	cpc	r25, r1
    3f56:	69 f0       	breq	.+26     	; 0x3f72 <DIO_SetPortDirection+0xec>
    3f58:	10 c0       	rjmp	.+32     	; 0x3f7a <DIO_SetPortDirection+0xf4>
		{
		case PORTA: DDRA_REG = DIO_INPUT_PORT; break;
    3f5a:	ea e3       	ldi	r30, 0x3A	; 58
    3f5c:	f0 e0       	ldi	r31, 0x00	; 0
    3f5e:	10 82       	st	Z, r1
    3f60:	11 c0       	rjmp	.+34     	; 0x3f84 <DIO_SetPortDirection+0xfe>
		case PORTB: DDRB_REG = DIO_INPUT_PORT; break;
    3f62:	e7 e3       	ldi	r30, 0x37	; 55
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	10 82       	st	Z, r1
    3f68:	0d c0       	rjmp	.+26     	; 0x3f84 <DIO_SetPortDirection+0xfe>
		case PORTC: DDRC_REG = DIO_INPUT_PORT; break;
    3f6a:	e4 e3       	ldi	r30, 0x34	; 52
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	10 82       	st	Z, r1
    3f70:	09 c0       	rjmp	.+18     	; 0x3f84 <DIO_SetPortDirection+0xfe>
		case PORTD: DDRD_REG = DIO_INPUT_PORT; break;
    3f72:	e1 e3       	ldi	r30, 0x31	; 49
    3f74:	f0 e0       	ldi	r31, 0x00	; 0
    3f76:	10 82       	st	Z, r1
    3f78:	05 c0       	rjmp	.+10     	; 0x3f84 <DIO_SetPortDirection+0xfe>
		default : ReturnError = FunctionParameterError; break;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	89 83       	std	Y+1, r24	; 0x01
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <DIO_SetPortDirection+0xfe>
		}
	}

	else
	{
		ReturnError = FunctionParameterError;
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	89 83       	std	Y+1, r24	; 0x01
	}
	return ReturnError;
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f86:	27 96       	adiw	r28, 0x07	; 7
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	f8 94       	cli
    3f8c:	de bf       	out	0x3e, r29	; 62
    3f8e:	0f be       	out	0x3f, r0	; 63
    3f90:	cd bf       	out	0x3d, r28	; 61
    3f92:	cf 91       	pop	r28
    3f94:	df 91       	pop	r29
    3f96:	08 95       	ret

00003f98 <DIO_WritePin>:

Error_t DIO_WritePin(uint8_t Port , uint8_t PinNumber ,uint8_t VoltageLevel)
{
    3f98:	df 93       	push	r29
    3f9a:	cf 93       	push	r28
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	28 97       	sbiw	r28, 0x08	; 8
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	8a 83       	std	Y+2, r24	; 0x02
    3fae:	6b 83       	std	Y+3, r22	; 0x03
    3fb0:	4c 83       	std	Y+4, r20	; 0x04
	Error_t ReturnError = NoError;
    3fb2:	19 82       	std	Y+1, r1	; 0x01

	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
    3fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb6:	88 30       	cpi	r24, 0x08	; 8
    3fb8:	18 f0       	brcs	.+6      	; 0x3fc0 <DIO_WritePin+0x28>
	{
		ReturnError = FunctionParameterError;
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	89 83       	std	Y+1, r24	; 0x01
    3fbe:	f5 c0       	rjmp	.+490    	; 0x41aa <DIO_WritePin+0x212>
	}
	else
	{
		if(VoltageLevel == DIO_HIGH_PIN)
    3fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc2:	81 30       	cpi	r24, 0x01	; 1
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <DIO_WritePin+0x30>
    3fc6:	73 c0       	rjmp	.+230    	; 0x40ae <DIO_WritePin+0x116>
		{
			switch(Port)
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	28 2f       	mov	r18, r24
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	38 87       	std	Y+8, r19	; 0x08
    3fd0:	2f 83       	std	Y+7, r18	; 0x07
    3fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fd4:	98 85       	ldd	r25, Y+8	; 0x08
    3fd6:	82 30       	cpi	r24, 0x02	; 2
    3fd8:	91 05       	cpc	r25, r1
    3fda:	51 f1       	breq	.+84     	; 0x4030 <DIO_WritePin+0x98>
    3fdc:	2f 81       	ldd	r18, Y+7	; 0x07
    3fde:	38 85       	ldd	r19, Y+8	; 0x08
    3fe0:	23 30       	cpi	r18, 0x03	; 3
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	34 f4       	brge	.+12     	; 0x3ff2 <DIO_WritePin+0x5a>
    3fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    3fe8:	98 85       	ldd	r25, Y+8	; 0x08
    3fea:	81 30       	cpi	r24, 0x01	; 1
    3fec:	91 05       	cpc	r25, r1
    3fee:	61 f0       	breq	.+24     	; 0x4008 <DIO_WritePin+0x70>
    3ff0:	5b c0       	rjmp	.+182    	; 0x40a8 <DIO_WritePin+0x110>
    3ff2:	2f 81       	ldd	r18, Y+7	; 0x07
    3ff4:	38 85       	ldd	r19, Y+8	; 0x08
    3ff6:	23 30       	cpi	r18, 0x03	; 3
    3ff8:	31 05       	cpc	r19, r1
    3ffa:	71 f1       	breq	.+92     	; 0x4058 <DIO_WritePin+0xc0>
    3ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ffe:	98 85       	ldd	r25, Y+8	; 0x08
    4000:	84 30       	cpi	r24, 0x04	; 4
    4002:	91 05       	cpc	r25, r1
    4004:	e9 f1       	breq	.+122    	; 0x4080 <DIO_WritePin+0xe8>
    4006:	50 c0       	rjmp	.+160    	; 0x40a8 <DIO_WritePin+0x110>
			{
			case PORTA: SET_BIT(PORTA_REG,PinNumber); break;
    4008:	ab e3       	ldi	r26, 0x3B	; 59
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	eb e3       	ldi	r30, 0x3B	; 59
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	80 81       	ld	r24, Z
    4012:	48 2f       	mov	r20, r24
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	28 2f       	mov	r18, r24
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	02 2e       	mov	r0, r18
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <DIO_WritePin+0x8e>
    4022:	88 0f       	add	r24, r24
    4024:	99 1f       	adc	r25, r25
    4026:	0a 94       	dec	r0
    4028:	e2 f7       	brpl	.-8      	; 0x4022 <DIO_WritePin+0x8a>
    402a:	84 2b       	or	r24, r20
    402c:	8c 93       	st	X, r24
    402e:	bd c0       	rjmp	.+378    	; 0x41aa <DIO_WritePin+0x212>
			case PORTB: SET_BIT(PORTB_REG,PinNumber); break;
    4030:	a8 e3       	ldi	r26, 0x38	; 56
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	e8 e3       	ldi	r30, 0x38	; 56
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	80 81       	ld	r24, Z
    403a:	48 2f       	mov	r20, r24
    403c:	8b 81       	ldd	r24, Y+3	; 0x03
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	02 2e       	mov	r0, r18
    4048:	02 c0       	rjmp	.+4      	; 0x404e <DIO_WritePin+0xb6>
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	0a 94       	dec	r0
    4050:	e2 f7       	brpl	.-8      	; 0x404a <DIO_WritePin+0xb2>
    4052:	84 2b       	or	r24, r20
    4054:	8c 93       	st	X, r24
    4056:	a9 c0       	rjmp	.+338    	; 0x41aa <DIO_WritePin+0x212>
			case PORTC: SET_BIT(PORTC_REG,PinNumber); break;
    4058:	a5 e3       	ldi	r26, 0x35	; 53
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	e5 e3       	ldi	r30, 0x35	; 53
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	48 2f       	mov	r20, r24
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	28 2f       	mov	r18, r24
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	02 2e       	mov	r0, r18
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <DIO_WritePin+0xde>
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	0a 94       	dec	r0
    4078:	e2 f7       	brpl	.-8      	; 0x4072 <DIO_WritePin+0xda>
    407a:	84 2b       	or	r24, r20
    407c:	8c 93       	st	X, r24
    407e:	95 c0       	rjmp	.+298    	; 0x41aa <DIO_WritePin+0x212>
			case PORTD: SET_BIT(PORTD_REG,PinNumber); break;
    4080:	a2 e3       	ldi	r26, 0x32	; 50
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	e2 e3       	ldi	r30, 0x32	; 50
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	48 2f       	mov	r20, r24
    408c:	8b 81       	ldd	r24, Y+3	; 0x03
    408e:	28 2f       	mov	r18, r24
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	02 2e       	mov	r0, r18
    4098:	02 c0       	rjmp	.+4      	; 0x409e <DIO_WritePin+0x106>
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	0a 94       	dec	r0
    40a0:	e2 f7       	brpl	.-8      	; 0x409a <DIO_WritePin+0x102>
    40a2:	84 2b       	or	r24, r20
    40a4:	8c 93       	st	X, r24
    40a6:	81 c0       	rjmp	.+258    	; 0x41aa <DIO_WritePin+0x212>
			default : ReturnError = FunctionParameterError; break;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	89 83       	std	Y+1, r24	; 0x01
    40ac:	7e c0       	rjmp	.+252    	; 0x41aa <DIO_WritePin+0x212>
			}

		}
		else if (VoltageLevel == DIO_LOW_PIN)
    40ae:	8c 81       	ldd	r24, Y+4	; 0x04
    40b0:	88 23       	and	r24, r24
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <DIO_WritePin+0x11e>
    40b4:	78 c0       	rjmp	.+240    	; 0x41a6 <DIO_WritePin+0x20e>
		{
			switch(Port)
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	3e 83       	std	Y+6, r19	; 0x06
    40be:	2d 83       	std	Y+5, r18	; 0x05
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	9e 81       	ldd	r25, Y+6	; 0x06
    40c4:	82 30       	cpi	r24, 0x02	; 2
    40c6:	91 05       	cpc	r25, r1
    40c8:	61 f1       	breq	.+88     	; 0x4122 <DIO_WritePin+0x18a>
    40ca:	2d 81       	ldd	r18, Y+5	; 0x05
    40cc:	3e 81       	ldd	r19, Y+6	; 0x06
    40ce:	23 30       	cpi	r18, 0x03	; 3
    40d0:	31 05       	cpc	r19, r1
    40d2:	34 f4       	brge	.+12     	; 0x40e0 <DIO_WritePin+0x148>
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	9e 81       	ldd	r25, Y+6	; 0x06
    40d8:	81 30       	cpi	r24, 0x01	; 1
    40da:	91 05       	cpc	r25, r1
    40dc:	69 f0       	breq	.+26     	; 0x40f8 <DIO_WritePin+0x160>
    40de:	60 c0       	rjmp	.+192    	; 0x41a0 <DIO_WritePin+0x208>
    40e0:	2d 81       	ldd	r18, Y+5	; 0x05
    40e2:	3e 81       	ldd	r19, Y+6	; 0x06
    40e4:	23 30       	cpi	r18, 0x03	; 3
    40e6:	31 05       	cpc	r19, r1
    40e8:	89 f1       	breq	.+98     	; 0x414c <DIO_WritePin+0x1b4>
    40ea:	8d 81       	ldd	r24, Y+5	; 0x05
    40ec:	9e 81       	ldd	r25, Y+6	; 0x06
    40ee:	84 30       	cpi	r24, 0x04	; 4
    40f0:	91 05       	cpc	r25, r1
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <DIO_WritePin+0x15e>
    40f4:	40 c0       	rjmp	.+128    	; 0x4176 <DIO_WritePin+0x1de>
    40f6:	54 c0       	rjmp	.+168    	; 0x41a0 <DIO_WritePin+0x208>
			{
			case PORTA: CLEAR_BIT(PORTA_REG,PinNumber); break;
    40f8:	ab e3       	ldi	r26, 0x3B	; 59
    40fa:	b0 e0       	ldi	r27, 0x00	; 0
    40fc:	eb e3       	ldi	r30, 0x3B	; 59
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	80 81       	ld	r24, Z
    4102:	48 2f       	mov	r20, r24
    4104:	8b 81       	ldd	r24, Y+3	; 0x03
    4106:	28 2f       	mov	r18, r24
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	02 2e       	mov	r0, r18
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <DIO_WritePin+0x17e>
    4112:	88 0f       	add	r24, r24
    4114:	99 1f       	adc	r25, r25
    4116:	0a 94       	dec	r0
    4118:	e2 f7       	brpl	.-8      	; 0x4112 <DIO_WritePin+0x17a>
    411a:	80 95       	com	r24
    411c:	84 23       	and	r24, r20
    411e:	8c 93       	st	X, r24
    4120:	44 c0       	rjmp	.+136    	; 0x41aa <DIO_WritePin+0x212>
			case PORTB: CLEAR_BIT(PORTB_REG,PinNumber); break;
    4122:	a8 e3       	ldi	r26, 0x38	; 56
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	e8 e3       	ldi	r30, 0x38	; 56
    4128:	f0 e0       	ldi	r31, 0x00	; 0
    412a:	80 81       	ld	r24, Z
    412c:	48 2f       	mov	r20, r24
    412e:	8b 81       	ldd	r24, Y+3	; 0x03
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	02 2e       	mov	r0, r18
    413a:	02 c0       	rjmp	.+4      	; 0x4140 <DIO_WritePin+0x1a8>
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	0a 94       	dec	r0
    4142:	e2 f7       	brpl	.-8      	; 0x413c <DIO_WritePin+0x1a4>
    4144:	80 95       	com	r24
    4146:	84 23       	and	r24, r20
    4148:	8c 93       	st	X, r24
    414a:	2f c0       	rjmp	.+94     	; 0x41aa <DIO_WritePin+0x212>
			case PORTC: CLEAR_BIT(PORTC_REG,PinNumber); break;
    414c:	a5 e3       	ldi	r26, 0x35	; 53
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	e5 e3       	ldi	r30, 0x35	; 53
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	80 81       	ld	r24, Z
    4156:	48 2f       	mov	r20, r24
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
    415a:	28 2f       	mov	r18, r24
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	02 2e       	mov	r0, r18
    4164:	02 c0       	rjmp	.+4      	; 0x416a <DIO_WritePin+0x1d2>
    4166:	88 0f       	add	r24, r24
    4168:	99 1f       	adc	r25, r25
    416a:	0a 94       	dec	r0
    416c:	e2 f7       	brpl	.-8      	; 0x4166 <DIO_WritePin+0x1ce>
    416e:	80 95       	com	r24
    4170:	84 23       	and	r24, r20
    4172:	8c 93       	st	X, r24
    4174:	1a c0       	rjmp	.+52     	; 0x41aa <DIO_WritePin+0x212>
			case PORTD: CLEAR_BIT(PORTD_REG,PinNumber); break;
    4176:	a2 e3       	ldi	r26, 0x32	; 50
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	e2 e3       	ldi	r30, 0x32	; 50
    417c:	f0 e0       	ldi	r31, 0x00	; 0
    417e:	80 81       	ld	r24, Z
    4180:	48 2f       	mov	r20, r24
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	28 2f       	mov	r18, r24
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	02 2e       	mov	r0, r18
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <DIO_WritePin+0x1fc>
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	0a 94       	dec	r0
    4196:	e2 f7       	brpl	.-8      	; 0x4190 <DIO_WritePin+0x1f8>
    4198:	80 95       	com	r24
    419a:	84 23       	and	r24, r20
    419c:	8c 93       	st	X, r24
    419e:	05 c0       	rjmp	.+10     	; 0x41aa <DIO_WritePin+0x212>
			default : ReturnError = FunctionParameterError; break;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	89 83       	std	Y+1, r24	; 0x01
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <DIO_WritePin+0x212>
			}

		}
		else
		{
			ReturnError = FunctionParameterError;
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return ReturnError;
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    41ac:	28 96       	adiw	r28, 0x08	; 8
    41ae:	0f b6       	in	r0, 0x3f	; 63
    41b0:	f8 94       	cli
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	cd bf       	out	0x3d, r28	; 61
    41b8:	cf 91       	pop	r28
    41ba:	df 91       	pop	r29
    41bc:	08 95       	ret

000041be <DIO_WritePort>:
Error_t DIO_WritePort(uint8_t Port , uint8_t PortVal)
{
    41be:	df 93       	push	r29
    41c0:	cf 93       	push	r28
    41c2:	00 d0       	rcall	.+0      	; 0x41c4 <DIO_WritePort+0x6>
    41c4:	00 d0       	rcall	.+0      	; 0x41c6 <DIO_WritePort+0x8>
    41c6:	0f 92       	push	r0
    41c8:	cd b7       	in	r28, 0x3d	; 61
    41ca:	de b7       	in	r29, 0x3e	; 62
    41cc:	8a 83       	std	Y+2, r24	; 0x02
    41ce:	6b 83       	std	Y+3, r22	; 0x03
	Error_t ReturnError = NoError;
    41d0:	19 82       	std	Y+1, r1	; 0x01
	{
		ReturnError = OverFlowError;
	}
	else
	{
		switch(Port)
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	28 2f       	mov	r18, r24
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	3d 83       	std	Y+5, r19	; 0x05
    41da:	2c 83       	std	Y+4, r18	; 0x04
    41dc:	8c 81       	ldd	r24, Y+4	; 0x04
    41de:	9d 81       	ldd	r25, Y+5	; 0x05
    41e0:	82 30       	cpi	r24, 0x02	; 2
    41e2:	91 05       	cpc	r25, r1
    41e4:	d9 f0       	breq	.+54     	; 0x421c <DIO_WritePort+0x5e>
    41e6:	2c 81       	ldd	r18, Y+4	; 0x04
    41e8:	3d 81       	ldd	r19, Y+5	; 0x05
    41ea:	23 30       	cpi	r18, 0x03	; 3
    41ec:	31 05       	cpc	r19, r1
    41ee:	34 f4       	brge	.+12     	; 0x41fc <DIO_WritePort+0x3e>
    41f0:	8c 81       	ldd	r24, Y+4	; 0x04
    41f2:	9d 81       	ldd	r25, Y+5	; 0x05
    41f4:	81 30       	cpi	r24, 0x01	; 1
    41f6:	91 05       	cpc	r25, r1
    41f8:	61 f0       	breq	.+24     	; 0x4212 <DIO_WritePort+0x54>
    41fa:	1f c0       	rjmp	.+62     	; 0x423a <DIO_WritePort+0x7c>
    41fc:	2c 81       	ldd	r18, Y+4	; 0x04
    41fe:	3d 81       	ldd	r19, Y+5	; 0x05
    4200:	23 30       	cpi	r18, 0x03	; 3
    4202:	31 05       	cpc	r19, r1
    4204:	81 f0       	breq	.+32     	; 0x4226 <DIO_WritePort+0x68>
    4206:	8c 81       	ldd	r24, Y+4	; 0x04
    4208:	9d 81       	ldd	r25, Y+5	; 0x05
    420a:	84 30       	cpi	r24, 0x04	; 4
    420c:	91 05       	cpc	r25, r1
    420e:	81 f0       	breq	.+32     	; 0x4230 <DIO_WritePort+0x72>
    4210:	14 c0       	rjmp	.+40     	; 0x423a <DIO_WritePort+0x7c>
		{
		case PORTA:PORTA_REG = PortVal; break;
    4212:	eb e3       	ldi	r30, 0x3B	; 59
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	8b 81       	ldd	r24, Y+3	; 0x03
    4218:	80 83       	st	Z, r24
    421a:	11 c0       	rjmp	.+34     	; 0x423e <DIO_WritePort+0x80>
		case PORTB:PORTB_REG = PortVal; break;
    421c:	e8 e3       	ldi	r30, 0x38	; 56
    421e:	f0 e0       	ldi	r31, 0x00	; 0
    4220:	8b 81       	ldd	r24, Y+3	; 0x03
    4222:	80 83       	st	Z, r24
    4224:	0c c0       	rjmp	.+24     	; 0x423e <DIO_WritePort+0x80>
		case PORTC:PORTC_REG = PortVal; break;
    4226:	e5 e3       	ldi	r30, 0x35	; 53
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	80 83       	st	Z, r24
    422e:	07 c0       	rjmp	.+14     	; 0x423e <DIO_WritePort+0x80>
		case PORTD:PORTD_REG = PortVal; break;
    4230:	e2 e3       	ldi	r30, 0x32	; 50
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	8b 81       	ldd	r24, Y+3	; 0x03
    4236:	80 83       	st	Z, r24
    4238:	02 c0       	rjmp	.+4      	; 0x423e <DIO_WritePort+0x80>
		default : ReturnError = FunctionParameterError; break;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return ReturnError;
    423e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4240:	0f 90       	pop	r0
    4242:	0f 90       	pop	r0
    4244:	0f 90       	pop	r0
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	cf 91       	pop	r28
    424c:	df 91       	pop	r29
    424e:	08 95       	ret

00004250 <DIO_ReadPin>:

Error_t DIO_ReadPin(uint8_t Port , uint8_t PinNumber , uint8_t * PinVal)
{
    4250:	df 93       	push	r29
    4252:	cf 93       	push	r28
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	27 97       	sbiw	r28, 0x07	; 7
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	8a 83       	std	Y+2, r24	; 0x02
    4266:	6b 83       	std	Y+3, r22	; 0x03
    4268:	5d 83       	std	Y+5, r21	; 0x05
    426a:	4c 83       	std	Y+4, r20	; 0x04
	Error_t ReturnError = NoError;
    426c:	19 82       	std	Y+1, r1	; 0x01
	if(PinNumber > DIO_MAX_NUMBER_OF_PIN)
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
    4270:	88 30       	cpi	r24, 0x08	; 8
    4272:	18 f0       	brcs	.+6      	; 0x427a <DIO_ReadPin+0x2a>
	{
		ReturnError = FunctionParameterError;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	89 83       	std	Y+1, r24	; 0x01
    4278:	a4 c0       	rjmp	.+328    	; 0x43c2 <DIO_ReadPin+0x172>
	}
	else
	{
		switch(Port)
    427a:	8a 81       	ldd	r24, Y+2	; 0x02
    427c:	28 2f       	mov	r18, r24
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	3f 83       	std	Y+7, r19	; 0x07
    4282:	2e 83       	std	Y+6, r18	; 0x06
    4284:	4e 81       	ldd	r20, Y+6	; 0x06
    4286:	5f 81       	ldd	r21, Y+7	; 0x07
    4288:	42 30       	cpi	r20, 0x02	; 2
    428a:	51 05       	cpc	r21, r1
    428c:	c1 f1       	breq	.+112    	; 0x42fe <DIO_ReadPin+0xae>
    428e:	8e 81       	ldd	r24, Y+6	; 0x06
    4290:	9f 81       	ldd	r25, Y+7	; 0x07
    4292:	83 30       	cpi	r24, 0x03	; 3
    4294:	91 05       	cpc	r25, r1
    4296:	34 f4       	brge	.+12     	; 0x42a4 <DIO_ReadPin+0x54>
    4298:	2e 81       	ldd	r18, Y+6	; 0x06
    429a:	3f 81       	ldd	r19, Y+7	; 0x07
    429c:	21 30       	cpi	r18, 0x01	; 1
    429e:	31 05       	cpc	r19, r1
    42a0:	71 f0       	breq	.+28     	; 0x42be <DIO_ReadPin+0x6e>
    42a2:	8d c0       	rjmp	.+282    	; 0x43be <DIO_ReadPin+0x16e>
    42a4:	4e 81       	ldd	r20, Y+6	; 0x06
    42a6:	5f 81       	ldd	r21, Y+7	; 0x07
    42a8:	43 30       	cpi	r20, 0x03	; 3
    42aa:	51 05       	cpc	r21, r1
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <DIO_ReadPin+0x60>
    42ae:	47 c0       	rjmp	.+142    	; 0x433e <DIO_ReadPin+0xee>
    42b0:	8e 81       	ldd	r24, Y+6	; 0x06
    42b2:	9f 81       	ldd	r25, Y+7	; 0x07
    42b4:	84 30       	cpi	r24, 0x04	; 4
    42b6:	91 05       	cpc	r25, r1
    42b8:	09 f4       	brne	.+2      	; 0x42bc <DIO_ReadPin+0x6c>
    42ba:	61 c0       	rjmp	.+194    	; 0x437e <DIO_ReadPin+0x12e>
    42bc:	80 c0       	rjmp	.+256    	; 0x43be <DIO_ReadPin+0x16e>
		{
		case PORTA: *PinVal = GET_BIT(PINA_REG,PinNumber); break;
    42be:	e9 e3       	ldi	r30, 0x39	; 57
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	80 81       	ld	r24, Z
    42c4:	48 2f       	mov	r20, r24
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ca:	28 2f       	mov	r18, r24
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <DIO_ReadPin+0x88>
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	2a 95       	dec	r18
    42da:	e2 f7       	brpl	.-8      	; 0x42d4 <DIO_ReadPin+0x84>
    42dc:	9a 01       	movw	r18, r20
    42de:	28 23       	and	r18, r24
    42e0:	39 23       	and	r19, r25
    42e2:	8b 81       	ldd	r24, Y+3	; 0x03
    42e4:	88 2f       	mov	r24, r24
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	a9 01       	movw	r20, r18
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <DIO_ReadPin+0xa0>
    42ec:	55 95       	asr	r21
    42ee:	47 95       	ror	r20
    42f0:	8a 95       	dec	r24
    42f2:	e2 f7       	brpl	.-8      	; 0x42ec <DIO_ReadPin+0x9c>
    42f4:	ca 01       	movw	r24, r20
    42f6:	ec 81       	ldd	r30, Y+4	; 0x04
    42f8:	fd 81       	ldd	r31, Y+5	; 0x05
    42fa:	80 83       	st	Z, r24
    42fc:	62 c0       	rjmp	.+196    	; 0x43c2 <DIO_ReadPin+0x172>
		case PORTB: *PinVal = GET_BIT(PINB_REG,PinNumber); break;
    42fe:	e6 e3       	ldi	r30, 0x36	; 54
    4300:	f0 e0       	ldi	r31, 0x00	; 0
    4302:	80 81       	ld	r24, Z
    4304:	48 2f       	mov	r20, r24
    4306:	50 e0       	ldi	r21, 0x00	; 0
    4308:	8b 81       	ldd	r24, Y+3	; 0x03
    430a:	28 2f       	mov	r18, r24
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	02 c0       	rjmp	.+4      	; 0x4318 <DIO_ReadPin+0xc8>
    4314:	88 0f       	add	r24, r24
    4316:	99 1f       	adc	r25, r25
    4318:	2a 95       	dec	r18
    431a:	e2 f7       	brpl	.-8      	; 0x4314 <DIO_ReadPin+0xc4>
    431c:	9a 01       	movw	r18, r20
    431e:	28 23       	and	r18, r24
    4320:	39 23       	and	r19, r25
    4322:	8b 81       	ldd	r24, Y+3	; 0x03
    4324:	88 2f       	mov	r24, r24
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a9 01       	movw	r20, r18
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <DIO_ReadPin+0xe0>
    432c:	55 95       	asr	r21
    432e:	47 95       	ror	r20
    4330:	8a 95       	dec	r24
    4332:	e2 f7       	brpl	.-8      	; 0x432c <DIO_ReadPin+0xdc>
    4334:	ca 01       	movw	r24, r20
    4336:	ec 81       	ldd	r30, Y+4	; 0x04
    4338:	fd 81       	ldd	r31, Y+5	; 0x05
    433a:	80 83       	st	Z, r24
    433c:	42 c0       	rjmp	.+132    	; 0x43c2 <DIO_ReadPin+0x172>
		case PORTC: *PinVal = GET_BIT(PINC_REG,PinNumber); break;
    433e:	e3 e3       	ldi	r30, 0x33	; 51
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	80 81       	ld	r24, Z
    4344:	48 2f       	mov	r20, r24
    4346:	50 e0       	ldi	r21, 0x00	; 0
    4348:	8b 81       	ldd	r24, Y+3	; 0x03
    434a:	28 2f       	mov	r18, r24
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	02 c0       	rjmp	.+4      	; 0x4358 <DIO_ReadPin+0x108>
    4354:	88 0f       	add	r24, r24
    4356:	99 1f       	adc	r25, r25
    4358:	2a 95       	dec	r18
    435a:	e2 f7       	brpl	.-8      	; 0x4354 <DIO_ReadPin+0x104>
    435c:	9a 01       	movw	r18, r20
    435e:	28 23       	and	r18, r24
    4360:	39 23       	and	r19, r25
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	88 2f       	mov	r24, r24
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	a9 01       	movw	r20, r18
    436a:	02 c0       	rjmp	.+4      	; 0x4370 <DIO_ReadPin+0x120>
    436c:	55 95       	asr	r21
    436e:	47 95       	ror	r20
    4370:	8a 95       	dec	r24
    4372:	e2 f7       	brpl	.-8      	; 0x436c <DIO_ReadPin+0x11c>
    4374:	ca 01       	movw	r24, r20
    4376:	ec 81       	ldd	r30, Y+4	; 0x04
    4378:	fd 81       	ldd	r31, Y+5	; 0x05
    437a:	80 83       	st	Z, r24
    437c:	22 c0       	rjmp	.+68     	; 0x43c2 <DIO_ReadPin+0x172>
		case PORTD: *PinVal = GET_BIT(PIND_REG,PinNumber); break;
    437e:	e0 e3       	ldi	r30, 0x30	; 48
    4380:	f0 e0       	ldi	r31, 0x00	; 0
    4382:	80 81       	ld	r24, Z
    4384:	48 2f       	mov	r20, r24
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	8b 81       	ldd	r24, Y+3	; 0x03
    438a:	28 2f       	mov	r18, r24
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <DIO_ReadPin+0x148>
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	2a 95       	dec	r18
    439a:	e2 f7       	brpl	.-8      	; 0x4394 <DIO_ReadPin+0x144>
    439c:	9a 01       	movw	r18, r20
    439e:	28 23       	and	r18, r24
    43a0:	39 23       	and	r19, r25
    43a2:	8b 81       	ldd	r24, Y+3	; 0x03
    43a4:	88 2f       	mov	r24, r24
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	a9 01       	movw	r20, r18
    43aa:	02 c0       	rjmp	.+4      	; 0x43b0 <DIO_ReadPin+0x160>
    43ac:	55 95       	asr	r21
    43ae:	47 95       	ror	r20
    43b0:	8a 95       	dec	r24
    43b2:	e2 f7       	brpl	.-8      	; 0x43ac <DIO_ReadPin+0x15c>
    43b4:	ca 01       	movw	r24, r20
    43b6:	ec 81       	ldd	r30, Y+4	; 0x04
    43b8:	fd 81       	ldd	r31, Y+5	; 0x05
    43ba:	80 83       	st	Z, r24
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <DIO_ReadPin+0x172>
		default : ReturnError = FunctionParameterError; break;
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return ReturnError;
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    43c4:	27 96       	adiw	r28, 0x07	; 7
    43c6:	0f b6       	in	r0, 0x3f	; 63
    43c8:	f8 94       	cli
    43ca:	de bf       	out	0x3e, r29	; 62
    43cc:	0f be       	out	0x3f, r0	; 63
    43ce:	cd bf       	out	0x3d, r28	; 61
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <DIO_ReadPort>:

Error_t DIO_ReadPort(uint8_t Port  , uint8_t * PortVal)
{
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	00 d0       	rcall	.+0      	; 0x43dc <DIO_ReadPort+0x6>
    43dc:	00 d0       	rcall	.+0      	; 0x43de <DIO_ReadPort+0x8>
    43de:	00 d0       	rcall	.+0      	; 0x43e0 <DIO_ReadPort+0xa>
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
    43e4:	8a 83       	std	Y+2, r24	; 0x02
    43e6:	7c 83       	std	Y+4, r23	; 0x04
    43e8:	6b 83       	std	Y+3, r22	; 0x03
	Error_t ReturnError = NoError;
    43ea:	19 82       	std	Y+1, r1	; 0x01
	switch(Port)
    43ec:	8a 81       	ldd	r24, Y+2	; 0x02
    43ee:	28 2f       	mov	r18, r24
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	3e 83       	std	Y+6, r19	; 0x06
    43f4:	2d 83       	std	Y+5, r18	; 0x05
    43f6:	8d 81       	ldd	r24, Y+5	; 0x05
    43f8:	9e 81       	ldd	r25, Y+6	; 0x06
    43fa:	82 30       	cpi	r24, 0x02	; 2
    43fc:	91 05       	cpc	r25, r1
    43fe:	e9 f0       	breq	.+58     	; 0x443a <DIO_ReadPort+0x64>
    4400:	2d 81       	ldd	r18, Y+5	; 0x05
    4402:	3e 81       	ldd	r19, Y+6	; 0x06
    4404:	23 30       	cpi	r18, 0x03	; 3
    4406:	31 05       	cpc	r19, r1
    4408:	34 f4       	brge	.+12     	; 0x4416 <DIO_ReadPort+0x40>
    440a:	8d 81       	ldd	r24, Y+5	; 0x05
    440c:	9e 81       	ldd	r25, Y+6	; 0x06
    440e:	81 30       	cpi	r24, 0x01	; 1
    4410:	91 05       	cpc	r25, r1
    4412:	61 f0       	breq	.+24     	; 0x442c <DIO_ReadPort+0x56>
    4414:	27 c0       	rjmp	.+78     	; 0x4464 <DIO_ReadPort+0x8e>
    4416:	2d 81       	ldd	r18, Y+5	; 0x05
    4418:	3e 81       	ldd	r19, Y+6	; 0x06
    441a:	23 30       	cpi	r18, 0x03	; 3
    441c:	31 05       	cpc	r19, r1
    441e:	a1 f0       	breq	.+40     	; 0x4448 <DIO_ReadPort+0x72>
    4420:	8d 81       	ldd	r24, Y+5	; 0x05
    4422:	9e 81       	ldd	r25, Y+6	; 0x06
    4424:	84 30       	cpi	r24, 0x04	; 4
    4426:	91 05       	cpc	r25, r1
    4428:	b1 f0       	breq	.+44     	; 0x4456 <DIO_ReadPort+0x80>
    442a:	1c c0       	rjmp	.+56     	; 0x4464 <DIO_ReadPort+0x8e>
	{
	case PORTA: *PortVal = PINA_REG; break;
    442c:	e9 e3       	ldi	r30, 0x39	; 57
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	eb 81       	ldd	r30, Y+3	; 0x03
    4434:	fc 81       	ldd	r31, Y+4	; 0x04
    4436:	80 83       	st	Z, r24
    4438:	17 c0       	rjmp	.+46     	; 0x4468 <DIO_ReadPort+0x92>
	case PORTB: *PortVal = PINB_REG; break;
    443a:	e6 e3       	ldi	r30, 0x36	; 54
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	eb 81       	ldd	r30, Y+3	; 0x03
    4442:	fc 81       	ldd	r31, Y+4	; 0x04
    4444:	80 83       	st	Z, r24
    4446:	10 c0       	rjmp	.+32     	; 0x4468 <DIO_ReadPort+0x92>
	case PORTC: *PortVal = PINC_REG; break;
    4448:	e3 e3       	ldi	r30, 0x33	; 51
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	80 81       	ld	r24, Z
    444e:	eb 81       	ldd	r30, Y+3	; 0x03
    4450:	fc 81       	ldd	r31, Y+4	; 0x04
    4452:	80 83       	st	Z, r24
    4454:	09 c0       	rjmp	.+18     	; 0x4468 <DIO_ReadPort+0x92>
	case PORTD: *PortVal = PIND_REG; break;
    4456:	e0 e3       	ldi	r30, 0x30	; 48
    4458:	f0 e0       	ldi	r31, 0x00	; 0
    445a:	80 81       	ld	r24, Z
    445c:	eb 81       	ldd	r30, Y+3	; 0x03
    445e:	fc 81       	ldd	r31, Y+4	; 0x04
    4460:	80 83       	st	Z, r24
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <DIO_ReadPort+0x92>
	default : ReturnError = FunctionParameterError; break;
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	89 83       	std	Y+1, r24	; 0x01
	}
	return ReturnError;
    4468:	89 81       	ldd	r24, Y+1	; 0x01
}
    446a:	26 96       	adiw	r28, 0x06	; 6
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <KeyPad_Setup>:
#include "KeyPad_Congif.h"
#include "KeyPad.h"
#include "util/delay.h"

void KeyPad_Setup(void)
{
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
		#elif (KEYPAD_COL0 > PIN7) || (KEYPAD_COL1 > PIN7) || (KEYPAD_COL2 > PIN7) || (KEYPAD_COL3 > PIN7)|| (KEYPAD_ROW0 > PIN7) || (KEYPAD_ROW1 > PIN7) || (KEYPAD_ROW2 > PIN7) || (KEYPAD_ROW3> PIN7)
			#error "One of keypad pin in KeyPad_Config.h is not defined correctly"
		#endif /*Error handling*/

		/*Set keypad rows as input*/
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW0,DIO_INPUT_PULLUP_PIN);
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	64 e0       	ldi	r22, 0x04	; 4
    4488:	43 e0       	ldi	r20, 0x03	; 3
    448a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW1,DIO_INPUT_PULLUP_PIN);
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	65 e0       	ldi	r22, 0x05	; 5
    4492:	43 e0       	ldi	r20, 0x03	; 3
    4494:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW2,DIO_INPUT_PULLUP_PIN);
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	66 e0       	ldi	r22, 0x06	; 6
    449c:	43 e0       	ldi	r20, 0x03	; 3
    449e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_ROW3,DIO_INPUT_PULLUP_PIN);
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	67 e0       	ldi	r22, 0x07	; 7
    44a6:	43 e0       	ldi	r20, 0x03	; 3
    44a8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		/*Set keypad col as output*/
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL0,DIO_OUTPUT_PIN);
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	60 e0       	ldi	r22, 0x00	; 0
    44b0:	41 e0       	ldi	r20, 0x01	; 1
    44b2:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL1,DIO_OUTPUT_PIN);
    44b6:	81 e0       	ldi	r24, 0x01	; 1
    44b8:	61 e0       	ldi	r22, 0x01	; 1
    44ba:	41 e0       	ldi	r20, 0x01	; 1
    44bc:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL2,DIO_OUTPUT_PIN);
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	62 e0       	ldi	r22, 0x02	; 2
    44c4:	41 e0       	ldi	r20, 0x01	; 1
    44c6:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		DIO_SetPinDirection(KEYPAD_PORT,KEYPAD_COL3,DIO_OUTPUT_PIN);
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	63 e0       	ldi	r22, 0x03	; 3
    44ce:	41 e0       	ldi	r20, 0x01	; 1
    44d0:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <DIO_SetPinDirection>
		/*Set keypad rows as high initial state*/
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL0,DIO_HIGH_PIN);
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	60 e0       	ldi	r22, 0x00	; 0
    44d8:	41 e0       	ldi	r20, 0x01	; 1
    44da:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL1,DIO_HIGH_PIN);
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	61 e0       	ldi	r22, 0x01	; 1
    44e2:	41 e0       	ldi	r20, 0x01	; 1
    44e4:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL2,DIO_HIGH_PIN);
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	62 e0       	ldi	r22, 0x02	; 2
    44ec:	41 e0       	ldi	r20, 0x01	; 1
    44ee:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		DIO_WritePin(KEYPAD_PORT,KEYPAD_COL3,DIO_HIGH_PIN);
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	63 e0       	ldi	r22, 0x03	; 3
    44f6:	41 e0       	ldi	r20, 0x01	; 1
    44f8:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
	#endif /*KEYPAD_TYPE*/
}
    44fc:	cf 91       	pop	r28
    44fe:	df 91       	pop	r29
    4500:	08 95       	ret

00004502 <KeyPad_GetValue>:
void KeyPad_GetValue(uint8_t *ReturnedValue)
{
    4502:	df 93       	push	r29
    4504:	cf 93       	push	r28
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	6a 97       	sbiw	r28, 0x1a	; 26
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
    4516:	9d 8b       	std	Y+21, r25	; 0x15
    4518:	8c 8b       	std	Y+20, r24	; 0x14
	*ReturnedValue = KEYPAD_NOT_PRESSED;
    451a:	ec 89       	ldd	r30, Y+20	; 0x14
    451c:	fd 89       	ldd	r31, Y+21	; 0x15
    451e:	8f ef       	ldi	r24, 0xFF	; 255
    4520:	80 83       	st	Z, r24
	#if KEYPAD_TYPE == KeyPad_4x4
		uint8_t KeyPad_Arr[4][4] = KEYPAD_CHARACTERS;
    4522:	ce 01       	movw	r24, r28
    4524:	03 96       	adiw	r24, 0x03	; 3
    4526:	9f 8b       	std	Y+23, r25	; 0x17
    4528:	8e 8b       	std	Y+22, r24	; 0x16
    452a:	e4 ea       	ldi	r30, 0xA4	; 164
    452c:	f1 e0       	ldi	r31, 0x01	; 1
    452e:	f9 8f       	std	Y+25, r31	; 0x19
    4530:	e8 8f       	std	Y+24, r30	; 0x18
    4532:	f0 e1       	ldi	r31, 0x10	; 16
    4534:	fa 8f       	std	Y+26, r31	; 0x1a
    4536:	e8 8d       	ldd	r30, Y+24	; 0x18
    4538:	f9 8d       	ldd	r31, Y+25	; 0x19
    453a:	00 80       	ld	r0, Z
    453c:	88 8d       	ldd	r24, Y+24	; 0x18
    453e:	99 8d       	ldd	r25, Y+25	; 0x19
    4540:	01 96       	adiw	r24, 0x01	; 1
    4542:	99 8f       	std	Y+25, r25	; 0x19
    4544:	88 8f       	std	Y+24, r24	; 0x18
    4546:	ee 89       	ldd	r30, Y+22	; 0x16
    4548:	ff 89       	ldd	r31, Y+23	; 0x17
    454a:	00 82       	st	Z, r0
    454c:	8e 89       	ldd	r24, Y+22	; 0x16
    454e:	9f 89       	ldd	r25, Y+23	; 0x17
    4550:	01 96       	adiw	r24, 0x01	; 1
    4552:	9f 8b       	std	Y+23, r25	; 0x17
    4554:	8e 8b       	std	Y+22, r24	; 0x16
    4556:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4558:	91 50       	subi	r25, 0x01	; 1
    455a:	9a 8f       	std	Y+26, r25	; 0x1a
    455c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    455e:	ee 23       	and	r30, r30
    4560:	51 f7       	brne	.-44     	; 0x4536 <KeyPad_GetValue+0x34>
		const uint8_t Col_Arr[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
		const uint8_t Row_Arr[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
		uint8_t ColIterator = 0;
    4562:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t RowIterator = 0;
    4564:	19 82       	std	Y+1, r1	; 0x01
		uint8_t RowVal = DIO_HIGH_PIN;
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	8b 8b       	std	Y+19, r24	; 0x13
		for(ColIterator = 0 ; ColIterator < 4 ; ColIterator++)
    456a:	1a 82       	std	Y+2, r1	; 0x02
    456c:	5b c0       	rjmp	.+182    	; 0x4624 <KeyPad_GetValue+0x122>
		{
			/*Drive a high signal for required col*/
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_LOW_PIN);
    456e:	8a 81       	ldd	r24, Y+2	; 0x02
    4570:	88 2f       	mov	r24, r24
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	fc 01       	movw	r30, r24
    4576:	e0 56       	subi	r30, 0x60	; 96
    4578:	fe 4f       	sbci	r31, 0xFE	; 254
    457a:	90 81       	ld	r25, Z
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	69 2f       	mov	r22, r25
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
			/*Check if the high signal dirved to row*/
			for(RowIterator = 0 ; RowIterator < 4 ; RowIterator++)
    4586:	19 82       	std	Y+1, r1	; 0x01
    4588:	3b c0       	rjmp	.+118    	; 0x4600 <KeyPad_GetValue+0xfe>
			{
				DIO_ReadPin(KEYPAD_PORT,Row_Arr[RowIterator],&RowVal);
    458a:	89 81       	ldd	r24, Y+1	; 0x01
    458c:	88 2f       	mov	r24, r24
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	fc 01       	movw	r30, r24
    4592:	e4 56       	subi	r30, 0x64	; 100
    4594:	fe 4f       	sbci	r31, 0xFE	; 254
    4596:	90 81       	ld	r25, Z
    4598:	9e 01       	movw	r18, r28
    459a:	2d 5e       	subi	r18, 0xED	; 237
    459c:	3f 4f       	sbci	r19, 0xFF	; 255
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	69 2f       	mov	r22, r25
    45a2:	a9 01       	movw	r20, r18
    45a4:	0e 94 28 21 	call	0x4250	; 0x4250 <DIO_ReadPin>
				if(RowVal == DIO_LOW_PIN)
    45a8:	8b 89       	ldd	r24, Y+19	; 0x13
    45aa:	88 23       	and	r24, r24
    45ac:	31 f5       	brne	.+76     	; 0x45fa <KeyPad_GetValue+0xf8>
				{
					*ReturnedValue = KeyPad_Arr[RowIterator][ColIterator];
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	28 2f       	mov	r18, r24
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	8a 81       	ldd	r24, Y+2	; 0x02
    45b6:	48 2f       	mov	r20, r24
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	22 0f       	add	r18, r18
    45bc:	33 1f       	adc	r19, r19
    45be:	22 0f       	add	r18, r18
    45c0:	33 1f       	adc	r19, r19
    45c2:	ce 01       	movw	r24, r28
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	82 0f       	add	r24, r18
    45c8:	93 1f       	adc	r25, r19
    45ca:	84 0f       	add	r24, r20
    45cc:	95 1f       	adc	r25, r21
    45ce:	fc 01       	movw	r30, r24
    45d0:	32 96       	adiw	r30, 0x02	; 2
    45d2:	80 81       	ld	r24, Z
    45d4:	ec 89       	ldd	r30, Y+20	; 0x14
    45d6:	fd 89       	ldd	r31, Y+21	; 0x15
    45d8:	80 83       	st	Z, r24
					DIO_ReadPin(KEYPAD_PORT,Row_Arr[RowIterator],&RowVal);
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	88 2f       	mov	r24, r24
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	fc 01       	movw	r30, r24
    45e2:	e4 56       	subi	r30, 0x64	; 100
    45e4:	fe 4f       	sbci	r31, 0xFE	; 254
    45e6:	90 81       	ld	r25, Z
    45e8:	9e 01       	movw	r18, r28
    45ea:	2d 5e       	subi	r18, 0xED	; 237
    45ec:	3f 4f       	sbci	r19, 0xFF	; 255
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	69 2f       	mov	r22, r25
    45f2:	a9 01       	movw	r20, r18
    45f4:	0e 94 28 21 	call	0x4250	; 0x4250 <DIO_ReadPin>
    45f8:	06 c0       	rjmp	.+12     	; 0x4606 <KeyPad_GetValue+0x104>
		for(ColIterator = 0 ; ColIterator < 4 ; ColIterator++)
		{
			/*Drive a high signal for required col*/
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_LOW_PIN);
			/*Check if the high signal dirved to row*/
			for(RowIterator = 0 ; RowIterator < 4 ; RowIterator++)
    45fa:	89 81       	ldd	r24, Y+1	; 0x01
    45fc:	8f 5f       	subi	r24, 0xFF	; 255
    45fe:	89 83       	std	Y+1, r24	; 0x01
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	84 30       	cpi	r24, 0x04	; 4
    4604:	10 f2       	brcs	.-124    	; 0x458a <KeyPad_GetValue+0x88>
					*ReturnedValue = KeyPad_Arr[RowIterator][ColIterator];
					DIO_ReadPin(KEYPAD_PORT,Row_Arr[RowIterator],&RowVal);
					break;
				}
			}
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_HIGH_PIN);
    4606:	8a 81       	ldd	r24, Y+2	; 0x02
    4608:	88 2f       	mov	r24, r24
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	fc 01       	movw	r30, r24
    460e:	e0 56       	subi	r30, 0x60	; 96
    4610:	fe 4f       	sbci	r31, 0xFE	; 254
    4612:	90 81       	ld	r25, Z
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	69 2f       	mov	r22, r25
    4618:	41 e0       	ldi	r20, 0x01	; 1
    461a:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <DIO_WritePin>
		const uint8_t Col_Arr[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
		const uint8_t Row_Arr[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
		uint8_t ColIterator = 0;
		uint8_t RowIterator = 0;
		uint8_t RowVal = DIO_HIGH_PIN;
		for(ColIterator = 0 ; ColIterator < 4 ; ColIterator++)
    461e:	8a 81       	ldd	r24, Y+2	; 0x02
    4620:	8f 5f       	subi	r24, 0xFF	; 255
    4622:	8a 83       	std	Y+2, r24	; 0x02
    4624:	8a 81       	ldd	r24, Y+2	; 0x02
    4626:	84 30       	cpi	r24, 0x04	; 4
    4628:	08 f4       	brcc	.+2      	; 0x462c <KeyPad_GetValue+0x12a>
    462a:	a1 cf       	rjmp	.-190    	; 0x456e <KeyPad_GetValue+0x6c>
				}
			}
			DIO_WritePin(KEYPAD_PORT,Col_Arr[ColIterator],DIO_HIGH_PIN);
		}
	#endif /*KEYPAD_TYPE*/
}
    462c:	6a 96       	adiw	r28, 0x1a	; 26
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	08 95       	ret

0000463e <Stack8_Initiate>:

#include "Std_DataType.h"
#include "Stack.h"

void Stack8_Initiate(Stack8_t *Stack)
{
    463e:	df 93       	push	r29
    4640:	cf 93       	push	r28
    4642:	00 d0       	rcall	.+0      	; 0x4644 <Stack8_Initiate+0x6>
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	9a 83       	std	Y+2, r25	; 0x02
    464a:	89 83       	std	Y+1, r24	; 0x01
	Stack->Top = 0;
    464c:	e9 81       	ldd	r30, Y+1	; 0x01
    464e:	fa 81       	ldd	r31, Y+2	; 0x02
    4650:	10 82       	st	Z, r1
	Stack->Size = 0;
    4652:	e9 81       	ldd	r30, Y+1	; 0x01
    4654:	fa 81       	ldd	r31, Y+2	; 0x02
    4656:	11 82       	std	Z+1, r1	; 0x01
}
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	cf 91       	pop	r28
    465e:	df 91       	pop	r29
    4660:	08 95       	ret

00004662 <Stack8_Push>:
void Stack8_Push(Stack8_t *Stack , uint8_t *PushedElement)
{
    4662:	df 93       	push	r29
    4664:	cf 93       	push	r28
    4666:	00 d0       	rcall	.+0      	; 0x4668 <Stack8_Push+0x6>
    4668:	00 d0       	rcall	.+0      	; 0x466a <Stack8_Push+0x8>
    466a:	cd b7       	in	r28, 0x3d	; 61
    466c:	de b7       	in	r29, 0x3e	; 62
    466e:	9a 83       	std	Y+2, r25	; 0x02
    4670:	89 83       	std	Y+1, r24	; 0x01
    4672:	7c 83       	std	Y+4, r23	; 0x04
    4674:	6b 83       	std	Y+3, r22	; 0x03
	Stack->StackArr[Stack->Top] = *PushedElement;
    4676:	e9 81       	ldd	r30, Y+1	; 0x01
    4678:	fa 81       	ldd	r31, Y+2	; 0x02
    467a:	80 81       	ld	r24, Z
    467c:	28 2f       	mov	r18, r24
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	eb 81       	ldd	r30, Y+3	; 0x03
    4682:	fc 81       	ldd	r31, Y+4	; 0x04
    4684:	40 81       	ld	r20, Z
    4686:	89 81       	ldd	r24, Y+1	; 0x01
    4688:	9a 81       	ldd	r25, Y+2	; 0x02
    468a:	82 0f       	add	r24, r18
    468c:	93 1f       	adc	r25, r19
    468e:	fc 01       	movw	r30, r24
    4690:	32 96       	adiw	r30, 0x02	; 2
    4692:	40 83       	st	Z, r20
	Stack->Top ++;
    4694:	e9 81       	ldd	r30, Y+1	; 0x01
    4696:	fa 81       	ldd	r31, Y+2	; 0x02
    4698:	80 81       	ld	r24, Z
    469a:	8f 5f       	subi	r24, 0xFF	; 255
    469c:	e9 81       	ldd	r30, Y+1	; 0x01
    469e:	fa 81       	ldd	r31, Y+2	; 0x02
    46a0:	80 83       	st	Z, r24
	Stack->Size ++;
    46a2:	e9 81       	ldd	r30, Y+1	; 0x01
    46a4:	fa 81       	ldd	r31, Y+2	; 0x02
    46a6:	81 81       	ldd	r24, Z+1	; 0x01
    46a8:	8f 5f       	subi	r24, 0xFF	; 255
    46aa:	e9 81       	ldd	r30, Y+1	; 0x01
    46ac:	fa 81       	ldd	r31, Y+2	; 0x02
    46ae:	81 83       	std	Z+1, r24	; 0x01
}
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	cf 91       	pop	r28
    46ba:	df 91       	pop	r29
    46bc:	08 95       	ret

000046be <Stack8_Pop>:
void Stack8_Pop(Stack8_t *Stack , uint8_t *PopedElement)
{
    46be:	df 93       	push	r29
    46c0:	cf 93       	push	r28
    46c2:	00 d0       	rcall	.+0      	; 0x46c4 <Stack8_Pop+0x6>
    46c4:	00 d0       	rcall	.+0      	; 0x46c6 <Stack8_Pop+0x8>
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    46ca:	9a 83       	std	Y+2, r25	; 0x02
    46cc:	89 83       	std	Y+1, r24	; 0x01
    46ce:	7c 83       	std	Y+4, r23	; 0x04
    46d0:	6b 83       	std	Y+3, r22	; 0x03
	Stack->Top --;
    46d2:	e9 81       	ldd	r30, Y+1	; 0x01
    46d4:	fa 81       	ldd	r31, Y+2	; 0x02
    46d6:	80 81       	ld	r24, Z
    46d8:	81 50       	subi	r24, 0x01	; 1
    46da:	e9 81       	ldd	r30, Y+1	; 0x01
    46dc:	fa 81       	ldd	r31, Y+2	; 0x02
    46de:	80 83       	st	Z, r24
	*PopedElement = Stack->StackArr[Stack->Top];
    46e0:	e9 81       	ldd	r30, Y+1	; 0x01
    46e2:	fa 81       	ldd	r31, Y+2	; 0x02
    46e4:	80 81       	ld	r24, Z
    46e6:	28 2f       	mov	r18, r24
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	82 0f       	add	r24, r18
    46f0:	93 1f       	adc	r25, r19
    46f2:	fc 01       	movw	r30, r24
    46f4:	32 96       	adiw	r30, 0x02	; 2
    46f6:	80 81       	ld	r24, Z
    46f8:	eb 81       	ldd	r30, Y+3	; 0x03
    46fa:	fc 81       	ldd	r31, Y+4	; 0x04
    46fc:	80 83       	st	Z, r24
	Stack->Size --;
    46fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4700:	fa 81       	ldd	r31, Y+2	; 0x02
    4702:	81 81       	ldd	r24, Z+1	; 0x01
    4704:	81 50       	subi	r24, 0x01	; 1
    4706:	e9 81       	ldd	r30, Y+1	; 0x01
    4708:	fa 81       	ldd	r31, Y+2	; 0x02
    470a:	81 83       	std	Z+1, r24	; 0x01
}
    470c:	0f 90       	pop	r0
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <Stack8_Top>:

uint8_t Stack8_Top(Stack8_t *Stack)
{
    471a:	df 93       	push	r29
    471c:	cf 93       	push	r28
    471e:	00 d0       	rcall	.+0      	; 0x4720 <Stack8_Top+0x6>
    4720:	cd b7       	in	r28, 0x3d	; 61
    4722:	de b7       	in	r29, 0x3e	; 62
    4724:	9a 83       	std	Y+2, r25	; 0x02
    4726:	89 83       	std	Y+1, r24	; 0x01
	return Stack->StackArr[(Stack->Top) - 1];
    4728:	e9 81       	ldd	r30, Y+1	; 0x01
    472a:	fa 81       	ldd	r31, Y+2	; 0x02
    472c:	80 81       	ld	r24, Z
    472e:	88 2f       	mov	r24, r24
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	9c 01       	movw	r18, r24
    4734:	21 50       	subi	r18, 0x01	; 1
    4736:	30 40       	sbci	r19, 0x00	; 0
    4738:	89 81       	ldd	r24, Y+1	; 0x01
    473a:	9a 81       	ldd	r25, Y+2	; 0x02
    473c:	82 0f       	add	r24, r18
    473e:	93 1f       	adc	r25, r19
    4740:	fc 01       	movw	r30, r24
    4742:	32 96       	adiw	r30, 0x02	; 2
    4744:	80 81       	ld	r24, Z
}
    4746:	0f 90       	pop	r0
    4748:	0f 90       	pop	r0
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <Stack8_Size>:
void Stack8_Size(Stack8_t *Stack , uint8_t *StackSize)
{
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	00 d0       	rcall	.+0      	; 0x4756 <Stack8_Size+0x6>
    4756:	00 d0       	rcall	.+0      	; 0x4758 <Stack8_Size+0x8>
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	9a 83       	std	Y+2, r25	; 0x02
    475e:	89 83       	std	Y+1, r24	; 0x01
    4760:	7c 83       	std	Y+4, r23	; 0x04
    4762:	6b 83       	std	Y+3, r22	; 0x03
	*StackSize = Stack->Size;
    4764:	e9 81       	ldd	r30, Y+1	; 0x01
    4766:	fa 81       	ldd	r31, Y+2	; 0x02
    4768:	81 81       	ldd	r24, Z+1	; 0x01
    476a:	eb 81       	ldd	r30, Y+3	; 0x03
    476c:	fc 81       	ldd	r31, Y+4	; 0x04
    476e:	80 83       	st	Z, r24
}
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	cf 91       	pop	r28
    477a:	df 91       	pop	r29
    477c:	08 95       	ret

0000477e <Stack16_Initiate>:


void Stack16_Initiate(Stack16_t *Stack)
{
    477e:	df 93       	push	r29
    4780:	cf 93       	push	r28
    4782:	00 d0       	rcall	.+0      	; 0x4784 <Stack16_Initiate+0x6>
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	9a 83       	std	Y+2, r25	; 0x02
    478a:	89 83       	std	Y+1, r24	; 0x01
	Stack->Top = 0;
    478c:	e9 81       	ldd	r30, Y+1	; 0x01
    478e:	fa 81       	ldd	r31, Y+2	; 0x02
    4790:	10 82       	st	Z, r1
	Stack->Size = 0;
    4792:	e9 81       	ldd	r30, Y+1	; 0x01
    4794:	fa 81       	ldd	r31, Y+2	; 0x02
    4796:	11 82       	std	Z+1, r1	; 0x01
}
    4798:	0f 90       	pop	r0
    479a:	0f 90       	pop	r0
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	08 95       	ret

000047a2 <Stack16_Push>:

void Stack16_Push(Stack16_t *Stack,float32_t *PushedElement)
{
    47a2:	df 93       	push	r29
    47a4:	cf 93       	push	r28
    47a6:	00 d0       	rcall	.+0      	; 0x47a8 <Stack16_Push+0x6>
    47a8:	00 d0       	rcall	.+0      	; 0x47aa <Stack16_Push+0x8>
    47aa:	cd b7       	in	r28, 0x3d	; 61
    47ac:	de b7       	in	r29, 0x3e	; 62
    47ae:	9a 83       	std	Y+2, r25	; 0x02
    47b0:	89 83       	std	Y+1, r24	; 0x01
    47b2:	7c 83       	std	Y+4, r23	; 0x04
    47b4:	6b 83       	std	Y+3, r22	; 0x03
	Stack->StackArr[Stack->Top] = *PushedElement;
    47b6:	e9 81       	ldd	r30, Y+1	; 0x01
    47b8:	fa 81       	ldd	r31, Y+2	; 0x02
    47ba:	80 81       	ld	r24, Z
    47bc:	88 2f       	mov	r24, r24
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	eb 81       	ldd	r30, Y+3	; 0x03
    47c2:	fc 81       	ldd	r31, Y+4	; 0x04
    47c4:	20 81       	ld	r18, Z
    47c6:	31 81       	ldd	r19, Z+1	; 0x01
    47c8:	42 81       	ldd	r20, Z+2	; 0x02
    47ca:	53 81       	ldd	r21, Z+3	; 0x03
    47cc:	69 81       	ldd	r22, Y+1	; 0x01
    47ce:	7a 81       	ldd	r23, Y+2	; 0x02
    47d0:	88 0f       	add	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	01 96       	adiw	r24, 0x01	; 1
    47d6:	88 0f       	add	r24, r24
    47d8:	99 1f       	adc	r25, r25
    47da:	fb 01       	movw	r30, r22
    47dc:	e8 0f       	add	r30, r24
    47de:	f9 1f       	adc	r31, r25
    47e0:	20 83       	st	Z, r18
    47e2:	31 83       	std	Z+1, r19	; 0x01
    47e4:	42 83       	std	Z+2, r20	; 0x02
    47e6:	53 83       	std	Z+3, r21	; 0x03
	Stack->Top ++;
    47e8:	e9 81       	ldd	r30, Y+1	; 0x01
    47ea:	fa 81       	ldd	r31, Y+2	; 0x02
    47ec:	80 81       	ld	r24, Z
    47ee:	8f 5f       	subi	r24, 0xFF	; 255
    47f0:	e9 81       	ldd	r30, Y+1	; 0x01
    47f2:	fa 81       	ldd	r31, Y+2	; 0x02
    47f4:	80 83       	st	Z, r24
	Stack->Size ++;
    47f6:	e9 81       	ldd	r30, Y+1	; 0x01
    47f8:	fa 81       	ldd	r31, Y+2	; 0x02
    47fa:	81 81       	ldd	r24, Z+1	; 0x01
    47fc:	8f 5f       	subi	r24, 0xFF	; 255
    47fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4800:	fa 81       	ldd	r31, Y+2	; 0x02
    4802:	81 83       	std	Z+1, r24	; 0x01
}
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	08 95       	ret

00004812 <Stack16_Pop>:
void Stack16_Pop(Stack16_t *Stack, float32_t *PopedElement)
{
    4812:	df 93       	push	r29
    4814:	cf 93       	push	r28
    4816:	00 d0       	rcall	.+0      	; 0x4818 <Stack16_Pop+0x6>
    4818:	00 d0       	rcall	.+0      	; 0x481a <Stack16_Pop+0x8>
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	9a 83       	std	Y+2, r25	; 0x02
    4820:	89 83       	std	Y+1, r24	; 0x01
    4822:	7c 83       	std	Y+4, r23	; 0x04
    4824:	6b 83       	std	Y+3, r22	; 0x03
	Stack->Top --;
    4826:	e9 81       	ldd	r30, Y+1	; 0x01
    4828:	fa 81       	ldd	r31, Y+2	; 0x02
    482a:	80 81       	ld	r24, Z
    482c:	81 50       	subi	r24, 0x01	; 1
    482e:	e9 81       	ldd	r30, Y+1	; 0x01
    4830:	fa 81       	ldd	r31, Y+2	; 0x02
    4832:	80 83       	st	Z, r24
	*PopedElement = Stack->StackArr[Stack->Top];
    4834:	e9 81       	ldd	r30, Y+1	; 0x01
    4836:	fa 81       	ldd	r31, Y+2	; 0x02
    4838:	80 81       	ld	r24, Z
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	29 81       	ldd	r18, Y+1	; 0x01
    4840:	3a 81       	ldd	r19, Y+2	; 0x02
    4842:	88 0f       	add	r24, r24
    4844:	99 1f       	adc	r25, r25
    4846:	01 96       	adiw	r24, 0x01	; 1
    4848:	88 0f       	add	r24, r24
    484a:	99 1f       	adc	r25, r25
    484c:	f9 01       	movw	r30, r18
    484e:	e8 0f       	add	r30, r24
    4850:	f9 1f       	adc	r31, r25
    4852:	80 81       	ld	r24, Z
    4854:	91 81       	ldd	r25, Z+1	; 0x01
    4856:	a2 81       	ldd	r26, Z+2	; 0x02
    4858:	b3 81       	ldd	r27, Z+3	; 0x03
    485a:	eb 81       	ldd	r30, Y+3	; 0x03
    485c:	fc 81       	ldd	r31, Y+4	; 0x04
    485e:	80 83       	st	Z, r24
    4860:	91 83       	std	Z+1, r25	; 0x01
    4862:	a2 83       	std	Z+2, r26	; 0x02
    4864:	b3 83       	std	Z+3, r27	; 0x03
	Stack->Size --;
    4866:	e9 81       	ldd	r30, Y+1	; 0x01
    4868:	fa 81       	ldd	r31, Y+2	; 0x02
    486a:	81 81       	ldd	r24, Z+1	; 0x01
    486c:	81 50       	subi	r24, 0x01	; 1
    486e:	e9 81       	ldd	r30, Y+1	; 0x01
    4870:	fa 81       	ldd	r31, Y+2	; 0x02
    4872:	81 83       	std	Z+1, r24	; 0x01
}
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	08 95       	ret

00004882 <Stack16_Top>:
void Stack16_Top(Stack8_t *Stack , float32_t *TopElement)
{
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	00 d0       	rcall	.+0      	; 0x4888 <Stack16_Top+0x6>
    4888:	00 d0       	rcall	.+0      	; 0x488a <Stack16_Top+0x8>
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	9a 83       	std	Y+2, r25	; 0x02
    4890:	89 83       	std	Y+1, r24	; 0x01
    4892:	7c 83       	std	Y+4, r23	; 0x04
    4894:	6b 83       	std	Y+3, r22	; 0x03
	*TopElement = Stack->StackArr[(Stack->Top) - 1];
    4896:	e9 81       	ldd	r30, Y+1	; 0x01
    4898:	fa 81       	ldd	r31, Y+2	; 0x02
    489a:	80 81       	ld	r24, Z
    489c:	88 2f       	mov	r24, r24
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	9c 01       	movw	r18, r24
    48a2:	21 50       	subi	r18, 0x01	; 1
    48a4:	30 40       	sbci	r19, 0x00	; 0
    48a6:	89 81       	ldd	r24, Y+1	; 0x01
    48a8:	9a 81       	ldd	r25, Y+2	; 0x02
    48aa:	82 0f       	add	r24, r18
    48ac:	93 1f       	adc	r25, r19
    48ae:	fc 01       	movw	r30, r24
    48b0:	32 96       	adiw	r30, 0x02	; 2
    48b2:	80 81       	ld	r24, Z
    48b4:	88 2f       	mov	r24, r24
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	a0 e0       	ldi	r26, 0x00	; 0
    48ba:	b0 e0       	ldi	r27, 0x00	; 0
    48bc:	bc 01       	movw	r22, r24
    48be:	cd 01       	movw	r24, r26
    48c0:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	eb 81       	ldd	r30, Y+3	; 0x03
    48ca:	fc 81       	ldd	r31, Y+4	; 0x04
    48cc:	80 83       	st	Z, r24
    48ce:	91 83       	std	Z+1, r25	; 0x01
    48d0:	a2 83       	std	Z+2, r26	; 0x02
    48d2:	b3 83       	std	Z+3, r27	; 0x03
}
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	0f 90       	pop	r0
    48dc:	cf 91       	pop	r28
    48de:	df 91       	pop	r29
    48e0:	08 95       	ret

000048e2 <Stack16_Size>:
void Stack16_Size(Stack16_t *Stack , uint8_t *StackSize)
{
    48e2:	df 93       	push	r29
    48e4:	cf 93       	push	r28
    48e6:	00 d0       	rcall	.+0      	; 0x48e8 <Stack16_Size+0x6>
    48e8:	00 d0       	rcall	.+0      	; 0x48ea <Stack16_Size+0x8>
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
    48ee:	9a 83       	std	Y+2, r25	; 0x02
    48f0:	89 83       	std	Y+1, r24	; 0x01
    48f2:	7c 83       	std	Y+4, r23	; 0x04
    48f4:	6b 83       	std	Y+3, r22	; 0x03
	*StackSize = Stack->Size;
    48f6:	e9 81       	ldd	r30, Y+1	; 0x01
    48f8:	fa 81       	ldd	r31, Y+2	; 0x02
    48fa:	81 81       	ldd	r24, Z+1	; 0x01
    48fc:	eb 81       	ldd	r30, Y+3	; 0x03
    48fe:	fc 81       	ldd	r31, Y+4	; 0x04
    4900:	80 83       	st	Z, r24
}
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	cf 91       	pop	r28
    490c:	df 91       	pop	r29
    490e:	08 95       	ret

00004910 <main>:
/*Include App files*/
#include "Calculator.h"


void main (void)
{
    4910:	ef 92       	push	r14
    4912:	ff 92       	push	r15
    4914:	0f 93       	push	r16
    4916:	1f 93       	push	r17
    4918:	df 93       	push	r29
    491a:	cf 93       	push	r28
    491c:	cd b7       	in	r28, 0x3d	; 61
    491e:	de b7       	in	r29, 0x3e	; 62
    4920:	cc 5a       	subi	r28, 0xAC	; 172
    4922:	d0 40       	sbci	r29, 0x00	; 0
    4924:	0f b6       	in	r0, 0x3f	; 63
    4926:	f8 94       	cli
    4928:	de bf       	out	0x3e, r29	; 62
    492a:	0f be       	out	0x3f, r0	; 63
    492c:	cd bf       	out	0x3d, r28	; 61
	/*Initiate calculator*/
	Calculator_Initiate();
    492e:	0e 94 1d 1a 	call	0x343a	; 0x343a <Calculator_Initiate>

	uint8_t CastVariable; /*This temp variable is used to cast array elemnts to uint8_t before passing it*/
	float32_t MathExpressionArr[16] = {32761};
    4932:	80 e4       	ldi	r24, 0x40	; 64
    4934:	fe 01       	movw	r30, r28
    4936:	38 96       	adiw	r30, 0x08	; 8
    4938:	df 01       	movw	r26, r30
    493a:	98 2f       	mov	r25, r24
    493c:	1d 92       	st	X+, r1
    493e:	9a 95       	dec	r25
    4940:	e9 f7       	brne	.-6      	; 0x493c <main+0x2c>
    4942:	80 e0       	ldi	r24, 0x00	; 0
    4944:	92 ef       	ldi	r25, 0xF2	; 242
    4946:	af ef       	ldi	r26, 0xFF	; 255
    4948:	b6 e4       	ldi	r27, 0x46	; 70
    494a:	88 87       	std	Y+8, r24	; 0x08
    494c:	99 87       	std	Y+9, r25	; 0x09
    494e:	aa 87       	std	Y+10, r26	; 0x0a
    4950:	bb 87       	std	Y+11, r27	; 0x0b
	uint8_t MathExpressionLastIndex = 0;
    4952:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t PressedNumber = KEYPAD_NOT_PRESSED;
    4954:	fe 01       	movw	r30, r28
    4956:	e8 5b       	subi	r30, 0xB8	; 184
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	8f ef       	ldi	r24, 0xFF	; 255
    495c:	80 83       	st	Z, r24
	float32_t Number = 0;
    495e:	80 e0       	ldi	r24, 0x00	; 0
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	a0 e0       	ldi	r26, 0x00	; 0
    4964:	b0 e0       	ldi	r27, 0x00	; 0
    4966:	8a 83       	std	Y+2, r24	; 0x02
    4968:	9b 83       	std	Y+3, r25	; 0x03
    496a:	ac 83       	std	Y+4, r26	; 0x04
    496c:	bd 83       	std	Y+5, r27	; 0x05
	float32_t FirstOperand = 0;
    496e:	fe 01       	movw	r30, r28
    4970:	e7 5b       	subi	r30, 0xB7	; 183
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	a0 e0       	ldi	r26, 0x00	; 0
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	80 83       	st	Z, r24
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	a2 83       	std	Z+2, r26	; 0x02
    4982:	b3 83       	std	Z+3, r27	; 0x03
	float32_t SecondOperand = 0;
    4984:	fe 01       	movw	r30, r28
    4986:	e3 5b       	subi	r30, 0xB3	; 179
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	a0 e0       	ldi	r26, 0x00	; 0
    4990:	b0 e0       	ldi	r27, 0x00	; 0
    4992:	80 83       	st	Z, r24
    4994:	91 83       	std	Z+1, r25	; 0x01
    4996:	a2 83       	std	Z+2, r26	; 0x02
    4998:	b3 83       	std	Z+3, r27	; 0x03
	uint8_t Operator = 0;
    499a:	fe 01       	movw	r30, r28
    499c:	ef 5a       	subi	r30, 0xAF	; 175
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	10 82       	st	Z, r1
	uint8_t i = 0;
    49a2:	19 82       	std	Y+1, r1	; 0x01
	float32_t Result = 0;
    49a4:	fe 01       	movw	r30, r28
    49a6:	ee 5a       	subi	r30, 0xAE	; 174
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	80 e0       	ldi	r24, 0x00	; 0
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	80 83       	st	Z, r24
    49b4:	91 83       	std	Z+1, r25	; 0x01
    49b6:	a2 83       	std	Z+2, r26	; 0x02
    49b8:	b3 83       	std	Z+3, r27	; 0x03
	bool SyntaxErrorFlag = false;
    49ba:	fe 01       	movw	r30, r28
    49bc:	ea 5a       	subi	r30, 0xAA	; 170
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	10 82       	st	Z, r1
	bool MathErrorFlag   = false;
    49c2:	fe 01       	movw	r30, r28
    49c4:	e9 5a       	subi	r30, 0xA9	; 169
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	10 82       	st	Z, r1

	Stack8_t  OperatorStack ;
	Stack16_t OperandStack  ;
	uint8_t StackSize = 0;
    49ca:	fe 01       	movw	r30, r28
    49cc:	e4 55       	subi	r30, 0x54	; 84
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	10 82       	st	Z, r1
	Stack8_Initiate(&OperatorStack);
    49d2:	ce 01       	movw	r24, r28
    49d4:	88 5a       	subi	r24, 0xA8	; 168
    49d6:	9f 4f       	sbci	r25, 0xFF	; 255
    49d8:	0e 94 1f 23 	call	0x463e	; 0x463e <Stack8_Initiate>
	Stack16_Initiate(&OperandStack);
    49dc:	ce 01       	movw	r24, r28
    49de:	86 59       	subi	r24, 0x96	; 150
    49e0:	9f 4f       	sbci	r25, 0xFF	; 255
    49e2:	0e 94 bf 23 	call	0x477e	; 0x477e <Stack16_Initiate>
		/*Get the math expression*/
		while(1)
		{
			do
			{
				KeyPad_GetValue(&PressedNumber);
    49e6:	ce 01       	movw	r24, r28
    49e8:	88 5b       	subi	r24, 0xB8	; 184
    49ea:	9f 4f       	sbci	r25, 0xFF	; 255
    49ec:	0e 94 81 22 	call	0x4502	; 0x4502 <KeyPad_GetValue>
			}
			while(PressedNumber == KEYPAD_NOT_PRESSED);
    49f0:	fe 01       	movw	r30, r28
    49f2:	e8 5b       	subi	r30, 0xB8	; 184
    49f4:	ff 4f       	sbci	r31, 0xFF	; 255
    49f6:	80 81       	ld	r24, Z
    49f8:	8f 3f       	cpi	r24, 0xFF	; 255
    49fa:	a9 f3       	breq	.-22     	; 0x49e6 <main+0xd6>

			if(PressedNumber != KEYPAD_NOT_PRESSED && PressedNumber != 'O')
    49fc:	fe 01       	movw	r30, r28
    49fe:	e8 5b       	subi	r30, 0xB8	; 184
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	80 81       	ld	r24, Z
    4a04:	8f 3f       	cpi	r24, 0xFF	; 255
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <main+0xfa>
    4a08:	d2 c0       	rjmp	.+420    	; 0x4bae <main+0x29e>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e8 5b       	subi	r30, 0xB8	; 184
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	80 81       	ld	r24, Z
    4a12:	8f 34       	cpi	r24, 0x4F	; 79
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <main+0x108>
    4a16:	cb c0       	rjmp	.+406    	; 0x4bae <main+0x29e>
			{
				if(PressedNumber == '+' || PressedNumber == '-' || PressedNumber == '*' || PressedNumber == '/' || PressedNumber == '=')
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e8 5b       	subi	r30, 0xB8	; 184
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 81       	ld	r24, Z
    4a20:	8b 32       	cpi	r24, 0x2B	; 43
    4a22:	c9 f0       	breq	.+50     	; 0x4a56 <main+0x146>
    4a24:	fe 01       	movw	r30, r28
    4a26:	e8 5b       	subi	r30, 0xB8	; 184
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	80 81       	ld	r24, Z
    4a2c:	8d 32       	cpi	r24, 0x2D	; 45
    4a2e:	99 f0       	breq	.+38     	; 0x4a56 <main+0x146>
    4a30:	fe 01       	movw	r30, r28
    4a32:	e8 5b       	subi	r30, 0xB8	; 184
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	80 81       	ld	r24, Z
    4a38:	8a 32       	cpi	r24, 0x2A	; 42
    4a3a:	69 f0       	breq	.+26     	; 0x4a56 <main+0x146>
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	e8 5b       	subi	r30, 0xB8	; 184
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	80 81       	ld	r24, Z
    4a44:	8f 32       	cpi	r24, 0x2F	; 47
    4a46:	39 f0       	breq	.+14     	; 0x4a56 <main+0x146>
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e8 5b       	subi	r30, 0xB8	; 184
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	80 81       	ld	r24, Z
    4a50:	8d 33       	cpi	r24, 0x3D	; 61
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <main+0x146>
    4a54:	65 c0       	rjmp	.+202    	; 0x4b20 <main+0x210>
				{
					/*Insert number to MathExpressionArr*/
					MathExpressionArr[MathExpressionLastIndex] = Number;
    4a56:	8e 81       	ldd	r24, Y+6	; 0x06
    4a58:	88 2f       	mov	r24, r24
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	9c 01       	movw	r18, r24
    4a5e:	22 0f       	add	r18, r18
    4a60:	33 1f       	adc	r19, r19
    4a62:	22 0f       	add	r18, r18
    4a64:	33 1f       	adc	r19, r19
    4a66:	ce 01       	movw	r24, r28
    4a68:	01 96       	adiw	r24, 0x01	; 1
    4a6a:	82 0f       	add	r24, r18
    4a6c:	93 1f       	adc	r25, r19
    4a6e:	fc 01       	movw	r30, r24
    4a70:	37 96       	adiw	r30, 0x07	; 7
    4a72:	8a 81       	ldd	r24, Y+2	; 0x02
    4a74:	9b 81       	ldd	r25, Y+3	; 0x03
    4a76:	ac 81       	ldd	r26, Y+4	; 0x04
    4a78:	bd 81       	ldd	r27, Y+5	; 0x05
    4a7a:	80 83       	st	Z, r24
    4a7c:	91 83       	std	Z+1, r25	; 0x01
    4a7e:	a2 83       	std	Z+2, r26	; 0x02
    4a80:	b3 83       	std	Z+3, r27	; 0x03
					MathExpressionLastIndex ++;
    4a82:	8e 81       	ldd	r24, Y+6	; 0x06
    4a84:	8f 5f       	subi	r24, 0xFF	; 255
    4a86:	8e 83       	std	Y+6, r24	; 0x06
					Number = 0;
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	a0 e0       	ldi	r26, 0x00	; 0
    4a8e:	b0 e0       	ldi	r27, 0x00	; 0
    4a90:	8a 83       	std	Y+2, r24	; 0x02
    4a92:	9b 83       	std	Y+3, r25	; 0x03
    4a94:	ac 83       	std	Y+4, r26	; 0x04
    4a96:	bd 83       	std	Y+5, r27	; 0x05
					MathExpressionArr[MathExpressionLastIndex] = PressedNumber;
    4a98:	8e 81       	ldd	r24, Y+6	; 0x06
    4a9a:	08 2f       	mov	r16, r24
    4a9c:	10 e0       	ldi	r17, 0x00	; 0
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e8 5b       	subi	r30, 0xB8	; 184
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	80 81       	ld	r24, Z
    4aa6:	88 2f       	mov	r24, r24
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	a0 e0       	ldi	r26, 0x00	; 0
    4aac:	b0 e0       	ldi	r27, 0x00	; 0
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    4ab6:	ab 01       	movw	r20, r22
    4ab8:	bc 01       	movw	r22, r24
    4aba:	98 01       	movw	r18, r16
    4abc:	22 0f       	add	r18, r18
    4abe:	33 1f       	adc	r19, r19
    4ac0:	22 0f       	add	r18, r18
    4ac2:	33 1f       	adc	r19, r19
    4ac4:	ce 01       	movw	r24, r28
    4ac6:	01 96       	adiw	r24, 0x01	; 1
    4ac8:	82 0f       	add	r24, r18
    4aca:	93 1f       	adc	r25, r19
    4acc:	fc 01       	movw	r30, r24
    4ace:	37 96       	adiw	r30, 0x07	; 7
    4ad0:	40 83       	st	Z, r20
    4ad2:	51 83       	std	Z+1, r21	; 0x01
    4ad4:	62 83       	std	Z+2, r22	; 0x02
    4ad6:	73 83       	std	Z+3, r23	; 0x03
					MathExpressionLastIndex ++;
    4ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    4ada:	8f 5f       	subi	r24, 0xFF	; 255
    4adc:	8e 83       	std	Y+6, r24	; 0x06
					if(PressedNumber == '=')
    4ade:	fe 01       	movw	r30, r28
    4ae0:	e8 5b       	subi	r30, 0xB8	; 184
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	80 81       	ld	r24, Z
    4ae6:	8d 33       	cpi	r24, 0x3D	; 61
    4ae8:	09 f0       	breq	.+2      	; 0x4aec <main+0x1dc>
    4aea:	4f c0       	rjmp	.+158    	; 0x4b8a <main+0x27a>
					{
						MathExpressionLastIndex -= 2;
    4aec:	8e 81       	ldd	r24, Y+6	; 0x06
    4aee:	82 50       	subi	r24, 0x02	; 2
    4af0:	8e 83       	std	Y+6, r24	; 0x06
			}
			KeyPad_GetValue(&PressedNumber);
		}

		/*Error checking*/
		CastVariable = (uint8_t)MathExpressionLastIndex;
    4af2:	8e 81       	ldd	r24, Y+6	; 0x06
    4af4:	8f 83       	std	Y+7, r24	; 0x07
		Calculator_CheckError(MathExpressionArr,&SyntaxErrorFlag,&MathErrorFlag,CastVariable);
    4af6:	ef 81       	ldd	r30, Y+7	; 0x07
    4af8:	ce 01       	movw	r24, r28
    4afa:	08 96       	adiw	r24, 0x08	; 8
    4afc:	9e 01       	movw	r18, r28
    4afe:	2a 5a       	subi	r18, 0xAA	; 170
    4b00:	3f 4f       	sbci	r19, 0xFF	; 255
    4b02:	ae 01       	movw	r20, r28
    4b04:	49 5a       	subi	r20, 0xA9	; 169
    4b06:	5f 4f       	sbci	r21, 0xFF	; 255
    4b08:	b9 01       	movw	r22, r18
    4b0a:	2e 2f       	mov	r18, r30
    4b0c:	0e 94 28 1a 	call	0x3450	; 0x3450 <Calculator_CheckError>
		if(SyntaxErrorFlag == false && MathErrorFlag == false)
    4b10:	fe 01       	movw	r30, r28
    4b12:	ea 5a       	subi	r30, 0xAA	; 170
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	80 81       	ld	r24, Z
    4b18:	88 23       	and	r24, r24
    4b1a:	09 f0       	breq	.+2      	; 0x4b1e <main+0x20e>
    4b1c:	52 c3       	rjmp	.+1700   	; 0x51c2 <main+0x8b2>
    4b1e:	4d c0       	rjmp	.+154    	; 0x4bba <main+0x2aa>
					{
						MathExpressionLastIndex -= 2;
						break;
					}
				}
				else if((PressedNumber >= '0') || (PressedNumber <= '9'))
    4b20:	fe 01       	movw	r30, r28
    4b22:	e8 5b       	subi	r30, 0xB8	; 184
    4b24:	ff 4f       	sbci	r31, 0xFF	; 255
    4b26:	80 81       	ld	r24, Z
    4b28:	80 33       	cpi	r24, 0x30	; 48
    4b2a:	30 f4       	brcc	.+12     	; 0x4b38 <main+0x228>
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e8 5b       	subi	r30, 0xB8	; 184
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	80 81       	ld	r24, Z
    4b34:	8a 33       	cpi	r24, 0x3A	; 58
    4b36:	48 f5       	brcc	.+82     	; 0x4b8a <main+0x27a>
				{
					Number = (PressedNumber - '0') + (Number * 10);
    4b38:	fe 01       	movw	r30, r28
    4b3a:	e8 5b       	subi	r30, 0xB8	; 184
    4b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3e:	80 81       	ld	r24, Z
    4b40:	88 2f       	mov	r24, r24
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	c0 97       	sbiw	r24, 0x30	; 48
    4b46:	aa 27       	eor	r26, r26
    4b48:	97 fd       	sbrc	r25, 7
    4b4a:	a0 95       	com	r26
    4b4c:	ba 2f       	mov	r27, r26
    4b4e:	bc 01       	movw	r22, r24
    4b50:	cd 01       	movw	r24, r26
    4b52:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    4b56:	7b 01       	movw	r14, r22
    4b58:	8c 01       	movw	r16, r24
    4b5a:	6a 81       	ldd	r22, Y+2	; 0x02
    4b5c:	7b 81       	ldd	r23, Y+3	; 0x03
    4b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b60:	9d 81       	ldd	r25, Y+5	; 0x05
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e2       	ldi	r20, 0x20	; 32
    4b68:	51 e4       	ldi	r21, 0x41	; 65
    4b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	9c 01       	movw	r18, r24
    4b74:	ad 01       	movw	r20, r26
    4b76:	c8 01       	movw	r24, r16
    4b78:	b7 01       	movw	r22, r14
    4b7a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	8a 83       	std	Y+2, r24	; 0x02
    4b84:	9b 83       	std	Y+3, r25	; 0x03
    4b86:	ac 83       	std	Y+4, r26	; 0x04
    4b88:	bd 83       	std	Y+5, r27	; 0x05
				}
				CLCD_PrintChar(PressedNumber);
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	e8 5b       	subi	r30, 0xB8	; 184
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	80 81       	ld	r24, Z
    4b92:	0e 94 0e 19 	call	0x321c	; 0x321c <CLCD_PrintChar>
    4b96:	05 c0       	rjmp	.+10     	; 0x4ba2 <main+0x292>
				/*Handle one press*/
				while(PressedNumber != KEYPAD_NOT_PRESSED)
				{
					KeyPad_GetValue(&PressedNumber);
    4b98:	ce 01       	movw	r24, r28
    4b9a:	88 5b       	subi	r24, 0xB8	; 184
    4b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b9e:	0e 94 81 22 	call	0x4502	; 0x4502 <KeyPad_GetValue>
				{
					Number = (PressedNumber - '0') + (Number * 10);
				}
				CLCD_PrintChar(PressedNumber);
				/*Handle one press*/
				while(PressedNumber != KEYPAD_NOT_PRESSED)
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e8 5b       	subi	r30, 0xB8	; 184
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 81       	ld	r24, Z
    4baa:	8f 3f       	cpi	r24, 0xFF	; 255
    4bac:	a9 f7       	brne	.-22     	; 0x4b98 <main+0x288>
				{
					KeyPad_GetValue(&PressedNumber);
				}
			}
			KeyPad_GetValue(&PressedNumber);
    4bae:	ce 01       	movw	r24, r28
    4bb0:	88 5b       	subi	r24, 0xB8	; 184
    4bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb4:	0e 94 81 22 	call	0x4502	; 0x4502 <KeyPad_GetValue>
    4bb8:	16 cf       	rjmp	.-468    	; 0x49e6 <main+0xd6>
		}

		/*Error checking*/
		CastVariable = (uint8_t)MathExpressionLastIndex;
		Calculator_CheckError(MathExpressionArr,&SyntaxErrorFlag,&MathErrorFlag,CastVariable);
		if(SyntaxErrorFlag == false && MathErrorFlag == false)
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e9 5a       	subi	r30, 0xA9	; 169
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	80 81       	ld	r24, Z
    4bc2:	88 23       	and	r24, r24
    4bc4:	09 f0       	breq	.+2      	; 0x4bc8 <main+0x2b8>
    4bc6:	fd c2       	rjmp	.+1530   	; 0x51c2 <main+0x8b2>
		{
			/*Negative numbers*/
			if(MathExpressionArr[0] == '-')
    4bc8:	88 85       	ldd	r24, Y+8	; 0x08
    4bca:	99 85       	ldd	r25, Y+9	; 0x09
    4bcc:	aa 85       	ldd	r26, Y+10	; 0x0a
    4bce:	bb 85       	ldd	r27, Y+11	; 0x0b
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	44 e3       	ldi	r20, 0x34	; 52
    4bda:	52 e4       	ldi	r21, 0x42	; 66
    4bdc:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4be0:	88 23       	and	r24, r24
    4be2:	51 f4       	brne	.+20     	; 0x4bf8 <main+0x2e8>
			{
				MathExpressionArr[1] *= -1;
    4be4:	8c 85       	ldd	r24, Y+12	; 0x0c
    4be6:	9d 85       	ldd	r25, Y+13	; 0x0d
    4be8:	ae 85       	ldd	r26, Y+14	; 0x0e
    4bea:	bf 85       	ldd	r27, Y+15	; 0x0f
    4bec:	b0 58       	subi	r27, 0x80	; 128
    4bee:	8c 87       	std	Y+12, r24	; 0x0c
    4bf0:	9d 87       	std	Y+13, r25	; 0x0d
    4bf2:	ae 87       	std	Y+14, r26	; 0x0e
    4bf4:	bf 87       	std	Y+15, r27	; 0x0f
    4bf6:	02 c3       	rjmp	.+1540   	; 0x51fc <main+0x8ec>
			}
			else
			{
				for(i = 1 ; i < MathExpressionLastIndex; i++)
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	89 83       	std	Y+1, r24	; 0x01
    4bfc:	bb c0       	rjmp	.+374    	; 0x4d74 <main+0x464>
				{
					if((MathExpressionArr[i] == '*') || (MathExpressionArr[i] == '/') || (MathExpressionArr[i] == '+'))
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	88 2f       	mov	r24, r24
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	9c 01       	movw	r18, r24
    4c06:	22 0f       	add	r18, r18
    4c08:	33 1f       	adc	r19, r19
    4c0a:	22 0f       	add	r18, r18
    4c0c:	33 1f       	adc	r19, r19
    4c0e:	ce 01       	movw	r24, r28
    4c10:	01 96       	adiw	r24, 0x01	; 1
    4c12:	82 0f       	add	r24, r18
    4c14:	93 1f       	adc	r25, r19
    4c16:	fc 01       	movw	r30, r24
    4c18:	37 96       	adiw	r30, 0x07	; 7
    4c1a:	80 81       	ld	r24, Z
    4c1c:	91 81       	ldd	r25, Z+1	; 0x01
    4c1e:	a2 81       	ldd	r26, Z+2	; 0x02
    4c20:	b3 81       	ldd	r27, Z+3	; 0x03
    4c22:	bc 01       	movw	r22, r24
    4c24:	cd 01       	movw	r24, r26
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	48 e2       	ldi	r20, 0x28	; 40
    4c2c:	52 e4       	ldi	r21, 0x42	; 66
    4c2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4c32:	88 23       	and	r24, r24
    4c34:	c9 f1       	breq	.+114    	; 0x4ca8 <main+0x398>
    4c36:	89 81       	ldd	r24, Y+1	; 0x01
    4c38:	88 2f       	mov	r24, r24
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	9c 01       	movw	r18, r24
    4c3e:	22 0f       	add	r18, r18
    4c40:	33 1f       	adc	r19, r19
    4c42:	22 0f       	add	r18, r18
    4c44:	33 1f       	adc	r19, r19
    4c46:	ce 01       	movw	r24, r28
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	82 0f       	add	r24, r18
    4c4c:	93 1f       	adc	r25, r19
    4c4e:	fc 01       	movw	r30, r24
    4c50:	37 96       	adiw	r30, 0x07	; 7
    4c52:	80 81       	ld	r24, Z
    4c54:	91 81       	ldd	r25, Z+1	; 0x01
    4c56:	a2 81       	ldd	r26, Z+2	; 0x02
    4c58:	b3 81       	ldd	r27, Z+3	; 0x03
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	cd 01       	movw	r24, r26
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	4c e3       	ldi	r20, 0x3C	; 60
    4c64:	52 e4       	ldi	r21, 0x42	; 66
    4c66:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4c6a:	88 23       	and	r24, r24
    4c6c:	e9 f0       	breq	.+58     	; 0x4ca8 <main+0x398>
    4c6e:	89 81       	ldd	r24, Y+1	; 0x01
    4c70:	88 2f       	mov	r24, r24
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	9c 01       	movw	r18, r24
    4c76:	22 0f       	add	r18, r18
    4c78:	33 1f       	adc	r19, r19
    4c7a:	22 0f       	add	r18, r18
    4c7c:	33 1f       	adc	r19, r19
    4c7e:	ce 01       	movw	r24, r28
    4c80:	01 96       	adiw	r24, 0x01	; 1
    4c82:	82 0f       	add	r24, r18
    4c84:	93 1f       	adc	r25, r19
    4c86:	fc 01       	movw	r30, r24
    4c88:	37 96       	adiw	r30, 0x07	; 7
    4c8a:	80 81       	ld	r24, Z
    4c8c:	91 81       	ldd	r25, Z+1	; 0x01
    4c8e:	a2 81       	ldd	r26, Z+2	; 0x02
    4c90:	b3 81       	ldd	r27, Z+3	; 0x03
    4c92:	bc 01       	movw	r22, r24
    4c94:	cd 01       	movw	r24, r26
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	4c e2       	ldi	r20, 0x2C	; 44
    4c9c:	52 e4       	ldi	r21, 0x42	; 66
    4c9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4ca2:	88 23       	and	r24, r24
    4ca4:	09 f0       	breq	.+2      	; 0x4ca8 <main+0x398>
    4ca6:	63 c0       	rjmp	.+198    	; 0x4d6e <main+0x45e>
					{
						if(MathExpressionArr[i + 1] == '-')
    4ca8:	89 81       	ldd	r24, Y+1	; 0x01
    4caa:	88 2f       	mov	r24, r24
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	01 96       	adiw	r24, 0x01	; 1
    4cb0:	9c 01       	movw	r18, r24
    4cb2:	22 0f       	add	r18, r18
    4cb4:	33 1f       	adc	r19, r19
    4cb6:	22 0f       	add	r18, r18
    4cb8:	33 1f       	adc	r19, r19
    4cba:	ce 01       	movw	r24, r28
    4cbc:	01 96       	adiw	r24, 0x01	; 1
    4cbe:	82 0f       	add	r24, r18
    4cc0:	93 1f       	adc	r25, r19
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	37 96       	adiw	r30, 0x07	; 7
    4cc6:	80 81       	ld	r24, Z
    4cc8:	91 81       	ldd	r25, Z+1	; 0x01
    4cca:	a2 81       	ldd	r26, Z+2	; 0x02
    4ccc:	b3 81       	ldd	r27, Z+3	; 0x03
    4cce:	bc 01       	movw	r22, r24
    4cd0:	cd 01       	movw	r24, r26
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	44 e3       	ldi	r20, 0x34	; 52
    4cd8:	52 e4       	ldi	r21, 0x42	; 66
    4cda:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    4cde:	88 23       	and	r24, r24
    4ce0:	09 f0       	breq	.+2      	; 0x4ce4 <main+0x3d4>
    4ce2:	45 c0       	rjmp	.+138    	; 0x4d6e <main+0x45e>
						{
							MathExpressionArr[i + 2] *= -1;
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	88 2f       	mov	r24, r24
    4ce8:	90 e0       	ldi	r25, 0x00	; 0
    4cea:	8c 01       	movw	r16, r24
    4cec:	0e 5f       	subi	r16, 0xFE	; 254
    4cee:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf0:	89 81       	ldd	r24, Y+1	; 0x01
    4cf2:	88 2f       	mov	r24, r24
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	02 96       	adiw	r24, 0x02	; 2
    4cf8:	9c 01       	movw	r18, r24
    4cfa:	22 0f       	add	r18, r18
    4cfc:	33 1f       	adc	r19, r19
    4cfe:	22 0f       	add	r18, r18
    4d00:	33 1f       	adc	r19, r19
    4d02:	ce 01       	movw	r24, r28
    4d04:	01 96       	adiw	r24, 0x01	; 1
    4d06:	82 0f       	add	r24, r18
    4d08:	93 1f       	adc	r25, r19
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	37 96       	adiw	r30, 0x07	; 7
    4d0e:	80 81       	ld	r24, Z
    4d10:	91 81       	ldd	r25, Z+1	; 0x01
    4d12:	a2 81       	ldd	r26, Z+2	; 0x02
    4d14:	b3 81       	ldd	r27, Z+3	; 0x03
    4d16:	ac 01       	movw	r20, r24
    4d18:	bd 01       	movw	r22, r26
    4d1a:	70 58       	subi	r23, 0x80	; 128
    4d1c:	98 01       	movw	r18, r16
    4d1e:	22 0f       	add	r18, r18
    4d20:	33 1f       	adc	r19, r19
    4d22:	22 0f       	add	r18, r18
    4d24:	33 1f       	adc	r19, r19
    4d26:	ce 01       	movw	r24, r28
    4d28:	01 96       	adiw	r24, 0x01	; 1
    4d2a:	82 0f       	add	r24, r18
    4d2c:	93 1f       	adc	r25, r19
    4d2e:	fc 01       	movw	r30, r24
    4d30:	37 96       	adiw	r30, 0x07	; 7
    4d32:	40 83       	st	Z, r20
    4d34:	51 83       	std	Z+1, r21	; 0x01
    4d36:	62 83       	std	Z+2, r22	; 0x02
    4d38:	73 83       	std	Z+3, r23	; 0x03
							MathExpressionArr[i + 1] = 32761;
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	88 2f       	mov	r24, r24
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	01 96       	adiw	r24, 0x01	; 1
    4d42:	9c 01       	movw	r18, r24
    4d44:	22 0f       	add	r18, r18
    4d46:	33 1f       	adc	r19, r19
    4d48:	22 0f       	add	r18, r18
    4d4a:	33 1f       	adc	r19, r19
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	82 0f       	add	r24, r18
    4d52:	93 1f       	adc	r25, r19
    4d54:	fc 01       	movw	r30, r24
    4d56:	37 96       	adiw	r30, 0x07	; 7
    4d58:	80 e0       	ldi	r24, 0x00	; 0
    4d5a:	92 ef       	ldi	r25, 0xF2	; 242
    4d5c:	af ef       	ldi	r26, 0xFF	; 255
    4d5e:	b6 e4       	ldi	r27, 0x46	; 70
    4d60:	80 83       	st	Z, r24
    4d62:	91 83       	std	Z+1, r25	; 0x01
    4d64:	a2 83       	std	Z+2, r26	; 0x02
    4d66:	b3 83       	std	Z+3, r27	; 0x03
							i += 3;
    4d68:	89 81       	ldd	r24, Y+1	; 0x01
    4d6a:	8d 5f       	subi	r24, 0xFD	; 253
    4d6c:	89 83       	std	Y+1, r24	; 0x01
			{
				MathExpressionArr[1] *= -1;
			}
			else
			{
				for(i = 1 ; i < MathExpressionLastIndex; i++)
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	8f 5f       	subi	r24, 0xFF	; 255
    4d72:	89 83       	std	Y+1, r24	; 0x01
    4d74:	99 81       	ldd	r25, Y+1	; 0x01
    4d76:	8e 81       	ldd	r24, Y+6	; 0x06
    4d78:	98 17       	cp	r25, r24
    4d7a:	08 f4       	brcc	.+2      	; 0x4d7e <main+0x46e>
    4d7c:	40 cf       	rjmp	.-384    	; 0x4bfe <main+0x2ee>
							i += 3;
						}
					}
				}
				/*Get the result*/
				for(i = 0 ; i <= MathExpressionLastIndex ; i++)
    4d7e:	19 82       	std	Y+1, r1	; 0x01
    4d80:	af c1       	rjmp	.+862    	; 0x50e0 <main+0x7d0>
				{
					/*check the scanned element is within range*/
					if(MathExpressionArr[i] <= MAX_VAL)
    4d82:	89 81       	ldd	r24, Y+1	; 0x01
    4d84:	88 2f       	mov	r24, r24
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	9c 01       	movw	r18, r24
    4d8a:	22 0f       	add	r18, r18
    4d8c:	33 1f       	adc	r19, r19
    4d8e:	22 0f       	add	r18, r18
    4d90:	33 1f       	adc	r19, r19
    4d92:	ce 01       	movw	r24, r28
    4d94:	01 96       	adiw	r24, 0x01	; 1
    4d96:	82 0f       	add	r24, r18
    4d98:	93 1f       	adc	r25, r19
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	37 96       	adiw	r30, 0x07	; 7
    4d9e:	80 81       	ld	r24, Z
    4da0:	91 81       	ldd	r25, Z+1	; 0x01
    4da2:	a2 81       	ldd	r26, Z+2	; 0x02
    4da4:	b3 81       	ldd	r27, Z+3	; 0x03
    4da6:	bc 01       	movw	r22, r24
    4da8:	cd 01       	movw	r24, r26
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 ef       	ldi	r19, 0xF0	; 240
    4dae:	4f ef       	ldi	r20, 0xFF	; 255
    4db0:	56 e4       	ldi	r21, 0x46	; 70
    4db2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__lesf2>
    4db6:	18 16       	cp	r1, r24
    4db8:	0c f4       	brge	.+2      	; 0x4dbc <main+0x4ac>
    4dba:	8f c1       	rjmp	.+798    	; 0x50da <main+0x7ca>
					{
						/*Check if the scanned element is operator*/
						if(((uint8_t)MathExpressionArr[i] == '+') || ((uint8_t)MathExpressionArr[i] == '-') || ((uint8_t)MathExpressionArr[i] == '*') || ((uint8_t)MathExpressionArr[i] == '/'))
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	88 2f       	mov	r24, r24
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	9c 01       	movw	r18, r24
    4dc4:	22 0f       	add	r18, r18
    4dc6:	33 1f       	adc	r19, r19
    4dc8:	22 0f       	add	r18, r18
    4dca:	33 1f       	adc	r19, r19
    4dcc:	ce 01       	movw	r24, r28
    4dce:	01 96       	adiw	r24, 0x01	; 1
    4dd0:	82 0f       	add	r24, r18
    4dd2:	93 1f       	adc	r25, r19
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	37 96       	adiw	r30, 0x07	; 7
    4dd8:	80 81       	ld	r24, Z
    4dda:	91 81       	ldd	r25, Z+1	; 0x01
    4ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    4dde:	b3 81       	ldd	r27, Z+3	; 0x03
    4de0:	bc 01       	movw	r22, r24
    4de2:	cd 01       	movw	r24, r26
    4de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	8b 32       	cpi	r24, 0x2B	; 43
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <main+0x4e2>
    4df0:	4f c0       	rjmp	.+158    	; 0x4e90 <main+0x580>
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	88 2f       	mov	r24, r24
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	9c 01       	movw	r18, r24
    4dfa:	22 0f       	add	r18, r18
    4dfc:	33 1f       	adc	r19, r19
    4dfe:	22 0f       	add	r18, r18
    4e00:	33 1f       	adc	r19, r19
    4e02:	ce 01       	movw	r24, r28
    4e04:	01 96       	adiw	r24, 0x01	; 1
    4e06:	82 0f       	add	r24, r18
    4e08:	93 1f       	adc	r25, r19
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	37 96       	adiw	r30, 0x07	; 7
    4e0e:	80 81       	ld	r24, Z
    4e10:	91 81       	ldd	r25, Z+1	; 0x01
    4e12:	a2 81       	ldd	r26, Z+2	; 0x02
    4e14:	b3 81       	ldd	r27, Z+3	; 0x03
    4e16:	bc 01       	movw	r22, r24
    4e18:	cd 01       	movw	r24, r26
    4e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	8d 32       	cpi	r24, 0x2D	; 45
    4e24:	a9 f1       	breq	.+106    	; 0x4e90 <main+0x580>
    4e26:	89 81       	ldd	r24, Y+1	; 0x01
    4e28:	88 2f       	mov	r24, r24
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	9c 01       	movw	r18, r24
    4e2e:	22 0f       	add	r18, r18
    4e30:	33 1f       	adc	r19, r19
    4e32:	22 0f       	add	r18, r18
    4e34:	33 1f       	adc	r19, r19
    4e36:	ce 01       	movw	r24, r28
    4e38:	01 96       	adiw	r24, 0x01	; 1
    4e3a:	82 0f       	add	r24, r18
    4e3c:	93 1f       	adc	r25, r19
    4e3e:	fc 01       	movw	r30, r24
    4e40:	37 96       	adiw	r30, 0x07	; 7
    4e42:	80 81       	ld	r24, Z
    4e44:	91 81       	ldd	r25, Z+1	; 0x01
    4e46:	a2 81       	ldd	r26, Z+2	; 0x02
    4e48:	b3 81       	ldd	r27, Z+3	; 0x03
    4e4a:	bc 01       	movw	r22, r24
    4e4c:	cd 01       	movw	r24, r26
    4e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	8a 32       	cpi	r24, 0x2A	; 42
    4e58:	d9 f0       	breq	.+54     	; 0x4e90 <main+0x580>
    4e5a:	89 81       	ldd	r24, Y+1	; 0x01
    4e5c:	88 2f       	mov	r24, r24
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	9c 01       	movw	r18, r24
    4e62:	22 0f       	add	r18, r18
    4e64:	33 1f       	adc	r19, r19
    4e66:	22 0f       	add	r18, r18
    4e68:	33 1f       	adc	r19, r19
    4e6a:	ce 01       	movw	r24, r28
    4e6c:	01 96       	adiw	r24, 0x01	; 1
    4e6e:	82 0f       	add	r24, r18
    4e70:	93 1f       	adc	r25, r19
    4e72:	fc 01       	movw	r30, r24
    4e74:	37 96       	adiw	r30, 0x07	; 7
    4e76:	80 81       	ld	r24, Z
    4e78:	91 81       	ldd	r25, Z+1	; 0x01
    4e7a:	a2 81       	ldd	r26, Z+2	; 0x02
    4e7c:	b3 81       	ldd	r27, Z+3	; 0x03
    4e7e:	bc 01       	movw	r22, r24
    4e80:	cd 01       	movw	r24, r26
    4e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	8f 32       	cpi	r24, 0x2F	; 47
    4e8c:	09 f0       	breq	.+2      	; 0x4e90 <main+0x580>
    4e8e:	13 c1       	rjmp	.+550    	; 0x50b6 <main+0x7a6>
						{
							Stack8_Size(&OperatorStack,&StackSize);
    4e90:	ce 01       	movw	r24, r28
    4e92:	88 5a       	subi	r24, 0xA8	; 168
    4e94:	9f 4f       	sbci	r25, 0xFF	; 255
    4e96:	9e 01       	movw	r18, r28
    4e98:	24 55       	subi	r18, 0x54	; 84
    4e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9c:	b9 01       	movw	r22, r18
    4e9e:	0e 94 a8 23 	call	0x4750	; 0x4750 <Stack8_Size>
							if(StackSize == 0)
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e4 55       	subi	r30, 0x54	; 84
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	80 81       	ld	r24, Z
    4eaa:	88 23       	and	r24, r24
    4eac:	19 f5       	brne	.+70     	; 0x4ef4 <main+0x5e4>
							{
								CastVariable = (uint8_t)MathExpressionArr[i];
    4eae:	89 81       	ldd	r24, Y+1	; 0x01
    4eb0:	88 2f       	mov	r24, r24
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	9c 01       	movw	r18, r24
    4eb6:	22 0f       	add	r18, r18
    4eb8:	33 1f       	adc	r19, r19
    4eba:	22 0f       	add	r18, r18
    4ebc:	33 1f       	adc	r19, r19
    4ebe:	ce 01       	movw	r24, r28
    4ec0:	01 96       	adiw	r24, 0x01	; 1
    4ec2:	82 0f       	add	r24, r18
    4ec4:	93 1f       	adc	r25, r19
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	37 96       	adiw	r30, 0x07	; 7
    4eca:	80 81       	ld	r24, Z
    4ecc:	91 81       	ldd	r25, Z+1	; 0x01
    4ece:	a2 81       	ldd	r26, Z+2	; 0x02
    4ed0:	b3 81       	ldd	r27, Z+3	; 0x03
    4ed2:	bc 01       	movw	r22, r24
    4ed4:	cd 01       	movw	r24, r26
    4ed6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	8f 83       	std	Y+7, r24	; 0x07
								Stack8_Push(&OperatorStack,&CastVariable);
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	88 5a       	subi	r24, 0xA8	; 168
    4ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee6:	9e 01       	movw	r18, r28
    4ee8:	29 5f       	subi	r18, 0xF9	; 249
    4eea:	3f 4f       	sbci	r19, 0xFF	; 255
    4eec:	b9 01       	movw	r22, r18
    4eee:	0e 94 31 23 	call	0x4662	; 0x4662 <Stack8_Push>
    4ef2:	f3 c0       	rjmp	.+486    	; 0x50da <main+0x7ca>
							}
							else if(Calculator_PriorityCheck(MathExpressionArr[i]) > Calculator_PriorityCheck(Stack8_Top(&OperatorStack)))
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	88 2f       	mov	r24, r24
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	9c 01       	movw	r18, r24
    4efc:	22 0f       	add	r18, r18
    4efe:	33 1f       	adc	r19, r19
    4f00:	22 0f       	add	r18, r18
    4f02:	33 1f       	adc	r19, r19
    4f04:	ce 01       	movw	r24, r28
    4f06:	01 96       	adiw	r24, 0x01	; 1
    4f08:	82 0f       	add	r24, r18
    4f0a:	93 1f       	adc	r25, r19
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	37 96       	adiw	r30, 0x07	; 7
    4f10:	80 81       	ld	r24, Z
    4f12:	91 81       	ldd	r25, Z+1	; 0x01
    4f14:	a2 81       	ldd	r26, Z+2	; 0x02
    4f16:	b3 81       	ldd	r27, Z+3	; 0x03
    4f18:	bc 01       	movw	r22, r24
    4f1a:	cd 01       	movw	r24, r26
    4f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f20:	dc 01       	movw	r26, r24
    4f22:	cb 01       	movw	r24, r22
    4f24:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <Calculator_PriorityCheck>
    4f28:	18 2f       	mov	r17, r24
    4f2a:	ce 01       	movw	r24, r28
    4f2c:	88 5a       	subi	r24, 0xA8	; 168
    4f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f30:	0e 94 8d 23 	call	0x471a	; 0x471a <Stack8_Top>
    4f34:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <Calculator_PriorityCheck>
    4f38:	81 17       	cp	r24, r17
    4f3a:	18 f5       	brcc	.+70     	; 0x4f82 <main+0x672>
							{
								CastVariable = (uint8_t)MathExpressionArr[i];
    4f3c:	89 81       	ldd	r24, Y+1	; 0x01
    4f3e:	88 2f       	mov	r24, r24
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	9c 01       	movw	r18, r24
    4f44:	22 0f       	add	r18, r18
    4f46:	33 1f       	adc	r19, r19
    4f48:	22 0f       	add	r18, r18
    4f4a:	33 1f       	adc	r19, r19
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	01 96       	adiw	r24, 0x01	; 1
    4f50:	82 0f       	add	r24, r18
    4f52:	93 1f       	adc	r25, r19
    4f54:	fc 01       	movw	r30, r24
    4f56:	37 96       	adiw	r30, 0x07	; 7
    4f58:	80 81       	ld	r24, Z
    4f5a:	91 81       	ldd	r25, Z+1	; 0x01
    4f5c:	a2 81       	ldd	r26, Z+2	; 0x02
    4f5e:	b3 81       	ldd	r27, Z+3	; 0x03
    4f60:	bc 01       	movw	r22, r24
    4f62:	cd 01       	movw	r24, r26
    4f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	8f 83       	std	Y+7, r24	; 0x07
								Stack8_Push(&OperatorStack,&CastVariable);
    4f6e:	ce 01       	movw	r24, r28
    4f70:	88 5a       	subi	r24, 0xA8	; 168
    4f72:	9f 4f       	sbci	r25, 0xFF	; 255
    4f74:	9e 01       	movw	r18, r28
    4f76:	29 5f       	subi	r18, 0xF9	; 249
    4f78:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7a:	b9 01       	movw	r22, r18
    4f7c:	0e 94 31 23 	call	0x4662	; 0x4662 <Stack8_Push>
    4f80:	ac c0       	rjmp	.+344    	; 0x50da <main+0x7ca>
							}
							else if(Calculator_PriorityCheck((uint8_t)MathExpressionArr[i]) <= Calculator_PriorityCheck((uint8_t)Stack8_Top(&OperatorStack)))
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	88 2f       	mov	r24, r24
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	9c 01       	movw	r18, r24
    4f8a:	22 0f       	add	r18, r18
    4f8c:	33 1f       	adc	r19, r19
    4f8e:	22 0f       	add	r18, r18
    4f90:	33 1f       	adc	r19, r19
    4f92:	ce 01       	movw	r24, r28
    4f94:	01 96       	adiw	r24, 0x01	; 1
    4f96:	82 0f       	add	r24, r18
    4f98:	93 1f       	adc	r25, r19
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	37 96       	adiw	r30, 0x07	; 7
    4f9e:	80 81       	ld	r24, Z
    4fa0:	91 81       	ldd	r25, Z+1	; 0x01
    4fa2:	a2 81       	ldd	r26, Z+2	; 0x02
    4fa4:	b3 81       	ldd	r27, Z+3	; 0x03
    4fa6:	bc 01       	movw	r22, r24
    4fa8:	cd 01       	movw	r24, r26
    4faa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4fae:	dc 01       	movw	r26, r24
    4fb0:	cb 01       	movw	r24, r22
    4fb2:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <Calculator_PriorityCheck>
    4fb6:	18 2f       	mov	r17, r24
    4fb8:	ce 01       	movw	r24, r28
    4fba:	88 5a       	subi	r24, 0xA8	; 168
    4fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4fbe:	0e 94 8d 23 	call	0x471a	; 0x471a <Stack8_Top>
    4fc2:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <Calculator_PriorityCheck>
    4fc6:	81 17       	cp	r24, r17
    4fc8:	08 f4       	brcc	.+2      	; 0x4fcc <main+0x6bc>
    4fca:	87 c0       	rjmp	.+270    	; 0x50da <main+0x7ca>
							{
								do
								{
									Stack16_Pop(&OperandStack,&SecondOperand);
    4fcc:	ce 01       	movw	r24, r28
    4fce:	86 59       	subi	r24, 0x96	; 150
    4fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd2:	9e 01       	movw	r18, r28
    4fd4:	23 5b       	subi	r18, 0xB3	; 179
    4fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd8:	b9 01       	movw	r22, r18
    4fda:	0e 94 09 24 	call	0x4812	; 0x4812 <Stack16_Pop>
									Stack16_Pop(&OperandStack,&FirstOperand);
    4fde:	ce 01       	movw	r24, r28
    4fe0:	86 59       	subi	r24, 0x96	; 150
    4fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe4:	9e 01       	movw	r18, r28
    4fe6:	27 5b       	subi	r18, 0xB7	; 183
    4fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fea:	b9 01       	movw	r22, r18
    4fec:	0e 94 09 24 	call	0x4812	; 0x4812 <Stack16_Pop>
									Stack8_Pop(&OperatorStack,&Operator);
    4ff0:	ce 01       	movw	r24, r28
    4ff2:	88 5a       	subi	r24, 0xA8	; 168
    4ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff6:	9e 01       	movw	r18, r28
    4ff8:	2f 5a       	subi	r18, 0xAF	; 175
    4ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    4ffc:	b9 01       	movw	r22, r18
    4ffe:	0e 94 5f 23 	call	0x46be	; 0x46be <Stack8_Pop>
									Calculator_Evaluate(FirstOperand,Operator,SecondOperand,&Result);
    5002:	fe 01       	movw	r30, r28
    5004:	e7 5b       	subi	r30, 0xB7	; 183
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 81       	ld	r24, Z
    500a:	91 81       	ldd	r25, Z+1	; 0x01
    500c:	a2 81       	ldd	r26, Z+2	; 0x02
    500e:	b3 81       	ldd	r27, Z+3	; 0x03
    5010:	fe 01       	movw	r30, r28
    5012:	ef 5a       	subi	r30, 0xAF	; 175
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	40 81       	ld	r20, Z
    5018:	fe 01       	movw	r30, r28
    501a:	e3 5b       	subi	r30, 0xB3	; 179
    501c:	ff 4f       	sbci	r31, 0xFF	; 255
    501e:	00 81       	ld	r16, Z
    5020:	11 81       	ldd	r17, Z+1	; 0x01
    5022:	22 81       	ldd	r18, Z+2	; 0x02
    5024:	33 81       	ldd	r19, Z+3	; 0x03
    5026:	fe 01       	movw	r30, r28
    5028:	ee 5a       	subi	r30, 0xAE	; 174
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	bc 01       	movw	r22, r24
    502e:	cd 01       	movw	r24, r26
    5030:	7f 01       	movw	r14, r30
    5032:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <Calculator_Evaluate>
									CLCD_SetCursor(0,1);
    5036:	80 e0       	ldi	r24, 0x00	; 0
    5038:	61 e0       	ldi	r22, 0x01	; 1
    503a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
									Stack16_Push(&OperandStack,&Result);
    503e:	ce 01       	movw	r24, r28
    5040:	86 59       	subi	r24, 0x96	; 150
    5042:	9f 4f       	sbci	r25, 0xFF	; 255
    5044:	9e 01       	movw	r18, r28
    5046:	2e 5a       	subi	r18, 0xAE	; 174
    5048:	3f 4f       	sbci	r19, 0xFF	; 255
    504a:	b9 01       	movw	r22, r18
    504c:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <Stack16_Push>
									Stack16_Size(&OperandStack,&StackSize);
    5050:	ce 01       	movw	r24, r28
    5052:	86 59       	subi	r24, 0x96	; 150
    5054:	9f 4f       	sbci	r25, 0xFF	; 255
    5056:	9e 01       	movw	r18, r28
    5058:	24 55       	subi	r18, 0x54	; 84
    505a:	3f 4f       	sbci	r19, 0xFF	; 255
    505c:	b9 01       	movw	r22, r18
    505e:	0e 94 71 24 	call	0x48e2	; 0x48e2 <Stack16_Size>
								}while(StackSize != 1);
    5062:	fe 01       	movw	r30, r28
    5064:	e4 55       	subi	r30, 0x54	; 84
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	80 81       	ld	r24, Z
    506a:	81 30       	cpi	r24, 0x01	; 1
    506c:	09 f0       	breq	.+2      	; 0x5070 <main+0x760>
    506e:	ae cf       	rjmp	.-164    	; 0x4fcc <main+0x6bc>
								CastVariable = (uint8_t)MathExpressionArr[i];
    5070:	89 81       	ldd	r24, Y+1	; 0x01
    5072:	88 2f       	mov	r24, r24
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	9c 01       	movw	r18, r24
    5078:	22 0f       	add	r18, r18
    507a:	33 1f       	adc	r19, r19
    507c:	22 0f       	add	r18, r18
    507e:	33 1f       	adc	r19, r19
    5080:	ce 01       	movw	r24, r28
    5082:	01 96       	adiw	r24, 0x01	; 1
    5084:	82 0f       	add	r24, r18
    5086:	93 1f       	adc	r25, r19
    5088:	fc 01       	movw	r30, r24
    508a:	37 96       	adiw	r30, 0x07	; 7
    508c:	80 81       	ld	r24, Z
    508e:	91 81       	ldd	r25, Z+1	; 0x01
    5090:	a2 81       	ldd	r26, Z+2	; 0x02
    5092:	b3 81       	ldd	r27, Z+3	; 0x03
    5094:	bc 01       	movw	r22, r24
    5096:	cd 01       	movw	r24, r26
    5098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    509c:	dc 01       	movw	r26, r24
    509e:	cb 01       	movw	r24, r22
    50a0:	8f 83       	std	Y+7, r24	; 0x07
								Stack8_Push(&OperatorStack,&CastVariable);
    50a2:	ce 01       	movw	r24, r28
    50a4:	88 5a       	subi	r24, 0xA8	; 168
    50a6:	9f 4f       	sbci	r25, 0xFF	; 255
    50a8:	9e 01       	movw	r18, r28
    50aa:	29 5f       	subi	r18, 0xF9	; 249
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	b9 01       	movw	r22, r18
    50b0:	0e 94 31 23 	call	0x4662	; 0x4662 <Stack8_Push>
    50b4:	12 c0       	rjmp	.+36     	; 0x50da <main+0x7ca>
							}
						}
						else /*Operand*/
						{
							Stack16_Push(&OperandStack,&MathExpressionArr[i]);
    50b6:	89 81       	ldd	r24, Y+1	; 0x01
    50b8:	88 2f       	mov	r24, r24
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	88 0f       	add	r24, r24
    50be:	99 1f       	adc	r25, r25
    50c0:	88 0f       	add	r24, r24
    50c2:	99 1f       	adc	r25, r25
    50c4:	9e 01       	movw	r18, r28
    50c6:	28 5f       	subi	r18, 0xF8	; 248
    50c8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ca:	28 0f       	add	r18, r24
    50cc:	39 1f       	adc	r19, r25
    50ce:	ce 01       	movw	r24, r28
    50d0:	86 59       	subi	r24, 0x96	; 150
    50d2:	9f 4f       	sbci	r25, 0xFF	; 255
    50d4:	b9 01       	movw	r22, r18
    50d6:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <Stack16_Push>
							i += 3;
						}
					}
				}
				/*Get the result*/
				for(i = 0 ; i <= MathExpressionLastIndex ; i++)
    50da:	89 81       	ldd	r24, Y+1	; 0x01
    50dc:	8f 5f       	subi	r24, 0xFF	; 255
    50de:	89 83       	std	Y+1, r24	; 0x01
    50e0:	99 81       	ldd	r25, Y+1	; 0x01
    50e2:	8e 81       	ldd	r24, Y+6	; 0x06
    50e4:	89 17       	cp	r24, r25
    50e6:	08 f0       	brcs	.+2      	; 0x50ea <main+0x7da>
    50e8:	4c ce       	rjmp	.-872    	; 0x4d82 <main+0x472>
						{
							Stack16_Push(&OperandStack,&MathExpressionArr[i]);
						}
					}
				}
				Stack8_Size(&OperatorStack,&StackSize);
    50ea:	ce 01       	movw	r24, r28
    50ec:	88 5a       	subi	r24, 0xA8	; 168
    50ee:	9f 4f       	sbci	r25, 0xFF	; 255
    50f0:	9e 01       	movw	r18, r28
    50f2:	24 55       	subi	r18, 0x54	; 84
    50f4:	3f 4f       	sbci	r19, 0xFF	; 255
    50f6:	b9 01       	movw	r22, r18
    50f8:	0e 94 a8 23 	call	0x4750	; 0x4750 <Stack8_Size>
    50fc:	47 c0       	rjmp	.+142    	; 0x518c <main+0x87c>
				while(StackSize != 0)
				{
					Stack16_Pop(&OperandStack,&SecondOperand);
    50fe:	ce 01       	movw	r24, r28
    5100:	86 59       	subi	r24, 0x96	; 150
    5102:	9f 4f       	sbci	r25, 0xFF	; 255
    5104:	9e 01       	movw	r18, r28
    5106:	23 5b       	subi	r18, 0xB3	; 179
    5108:	3f 4f       	sbci	r19, 0xFF	; 255
    510a:	b9 01       	movw	r22, r18
    510c:	0e 94 09 24 	call	0x4812	; 0x4812 <Stack16_Pop>
					Stack16_Pop(&OperandStack,&FirstOperand);
    5110:	ce 01       	movw	r24, r28
    5112:	86 59       	subi	r24, 0x96	; 150
    5114:	9f 4f       	sbci	r25, 0xFF	; 255
    5116:	9e 01       	movw	r18, r28
    5118:	27 5b       	subi	r18, 0xB7	; 183
    511a:	3f 4f       	sbci	r19, 0xFF	; 255
    511c:	b9 01       	movw	r22, r18
    511e:	0e 94 09 24 	call	0x4812	; 0x4812 <Stack16_Pop>
					Stack8_Pop(&OperatorStack,&Operator);
    5122:	ce 01       	movw	r24, r28
    5124:	88 5a       	subi	r24, 0xA8	; 168
    5126:	9f 4f       	sbci	r25, 0xFF	; 255
    5128:	9e 01       	movw	r18, r28
    512a:	2f 5a       	subi	r18, 0xAF	; 175
    512c:	3f 4f       	sbci	r19, 0xFF	; 255
    512e:	b9 01       	movw	r22, r18
    5130:	0e 94 5f 23 	call	0x46be	; 0x46be <Stack8_Pop>
					Calculator_Evaluate(FirstOperand,Operator,SecondOperand,&Result);
    5134:	fe 01       	movw	r30, r28
    5136:	e7 5b       	subi	r30, 0xB7	; 183
    5138:	ff 4f       	sbci	r31, 0xFF	; 255
    513a:	80 81       	ld	r24, Z
    513c:	91 81       	ldd	r25, Z+1	; 0x01
    513e:	a2 81       	ldd	r26, Z+2	; 0x02
    5140:	b3 81       	ldd	r27, Z+3	; 0x03
    5142:	fe 01       	movw	r30, r28
    5144:	ef 5a       	subi	r30, 0xAF	; 175
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	40 81       	ld	r20, Z
    514a:	fe 01       	movw	r30, r28
    514c:	e3 5b       	subi	r30, 0xB3	; 179
    514e:	ff 4f       	sbci	r31, 0xFF	; 255
    5150:	00 81       	ld	r16, Z
    5152:	11 81       	ldd	r17, Z+1	; 0x01
    5154:	22 81       	ldd	r18, Z+2	; 0x02
    5156:	33 81       	ldd	r19, Z+3	; 0x03
    5158:	fe 01       	movw	r30, r28
    515a:	ee 5a       	subi	r30, 0xAE	; 174
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	bc 01       	movw	r22, r24
    5160:	cd 01       	movw	r24, r26
    5162:	7f 01       	movw	r14, r30
    5164:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <Calculator_Evaluate>
					Stack16_Push(&OperandStack,&Result);
    5168:	ce 01       	movw	r24, r28
    516a:	86 59       	subi	r24, 0x96	; 150
    516c:	9f 4f       	sbci	r25, 0xFF	; 255
    516e:	9e 01       	movw	r18, r28
    5170:	2e 5a       	subi	r18, 0xAE	; 174
    5172:	3f 4f       	sbci	r19, 0xFF	; 255
    5174:	b9 01       	movw	r22, r18
    5176:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <Stack16_Push>
					Stack8_Size(&OperatorStack,&StackSize);
    517a:	ce 01       	movw	r24, r28
    517c:	88 5a       	subi	r24, 0xA8	; 168
    517e:	9f 4f       	sbci	r25, 0xFF	; 255
    5180:	9e 01       	movw	r18, r28
    5182:	24 55       	subi	r18, 0x54	; 84
    5184:	3f 4f       	sbci	r19, 0xFF	; 255
    5186:	b9 01       	movw	r22, r18
    5188:	0e 94 a8 23 	call	0x4750	; 0x4750 <Stack8_Size>
							Stack16_Push(&OperandStack,&MathExpressionArr[i]);
						}
					}
				}
				Stack8_Size(&OperatorStack,&StackSize);
				while(StackSize != 0)
    518c:	fe 01       	movw	r30, r28
    518e:	e4 55       	subi	r30, 0x54	; 84
    5190:	ff 4f       	sbci	r31, 0xFF	; 255
    5192:	80 81       	ld	r24, Z
    5194:	88 23       	and	r24, r24
    5196:	09 f0       	breq	.+2      	; 0x519a <main+0x88a>
    5198:	b2 cf       	rjmp	.-156    	; 0x50fe <main+0x7ee>
					Stack8_Pop(&OperatorStack,&Operator);
					Calculator_Evaluate(FirstOperand,Operator,SecondOperand,&Result);
					Stack16_Push(&OperandStack,&Result);
					Stack8_Size(&OperatorStack,&StackSize);
				}
				CLCD_SetCursor(0,1);
    519a:	80 e0       	ldi	r24, 0x00	; 0
    519c:	61 e0       	ldi	r22, 0x01	; 1
    519e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
				CLCD_PrintString("Result = ");
    51a2:	80 e6       	ldi	r24, 0x60	; 96
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <CLCD_PrintString>
				CLCD_PrintFloat(Result);
    51aa:	fe 01       	movw	r30, r28
    51ac:	ee 5a       	subi	r30, 0xAE	; 174
    51ae:	ff 4f       	sbci	r31, 0xFF	; 255
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	a2 81       	ldd	r26, Z+2	; 0x02
    51b6:	b3 81       	ldd	r27, Z+3	; 0x03
    51b8:	bc 01       	movw	r22, r24
    51ba:	cd 01       	movw	r24, r26
    51bc:	0e 94 cc 19 	call	0x3398	; 0x3398 <CLCD_PrintFloat>
    51c0:	1d c0       	rjmp	.+58     	; 0x51fc <main+0x8ec>
			}
		}
		else /*case of error*/
		{
			if(SyntaxErrorFlag == true)
    51c2:	fe 01       	movw	r30, r28
    51c4:	ea 5a       	subi	r30, 0xAA	; 170
    51c6:	ff 4f       	sbci	r31, 0xFF	; 255
    51c8:	80 81       	ld	r24, Z
    51ca:	81 30       	cpi	r24, 0x01	; 1
    51cc:	49 f4       	brne	.+18     	; 0x51e0 <main+0x8d0>
			{
				CLCD_SetCursor(0,1);
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	61 e0       	ldi	r22, 0x01	; 1
    51d2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
				CLCD_PrintString("SYNTAX ERROR");
    51d6:	8a e6       	ldi	r24, 0x6A	; 106
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <CLCD_PrintString>
    51de:	0e c0       	rjmp	.+28     	; 0x51fc <main+0x8ec>
			}
			else if(MathErrorFlag == true)
    51e0:	fe 01       	movw	r30, r28
    51e2:	e9 5a       	subi	r30, 0xA9	; 169
    51e4:	ff 4f       	sbci	r31, 0xFF	; 255
    51e6:	80 81       	ld	r24, Z
    51e8:	81 30       	cpi	r24, 0x01	; 1
    51ea:	41 f4       	brne	.+16     	; 0x51fc <main+0x8ec>
			{
				CLCD_SetCursor(0,1);
    51ec:	80 e0       	ldi	r24, 0x00	; 0
    51ee:	61 e0       	ldi	r22, 0x01	; 1
    51f0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
				CLCD_PrintString("MATH ERROR");
    51f4:	87 e7       	ldi	r24, 0x77	; 119
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <CLCD_PrintString>
			}
		}

		do
		{
			KeyPad_GetValue(&PressedNumber);
    51fc:	ce 01       	movw	r24, r28
    51fe:	88 5b       	subi	r24, 0xB8	; 184
    5200:	9f 4f       	sbci	r25, 0xFF	; 255
    5202:	0e 94 81 22 	call	0x4502	; 0x4502 <KeyPad_GetValue>
		}while(PressedNumber != 'O');
    5206:	fe 01       	movw	r30, r28
    5208:	e8 5b       	subi	r30, 0xB8	; 184
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	80 81       	ld	r24, Z
    520e:	8f 34       	cpi	r24, 0x4F	; 79
    5210:	a9 f7       	brne	.-22     	; 0x51fc <main+0x8ec>

		MathExpressionLastIndex = 0;
    5212:	1e 82       	std	Y+6, r1	; 0x06
		PressedNumber = KEYPAD_NOT_PRESSED;
    5214:	fe 01       	movw	r30, r28
    5216:	e8 5b       	subi	r30, 0xB8	; 184
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	8f ef       	ldi	r24, 0xFF	; 255
    521c:	80 83       	st	Z, r24
		Number = 0;
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	a0 e0       	ldi	r26, 0x00	; 0
    5224:	b0 e0       	ldi	r27, 0x00	; 0
    5226:	8a 83       	std	Y+2, r24	; 0x02
    5228:	9b 83       	std	Y+3, r25	; 0x03
    522a:	ac 83       	std	Y+4, r26	; 0x04
    522c:	bd 83       	std	Y+5, r27	; 0x05
		FirstOperand = 0;
    522e:	fe 01       	movw	r30, r28
    5230:	e7 5b       	subi	r30, 0xB7	; 183
    5232:	ff 4f       	sbci	r31, 0xFF	; 255
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	a0 e0       	ldi	r26, 0x00	; 0
    523a:	b0 e0       	ldi	r27, 0x00	; 0
    523c:	80 83       	st	Z, r24
    523e:	91 83       	std	Z+1, r25	; 0x01
    5240:	a2 83       	std	Z+2, r26	; 0x02
    5242:	b3 83       	std	Z+3, r27	; 0x03
		SecondOperand = 0;
    5244:	fe 01       	movw	r30, r28
    5246:	e3 5b       	subi	r30, 0xB3	; 179
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	80 e0       	ldi	r24, 0x00	; 0
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	a0 e0       	ldi	r26, 0x00	; 0
    5250:	b0 e0       	ldi	r27, 0x00	; 0
    5252:	80 83       	st	Z, r24
    5254:	91 83       	std	Z+1, r25	; 0x01
    5256:	a2 83       	std	Z+2, r26	; 0x02
    5258:	b3 83       	std	Z+3, r27	; 0x03
		Operator = 0;
    525a:	fe 01       	movw	r30, r28
    525c:	ef 5a       	subi	r30, 0xAF	; 175
    525e:	ff 4f       	sbci	r31, 0xFF	; 255
    5260:	10 82       	st	Z, r1
		Result = 0;
    5262:	fe 01       	movw	r30, r28
    5264:	ee 5a       	subi	r30, 0xAE	; 174
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	a0 e0       	ldi	r26, 0x00	; 0
    526e:	b0 e0       	ldi	r27, 0x00	; 0
    5270:	80 83       	st	Z, r24
    5272:	91 83       	std	Z+1, r25	; 0x01
    5274:	a2 83       	std	Z+2, r26	; 0x02
    5276:	b3 83       	std	Z+3, r27	; 0x03
		SyntaxErrorFlag = false;
    5278:	fe 01       	movw	r30, r28
    527a:	ea 5a       	subi	r30, 0xAA	; 170
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	10 82       	st	Z, r1
		MathErrorFlag   = false;
    5280:	fe 01       	movw	r30, r28
    5282:	e9 5a       	subi	r30, 0xA9	; 169
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	10 82       	st	Z, r1
		Stack8_Initiate(&OperatorStack);
    5288:	ce 01       	movw	r24, r28
    528a:	88 5a       	subi	r24, 0xA8	; 168
    528c:	9f 4f       	sbci	r25, 0xFF	; 255
    528e:	0e 94 1f 23 	call	0x463e	; 0x463e <Stack8_Initiate>
		Stack16_Initiate(&OperandStack);
    5292:	ce 01       	movw	r24, r28
    5294:	86 59       	subi	r24, 0x96	; 150
    5296:	9f 4f       	sbci	r25, 0xFF	; 255
    5298:	0e 94 bf 23 	call	0x477e	; 0x477e <Stack16_Initiate>
		StackSize = 0;
    529c:	fe 01       	movw	r30, r28
    529e:	e4 55       	subi	r30, 0x54	; 84
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	10 82       	st	Z, r1
		CLCD_SetCursor(0,0);
    52a4:	80 e0       	ldi	r24, 0x00	; 0
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
		CLCD_PrintString("																	");
    52ac:	82 e8       	ldi	r24, 0x82	; 130
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <CLCD_PrintString>
		CLCD_SetCursor(0,1);
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	61 e0       	ldi	r22, 0x01	; 1
    52b8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
		CLCD_PrintString("																	");
    52bc:	82 e8       	ldi	r24, 0x82	; 130
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <CLCD_PrintString>
		CLCD_SetCursor(0,0);
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	60 e0       	ldi	r22, 0x00	; 0
    52c8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <CLCD_SetCursor>
    52cc:	8c cb       	rjmp	.-2280   	; 0x49e6 <main+0xd6>

000052ce <__divmodhi4>:
    52ce:	97 fb       	bst	r25, 7
    52d0:	09 2e       	mov	r0, r25
    52d2:	07 26       	eor	r0, r23
    52d4:	0a d0       	rcall	.+20     	; 0x52ea <__divmodhi4_neg1>
    52d6:	77 fd       	sbrc	r23, 7
    52d8:	04 d0       	rcall	.+8      	; 0x52e2 <__divmodhi4_neg2>
    52da:	0c d0       	rcall	.+24     	; 0x52f4 <__udivmodhi4>
    52dc:	06 d0       	rcall	.+12     	; 0x52ea <__divmodhi4_neg1>
    52de:	00 20       	and	r0, r0
    52e0:	1a f4       	brpl	.+6      	; 0x52e8 <__divmodhi4_exit>

000052e2 <__divmodhi4_neg2>:
    52e2:	70 95       	com	r23
    52e4:	61 95       	neg	r22
    52e6:	7f 4f       	sbci	r23, 0xFF	; 255

000052e8 <__divmodhi4_exit>:
    52e8:	08 95       	ret

000052ea <__divmodhi4_neg1>:
    52ea:	f6 f7       	brtc	.-4      	; 0x52e8 <__divmodhi4_exit>
    52ec:	90 95       	com	r25
    52ee:	81 95       	neg	r24
    52f0:	9f 4f       	sbci	r25, 0xFF	; 255
    52f2:	08 95       	ret

000052f4 <__udivmodhi4>:
    52f4:	aa 1b       	sub	r26, r26
    52f6:	bb 1b       	sub	r27, r27
    52f8:	51 e1       	ldi	r21, 0x11	; 17
    52fa:	07 c0       	rjmp	.+14     	; 0x530a <__udivmodhi4_ep>

000052fc <__udivmodhi4_loop>:
    52fc:	aa 1f       	adc	r26, r26
    52fe:	bb 1f       	adc	r27, r27
    5300:	a6 17       	cp	r26, r22
    5302:	b7 07       	cpc	r27, r23
    5304:	10 f0       	brcs	.+4      	; 0x530a <__udivmodhi4_ep>
    5306:	a6 1b       	sub	r26, r22
    5308:	b7 0b       	sbc	r27, r23

0000530a <__udivmodhi4_ep>:
    530a:	88 1f       	adc	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	5a 95       	dec	r21
    5310:	a9 f7       	brne	.-22     	; 0x52fc <__udivmodhi4_loop>
    5312:	80 95       	com	r24
    5314:	90 95       	com	r25
    5316:	bc 01       	movw	r22, r24
    5318:	cd 01       	movw	r24, r26
    531a:	08 95       	ret

0000531c <__prologue_saves__>:
    531c:	2f 92       	push	r2
    531e:	3f 92       	push	r3
    5320:	4f 92       	push	r4
    5322:	5f 92       	push	r5
    5324:	6f 92       	push	r6
    5326:	7f 92       	push	r7
    5328:	8f 92       	push	r8
    532a:	9f 92       	push	r9
    532c:	af 92       	push	r10
    532e:	bf 92       	push	r11
    5330:	cf 92       	push	r12
    5332:	df 92       	push	r13
    5334:	ef 92       	push	r14
    5336:	ff 92       	push	r15
    5338:	0f 93       	push	r16
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	cd b7       	in	r28, 0x3d	; 61
    5342:	de b7       	in	r29, 0x3e	; 62
    5344:	ca 1b       	sub	r28, r26
    5346:	db 0b       	sbc	r29, r27
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	f8 94       	cli
    534c:	de bf       	out	0x3e, r29	; 62
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	cd bf       	out	0x3d, r28	; 61
    5352:	09 94       	ijmp

00005354 <__epilogue_restores__>:
    5354:	2a 88       	ldd	r2, Y+18	; 0x12
    5356:	39 88       	ldd	r3, Y+17	; 0x11
    5358:	48 88       	ldd	r4, Y+16	; 0x10
    535a:	5f 84       	ldd	r5, Y+15	; 0x0f
    535c:	6e 84       	ldd	r6, Y+14	; 0x0e
    535e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5360:	8c 84       	ldd	r8, Y+12	; 0x0c
    5362:	9b 84       	ldd	r9, Y+11	; 0x0b
    5364:	aa 84       	ldd	r10, Y+10	; 0x0a
    5366:	b9 84       	ldd	r11, Y+9	; 0x09
    5368:	c8 84       	ldd	r12, Y+8	; 0x08
    536a:	df 80       	ldd	r13, Y+7	; 0x07
    536c:	ee 80       	ldd	r14, Y+6	; 0x06
    536e:	fd 80       	ldd	r15, Y+5	; 0x05
    5370:	0c 81       	ldd	r16, Y+4	; 0x04
    5372:	1b 81       	ldd	r17, Y+3	; 0x03
    5374:	aa 81       	ldd	r26, Y+2	; 0x02
    5376:	b9 81       	ldd	r27, Y+1	; 0x01
    5378:	ce 0f       	add	r28, r30
    537a:	d1 1d       	adc	r29, r1
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	f8 94       	cli
    5380:	de bf       	out	0x3e, r29	; 62
    5382:	0f be       	out	0x3f, r0	; 63
    5384:	cd bf       	out	0x3d, r28	; 61
    5386:	ed 01       	movw	r28, r26
    5388:	08 95       	ret

0000538a <_exit>:
    538a:	f8 94       	cli

0000538c <__stop_program>:
    538c:	ff cf       	rjmp	.-2      	; 0x538c <__stop_program>
